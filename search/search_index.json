{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the iCub Tech Documentation","text":""},{"location":"#first-launch-with-the-humanoid-robot-icub","title":"<code>First Launch</code> with the Humanoid robot iCub","text":"<ul> <li>The perfect starter guide to handle and check the overall capabilities of iCub.</li> </ul>"},{"location":"#documentation-resources-on-the-icub-hardware","title":"Documentation resources on the <code>iCub Hardware</code>","text":""},{"location":"#documentation-resources-on-the-icub-software","title":"Documentation resources on the <code>iCub Software</code>","text":""},{"location":"#the-main-icub-website","title":"The main <code>iCub Website</code>","text":""},{"location":"#tips-tricks","title":"Tips &amp; Tricks","text":""},{"location":"icub_hw/","title":"iCub HW Documentation","text":"<p>First draft of iCub HW documentation.</p>"},{"location":"icub_hw/#main-hw-repositories","title":"Main HW Repositories","text":"<ul> <li>Mechanical CAD Libraries</li> <li>Mechanical CAD</li> <li>Electronics Boards</li> <li>Wiring Schematics</li> </ul>"},{"location":"icub_hw/#the-icub-versions-table","title":"The iCub Versions Table","text":"<p>iCub Versions Table is a table containing the current known iCub versions.</p>"},{"location":"icub_hw/#the-icub-wiring","title":"The iCub Wiring","text":"<p>iCub Wiring contains the documentation about the Logic and Harness schematics of iCub</p>"},{"location":"icub_hw/#icub-tendons","title":"iCub Tendons","text":"<p>iCub Tendons contains the ultimate step-by-step guide on how to replace broken or out of place tendons of the iCub. It includes also some tutorials on how to build forearms and the overall tendons constituting iCub.</p>"},{"location":"icub_hw/#the-upgrade-kits","title":"The Upgrade Kits","text":"<p>The design of our robot evolves in time. We have been asking ourselves how to propagate the mechanical or hardare enhancements we design to older robots. Our solution is to define upgrade kits that can be applied to specific robots.</p> <p>An upgrade kit is a plastic bag with mechanical parts, hardware boards, screws, wires, tendons and whatever it is required to perform a physical upgrade of the robots, including the instructions.</p>"},{"location":"icub_hw/#icub-kinematics","title":"iCub Kinematics","text":"<p>Here you can find informations about iCub's kinematics.</p>"},{"location":"icub_hw/#icub-3","title":"iCub 3","text":"<p>Here are described the elctrical and mechanical specifications for each joint.</p>"},{"location":"icub_hw/#hands","title":"Hands","text":"<p>Here's reported info about the hands installed on the robots.</p>"},{"location":"icub_hw/#wrist","title":"Wrist","text":"<p>Here's reported info about the wrists installed on the robots.</p>"},{"location":"icub_hw/#icub-cpu-boards","title":"iCub CPU boards","text":"<p>Here's reported info about CPU boards installed on iCub.</p>"},{"location":"icub_hw/#ft-sensors","title":"F/T Sensors","text":"<p>Here's reported info about <code>F/T sensors</code>.</p>"},{"location":"icub_hw/#power-push-buttons","title":"Power push buttons","text":"<p>Here's reported info about <code>power push buttons</code>.</p>"},{"location":"icub_hw/#custom-components","title":"Custom components","text":"<p>Here's reported info about <code>third-party custom components</code>.</p>"},{"location":"icub_sw/","title":"iCub SW Documentation","text":"<ul> <li><code>Software Installation</code></li> <li><code>Software Versioning Table</code></li> <li><code>The OS for the iCub environment</code></li> <li><code>The OS for the ergoCub environment</code></li> <li><code>The YARP Documentation</code></li> <li><code>The iCub Software Documentation</code></li> <li><code>The ergoCub Software Documentation</code></li> <li><code>How to set up multiple iCubs on the same network</code></li> <li><code>iCub Firmware</code></li> <li><code>iCub Microphones</code></li> <li><code>Robot Calibration</code></li> <li><code>Robot Configuration</code></li> <li><code>Standard Calibration Types</code></li> <li><code>iCub 3 Calibration Types</code></li> <li><code>Configure IP on a setup for ETH boards</code></li> <li><code>Using iCub or ergoCub with ROS 2</code></li> <li><code>iCub Force Control</code></li> <li><code>Sensor Interfaces</code></li> <li><code>Tactile Sensors</code></li> </ul>"},{"location":"battery_boards/","title":"Battery Documentation","text":"<p>Here you can find information about different boards related to the battery in the various versions of the robot and some related resources.</p> <ul> <li>BCB Board Documentation</li> <li>BAT Board Documentation<ul> <li>Introduction</li> <li>Firmware</li> <li>Output data</li> <li>Output data displayed on yarp port</li> </ul> </li> <li>BMS Board Documentation<ul> <li>Introduction</li> <li>Output data</li> <li>Output data displayed on yarp port</li> </ul> </li> </ul>"},{"location":"battery_boards/bat_board/bat_board/","title":"BAT board","text":""},{"location":"battery_boards/bat_board/bat_board/#introduction","title":"Introduction","text":"<p>This page describes the <code>BAT</code> board, its protocol and its ouput data. Basically, this board is responsible for the management of the data and signals provided by the battery pack in <code>R1</code>, <code>iCub</code>, and <code>ergoCub</code> robots. Moreover, it should be noted that in these robots it is always coupled with the <code>BMS</code> board, which is responsible for fine-tuning and managing the battery pack status and described in the specific BMS page.</p>"},{"location":"battery_boards/bat_board/bat_board/#firmware","title":"Firmware","text":"<p>When one aims to update the <code>BAT</code> firmware, the correct <code>.hex</code> version ought be selected from the <code>BAT</code> folder. Specifically, there are two different <code>BAT</code> executables: - <code>bat.r1.hex</code>: it addresses R1 robot. - <code>bat.hex</code>: it addresses <code>iCub</code> and <code>ergoCub</code> robots.</p> <p>There exist two different versions of the <code>BAT</code> FW because the <code>dcdc_management</code> phase is done differently between <code>R1</code> and <code>iCub</code>/<code>ergoCub</code>.  Specifically, in <code>iCub</code> and <code>ergoCub</code> robots, CPU and motors are handled separately, and they can work detached. By contrast, in <code>R1</code>, they work always together. Moreover, these robots do have different battery packs, hence the voltage thresholds are customized in the two FW versions.</p> <p>In general, as shown in the figures below (illustrating the connection between the <code>BAT</code> and <code>EMS</code> boards in <code>ergoCub/SN001</code> on the left and in the base of <code>R1/SN003</code> on the right), the <code>BAT</code> can be connected to an <code>EMS</code> board through the <code>CAN</code> connector devoted to receiving the CAN frames sent out by the <code>BAT</code>.</p>"},{"location":"battery_boards/bat_board/bat_board/#output-data","title":"Output data","text":"<p>The data transmitted by the <code>BAT</code> board is related to the overall system, whether the robot is on battery or plugged to the external voltage supply. By contrast, the data transmitted by <code>BMS</code> board is specifically related to the battery pack.</p> <p>Specifically, at the current status of the development (April 2024), the <code>BAT</code> board can send the following data (which is then elaborated by fw and sw and sent to a <code>yarp</code> port):</p> <ul> <li>Input Voltage (\\(V\\)). This can be either the <code>Battery pack</code> voltage or the <code>Power supply</code> voltage depending on how the robot is charged. Anyway, it is always the largest value between the two.</li> <li>Total Current absorbed by the system (\\(A\\)) (for the whole robot). This is the total current consumption of the system (the sum of the three currents: 42V HSM (power-supply/battery-pack) + 12V motor + 12V CPU).</li> <li>Battery Pack Charge (\\(\\%\\)). It has a value different from <code>NaN</code> if the robot has the <code>Battery pack</code> switched enabled.</li> <li>Empty field (NaN). Differently from the <code>BMS</code> board, the average temperature is not available on the <code>BAT</code> board.</li> <li>Battery Pack Status. Currently, it is a bitmask corresponding to  <code>(DCDC_status_B &lt;&lt; 8 ) | DCDC_status_A</code>. Please see the Types of data transmitted for the <code>DCDC_status_B</code> and  <code>DCDC_status_A</code> meanings.</li> </ul>"},{"location":"battery_boards/bat_board/bat_board/#communication-characteristics","title":"Communication characteristics","text":"<p>The <code>BAT</code> board sends the pieces of information detailed above with a FIFO cycle of <code>100 ms</code>. Then, the <code>EMS</code> board handles the CAN frames sent by the <code>BAT</code>, parses them, and finally forwards them to the higher level of the <code>yarprobotinterface</code> at the specific port defined in the configuration files with a frequency of <code>1 Hz</code>. Furthermore, that info is also sent directly from the <code>BAT</code> to the display attached to the robot, every <code>1 s</code>.</p>"},{"location":"battery_boards/bat_board/bat_board/#types-of-data-transmitted","title":"Types of data transmitted","text":"<p>As mentioned at the end of the introduction section, the CAN frames sent by the <code>BAT</code> to the <code>EMS</code> and parsed by this latter board are:</p> <ul> <li> <p>System power info message sent at address <code>0x620</code> as:</p> Byte Value Description 0 vBatterydV &amp; 0xFF LSBs of input voltage (the largest between battery and power supply) 1 (vBatterydV &gt;&gt; 8) &amp; 0xFF MSBs of input voltage (the largest between battery and power supply) 2 iBatterydA &amp; 0xFF LSBs of the total current absorbed by the system 3 (iBatterydA &gt;&gt; 8) &amp; 0xFF MSBs of the total current absorbed by the system 4 Battery_charge &amp; 0xFF Byte of the battery pack charge 5 0x00 Not used 6 0x00 Not used (Battery pack temperature not available) 7 0x00 Not used (Battery pack temperature not available) </li> <li> <p>System status message sent at address <code>0x629</code> as:</p> Byte Value Description 0 DCDC_status_A &amp; 0xFF DCDC status A 1 DCDC_status_B &amp; 0xFF DCDC status A 2 0x00 Not used 3 0x00 Not used 4 0x00 Not used 5 0x00 Not used 6 0x00 Not used 7 0x00 Not used </li> </ul> <p>where:</p> <ul> <li> <p>DCDC_status_A (bits are summed up together):</p> Position BIT[7] BIT[6] BIT[5] BIT[4] BIT[3] BIT[2] BIT[1] BIT[0] Value V12board V12board_F V12motor V12motor_F HSM HSM_PG HSM_F HSM_broken Description 12V DCDC board regulator 12V DCDC board regulator OVERCURRENT fault 12V DCDC motor regulator 12V DCDC motor regulator OVERCURRENT fault Hot Swap Manager Hot Swap Manager POWER GOOD Hot Swap Manager OVERCURRENT/OVERVOLTAGE fault Hot Swap Manager MOSFETs damaged Possible status ON(1)/OFF(0) OC/NORMAL ON/OFF OC/NORMAL ON/OFF HSM output voltage stable after transient/HSM output voltage not guaranteed OC-OV/NORMAL HSM MOSFETs probably burned/NORMAL </li> <li> <p>DCDC_status_B:</p> Position BIT[3] BIT[2] BIT[1] BIT[0] Value HSM_SW_F HSM_HW_F PB1_restart PB2_restart Description OC Fault on the HSM triggered by overcurrent (threshold defined in the FW) OC Fault on the HSM triggered by FLT Pin on the HSM micro Restart phase of the push button 1 Restart phase of the push button 2 Possible status FAULT_OFF(0)/FAULT_ON(1) FAULT_OFF(0)/FAULT_ON(1) Start-up phase(1)/stable operation(0) Start-up phase/stable operation </li> <li> <p>Final status shown at the port is equal to: </p> <p><code>(DCDC_status_B &lt;&lt; 8 ) | DCDC_status_A</code></p> </li> </ul> <p>Thereby, the end user sees a decimal number on the BAT Display, which can be transformed into BITs and analyzed as described below:</p> BIT Position 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 VALUE NAN NAN NAN NAN HSM_SW_F HSM_HW_F PB1 PB2 V12board V12board_F V12motor V12motor_F HSM HSM_PG HSM_F HSM_broken <pre><code>Example:\n\nIf we get 172 as a decimal value, then we will have in bits: \n\n    0000 0000 1010 1100  \n\nThe active bits are thus related to:\n- HSM_PG\n- HSM\n- V12motor\n- V12board\n</code></pre>"},{"location":"battery_boards/bat_board/bat_board/#data-displayed-on-the-yarp-port","title":"Data displayed on the YARP port","text":"<p>The user gets the data from a specific YARP port defined in the configuration file (e.g., on the ergoCub robot it is <code>/ergocub/battery/bat/data:o</code>). Here's the format:</p> <ul> <li>Input Voltage to the system, which is displayed in \\(Volt [V]\\).</li> <li>Total current absorbed by the system is displayed in \\(Ampere [A]\\) (sum of the three currents: 42V HSM + 12V motor + 12V cpu).</li> <li>Battery state of charge is displayed in \\(\\%\\).</li> <li>Always NaN (Ready for Average Temperature of the Battery Pack in \\(^\\circ C\\) if available)</li> <li>Status is displayed as a 16-bit integer (only the first 12 bits are valid), whose mapping adheres to the tables above.</li> </ul> <p>Warning</p> <p>The Average Temperature field is always shown as <code>NaN</code> in the <code>yarp</code> port related to the <code>BAT</code> data. Differently from the <code>BMS</code> board, the <code>BAT</code> board cannot provide this piece of information. Therefore, on the firmware side, the CAN message bytes are set to <code>0x00</code> and on the software side we are sending <code>NaN</code> to the <code>yarp</code> port <code>/ergocub/battery/bat/data:o</code>.</p> <p>Moreover, at start-up, a DEBUG message with the initial values of the status (converted to the description strings defined in the static array <code>s_boards_map_of_battery_alarm_status</code> in <code>embObjBattery::updateStatusStringStream()</code> method) is sent to <code>yarprobotinterface</code>.  Then, each time the status changes, a DEBUG message is sent to <code>yarprobotinterface</code>, which in turn prints out a description only about the values of those bits that have switched.</p>"},{"location":"battery_boards/bcb_board/bcb_bluetooth_protocol/","title":"BCB Bluetooth Protocol","text":""},{"location":"battery_boards/bcb_board/bcb_bluetooth_protocol/#introduction","title":"Introduction","text":"<p>This page describes the Bluetooth communication protocol for the control and diagnostics of the iCub battery backpack system. The iCub backpack communicates via the <code>BCB</code> electronic board, which embeds a Bluetooth module. To pair with it, no special passwords or codes are needed; the electronic board is always visible from any other device, it is called RNBT-F29x, and must be considered as a SLAVE.</p> <p>After turned on, when pairing has not yet taken place: - the blue LED DL5 will blink - the green LED DL4 will be on and fixed</p> <p>both LEDs are next to the Bluetooth module as shown in the following figure:</p> <p></p> <p>After pairing, the blue LED turns on steadily and the green LED turns off. If there is data transfer in transmission or reception, the orange LED DL6 will flash.</p>"},{"location":"battery_boards/bcb_board/bcb_bluetooth_protocol/#communication-characteristics","title":"Communication characteristics","text":"<p>Baud rate 115200, 8 data bits, parity none, stop-bit one.</p>"},{"location":"battery_boards/bcb_board/bcb_bluetooth_protocol/#types-of-data-in-transmission-and-reception","title":"Types of data in transmission and reception","text":"<p>The data transferred through Bluetooth concern the parameters of the iCub battery, system status feedback, sending of commands.</p>"},{"location":"battery_boards/bcb_board/bcb_bluetooth_protocol/#list-of-commands","title":"List of commands","text":""},{"location":"battery_boards/bcb_board/bcb_bluetooth_protocol/#write-data","title":"Write data","text":"<p>The following table shows the bytes that can be sent and the corresponding function.</p> Command Description 0x00 Disable data transfer 0x01 Enable data transfer 0x10 PC104 power on 0x11 PC104 shutdown 0x20 Motors power on 0x21 Motors shutdown 0xFF Firmware version of the <code>BCB</code> board <p>If data transfer is enabled, the blue led on the card will blink.</p> <p></p> <p>Note: in the event of a fault on the PC104 and/or motors (overcurrent anomaly), the corresponding power supply must be reset using the buttons on the backpack by pressing the flashing red LED button for a few seconds. In any case, investigate or report the problem.</p>"},{"location":"battery_boards/bcb_board/bcb_bluetooth_protocol/#read-data","title":"Read data","text":"<p>If data transmission is enabled, the <code>BCB</code> board continuously sends the battery status information (voltage, current, charge), the status of the DC/DC converters (ON, OFF, fault), and the status of the Hot Swap Manager (power good, fault). It also signals a possible restart following a fault. The string sent is made up of 10 bytes:</p> RX[0] RX[1] RX[2] RX[3] RX[4] RX[5] RX[6] RX[7] RX[8] RX[9] 0x00 Battery Voltage (MSB) Battery Voltage (LSB) Battery current (MSB) Battery current (LSB) Battery Charge (MSB) Battery Charge (LSB) Backpack Status \\r \\n <p>The values of the parameters are obtained as follows:</p> <ul> <li>\\(\\text{Battery voltage} = RX[1] \\cdot 256 + RX[2] \\; \\text{expressed in mV}\\)</li> <li>\\(\\text{Battery current} = RX[3] \\cdot 256 + RX[4] \\; \\text{expressed in mA}\\)</li> <li>\\(\\text{Battery charge} = RX[5] \\cdot 256 + RX[6] \\; \\text{expressed in %}\\)</li> </ul> <p>The status byte RX[7] is divided as follows:</p> RX[7] (bit 7..0) Description Bit 7 1-&gt; PC104 on, 0-&gt; PC104 off Bit 6 1-&gt; PC104 fault , 0-&gt; PC104 ok Bit 5 1-&gt; Motors on, 0-&gt; Motors off Bit 4 1-&gt; Motors fault , 0-&gt; Motors ok Bit 3 1-&gt; HSM on, 0-&gt; HSM off Bit 2 1-&gt; HSM running, 0-&gt; HSM not ready yet Bit 1 1-&gt; HSM fault, 0-&gt; HSM ok Bit 0 1-&gt; restarting after a fault, 0-&gt; normal operation"},{"location":"battery_boards/bms_board/bms_board/","title":"BMS board","text":""},{"location":"battery_boards/bms_board/bms_board/#introduction","title":"Introduction","text":"<p>The Battery Management System (<code>BMS</code>) is the board responsible for the correct functioning of the battery pack. Thereby, it prevents the battery from operating outside its safe boundaries, while monitoring its state, and reporting meaningful data to the end user.</p> <p>The <code>BMS</code> is connected to an <code>EMS</code> board through the <code>CAN</code> connector devoted to receiving the CAN frames sent out by the <code>BMS</code> itself. The figures below illustrate the CAN connection between the <code>BMS</code> and <code>EMS</code> boards on the ergoCub robot platform.</p>"},{"location":"battery_boards/bms_board/bms_board/#output-data","title":"Output data","text":"<p>The BMS provides the battery pack information, such as <code>voltage</code>, <code>current</code>, <code>state of charge</code>, <code>average temperature</code>, and <code>error flags</code>.  Specifically, the <code>BMS</code> board can send the following data (which is then elaborated by fw and sw and sent to a <code>yarp</code> port):</p> <ul> <li>Battery-Pack Voltage in Volt. This is the <code>Battery pack</code> voltage.</li> <li>Total Battery-Pack Current. This is the total current, with sign, flowing outwards or inwards to the battery pack. Current has a negative sign if going out from the battery pack towards the robot and a positive sign otherwise, for example when the batteries get charged.</li> <li>Battery Pack Charge in \\(\\%\\). This has a value different from <code>NaN</code> if the robot has the <code>Battery pack</code> switch enabled.</li> <li>Battery-Pack Temperature in \\(^\\circ C\\). Differently from the <code>BAT</code> board, this field is available for <code>BMS</code> and it is the average temperature of the battery pack.</li> <li>Battery-Pack Status. Currently, it is a bitmask corresponding to the error flags that can be risen by the <code>BMS</code>. Please see the Types of data transmitted for the <code>BMS_STATUS</code> meanings.</li> </ul>"},{"location":"battery_boards/bms_board/bms_board/#communication-characteristics","title":"Communication characteristics","text":"<p>The <code>BMS</code> board sends the pieces of information detailed above in polling with a frequency of <code>1 Hz</code>. Then, the <code>EMS</code> board handles the CAN frames sent by the <code>BAT</code>, parses them, and finally forwards them to the higher level of the <code>yarprobotinterface</code> at the specific port defined in the configuration files with a default frequency of <code>1 Hz</code>.</p>"},{"location":"battery_boards/bms_board/bms_board/#types-of-data-transmitted","title":"Types of data transmitted","text":"<p>Referring to the current <code>CAN</code> protocol of the <code>BMS</code>, the frames that the  <code>EMS</code> manages are the following:</p> <ul> <li> <p>Battery pack info message sent at address <code>0x620</code> as:</p> Bytes Value Description 0-1 Battery-pack voltage in deciVolt battery pack voltage as unsigned short int 2-3 Instantaneous Current in deciAmpere battery pack instantaneous current as short int 4-5 State of Charge in % battery pack state of charge as unsigned short int 6-7 Average Temperature in Celsius batter pack average temperature as unsigned short int </li> <li> <p>Battery pack status message sent at address <code>0x628</code> in the byte0 as:</p> Bit Value Description 0 [0 - 1] battery pack low voltage error 1 [0 - 1] battery pack high voltage error 2 [0 - 1] battery pack overcurrent in discharge 3 [0 - 1] battery pack overcurrent in charge 4 [0 - 1] battery pack low state of charge 5 [0 - 1] battery pack low temperature 6 [0 - 1] battery pack high temperature </li> </ul> <p>Note</p> <p>Specifically to this message, only the <code>general alarm status</code> of the battery pack is sent out, stored at <code>byte 0</code>. This identifies the single or multiple causes that trigger the alarm status on <code>BMS</code>. Note that, if an alarm is raised, it remains engaged for 1 minute, even if the alarm is cleared.</p>"},{"location":"battery_boards/bms_board/bms_board/#data-displayed-on-the-yarp-port","title":"Data displayed on the YARP port","text":"<p>The user gets the data from the specific YARP port defined in the configuration file (e.g., on the ergoCub robot it is <code>/ergocub/battery/bms/data:o</code>). Here's the format:</p> <ul> <li>Battery-Pack Voltage, which is displayed in \\(Volt [V]\\).</li> <li>Instantaneous current, flowing inwards/outwards the battery pack, which is displayed in \\(Ampere [A]\\).</li> <li>Battery-Pack state of charge, which is displayed in \\(\\%\\).</li> <li>Average Temperature of the battery pack, which is displayed in \\(^\\circ C\\).</li> <li>Battery-Pack Status is displayed as a 16-bit integer (only the first 7 bits are valid), whose mapping adheres to the tables above.</li> </ul> <p>Moreover, at start-up, a DEBUG message with the initial values of the status (converted to the description strings defined in the static array <code>s_boards_map_of_battery_alarm_status</code> in <code>embObjBattery::updateStatusStringStream()</code> method) is sent to <code>yarprobotinterface</code>.  Then, each time the status changes, a DEBUG message is sent to <code>yarprobotinterface</code>, which in turn prints out a description only about the values of those bits that have switched.</p>"},{"location":"configure_static_ip/configure-static-ip/","title":"Configure IP on a setup for ETH boards","text":"<p>This documentation describes how to setup a laptop/workstation network interface in order to communicate with an <code>ETH</code> board (i.e. <code>mc4plus</code>, <code>mc2plus</code> or <code>ems</code>)</p> <p></p> <p>In the image above the <code>ETH</code> interface used is an <code>USB/ETH</code> adapter but a physical network interface can be used as well.</p>"},{"location":"configure_static_ip/configure-static-ip/#requirements","title":"Requirements","text":"<p>To let the setup working we need:</p> <ul> <li>A laptop/workstation with a network interface available (both physical or an <code>USB/ETH</code> adapter)</li> <li>The <code>robotology-superbuild</code> installed</li> </ul> <p>Memo</p> <p>Remember to enable the <code>ROBOTOLOGY_ENABLE_ICUB_HEAD</code> profile when compiling <code>robotology-superbuild</code> in order to make <code>FirmwareUpdater</code> available.</p>"},{"location":"configure_static_ip/configure-static-ip/#ubuntu","title":"Ubuntu","text":"<p>In order to communicate with an <code>ETH</code> board, we need to assign a <code>static IP</code> to the network interface used.</p> <p>To do that :</p> <ol> <li>Open <code>Settings</code> -&gt; <code>Network</code></li> <li>Open settings of the network interface to be used (in this example <code>AXIS Ethernet</code>)</li> <li>Go to <code>IPV4</code> tab</li> <li>Select <code>Manual</code> in the <code>IPV4 Method</code></li> <li>Set <code>10.0.1.104</code> and <code>255.255.255.0</code> in the <code>Address</code> and <code>Netmask</code> fileds respectively</li> <li>Click on <code>Apply</code> and the restart the network interface</li> </ol> <p></p> <p>Note</p> <p>It's also possible to define the static IP address by editing the <code>/etc/network/interfaces</code> as follows: <pre><code>    # The primary network interface\n        auto eth0\n        allow-hotplug eth0\n        iface eth0 inet static\n        address 10.0.1.104\n        netmask 255.255.255.0\n        network 10.0.1.0\n        broadcast 10.0.1.255\n</code></pre></p>"},{"location":"configure_static_ip/configure-static-ip/#windows","title":"Windows","text":"<p>In order to communicate with an <code>ETH</code> board, we need to assign a <code>static IP</code> to the network interface used.</p> <p>In this example, a <code>USB/ETH</code> adapter is used (but a physical network interface can be used as well) to communicate with an <code>EMS</code> board.</p> <p>Follow the steps below:</p> <ul> <li>In <code>Control Panel</code> go to <code>Network and Internet</code></li> </ul> <p></p> <ul> <li>Select <code>Network and Sharing Center</code> </li> </ul> <p></p> <ul> <li>Select <code>Change adapter settings</code> </li> </ul> <p></p> <ul> <li>Right click on the desired network interface then select <code>Properties</code></li> </ul> <p></p> <ul> <li>Select <code>Internet Protocol Version 4 (TCP/IPv4)</code> then click on <code>Properties</code></li> </ul> <p></p> <ul> <li>Select <code>Use the following IP address</code> and input the values as in figure below, then click <code>OK</code></li> </ul> <p></p>"},{"location":"configure_static_ip/configure-static-ip/#verify-the-setup","title":"Verify the setup","text":"<p>In order to check if the above operations went ok:</p> <ol> <li>Power on the board</li> <li>Run <code>FirmwareUpdater</code></li> <li>Select the <code>ETH</code> interface</li> <li>Click on <code>Discover</code></li> </ol> <p>Now you should see the board listed:</p> <p></p>"},{"location":"custom_components/custom_components/","title":"Custom components","text":""},{"location":"custom_components/custom_components/#moog-motors","title":"Moog motors","text":""},{"location":"custom_components/custom_components/#motors-characteristics","title":"Motors' characteristics","text":"<ul> <li>C2900524</li> <li>C2900525</li> <li>C2900575</li> <li>C2900576</li> <li>C2900580</li> <li>C2900583</li> <li>C2900584</li> </ul>"},{"location":"ergoCub1/ergoCub1-joints/","title":"ergoCub 1","text":"<p>The technical specifications of the electro-mechanical components for the joints of ergoCub 1 are as described below: </p>"},{"location":"ergoCub1/ergoCub1-joints/#head","title":"Head","text":""},{"location":"ergoCub1/ergoCub1-joints/#joint-0-neck-pitch","title":"Joint 0 - neck pitch","text":"Joint identifier(s) <code>neck_pitch</code> Motor DC Micromotor, Faulhaber 2342S012CR, OD 23 Motor Encoder Incremental encoder IE2-512, (integrated with motor) Transmission 1<sup>st</sup> stage - Belt drive, Reduction 28/18 Speed Reducer Harmonic Drive HUFC-8-100-2A, Reduction 100:1 Transmission 2<sup>nd</sup> stage - Cable drive, Reduction 31.7/30.5 Joint Encoder AEA board with MA730 (absolute angle encoder) Range of Motion (HW) -45/+22 (degrees) Range of Motion (SW) -40/+22 (degrees) <p>Note</p> <p><code>neck_pitch</code> joint is coupled in a differential mechanism with <code>neck_roll</code></p>"},{"location":"ergoCub1/ergoCub1-joints/#joint-1-neck-roll","title":"Joint 1 - neck roll","text":"Joint identifier(s) <code>neck_roll</code> Motor DC Micromotor, Faulhaber 2342S012CR, OD 23 Motor Encoder Incremental encoder IE2-512, (integrated with motor) Transmission 1<sup>st</sup> stage - Belt drive, Reduction 28/18 Speed Reducer Harmonic Drive HUFC-8-100-2A, Reduction 100:1 Transmission 2<sup>nd</sup> stage - Cable drive, Reduction 31.7/30.5 Joint Encoder AEA board with MA730 (absolute angle encoder) Range of Motion (HW) -20/+20 (degrees) Range of Motion (SW) -20/+20 (degrees) <p>Note</p> <p><code>neck_roll</code> joint is coupled in a differential mechanism with <code>neck_pitch</code></p>"},{"location":"ergoCub1/ergoCub1-joints/#joint-2-neck-yaw","title":"Joint 2 - neck yaw","text":"Joint identifier(s) <code>neck_yaw</code> Motor DC Micromotor, Faulhaber 2224U012SR, OD 22 Motor Encoder Incremental encoder IE2-512, (integrated with motor) Speed Reducer Harmonic Drive HUFC-8-100-2A, Reduction 100:1 Joint Encoder AEA board with MA730 (absolute angle encoder) Range of Motion (HW) -45/+45 (degrees) Range of Motion (SW) -45/+45 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-3-camera-tilt","title":"Joint 3 - camera tilt","text":"Joint identifier(s) <code>camera_tilt</code> Motor DC Micromotor, Faulhaber 1524E012SR, OD 15 Motor Encoder Incremental encoder IE2-512, (integrated with motor) Speed Reducer Spur gearhead Faulhaber 15/8, Reduction 141:1 (integrated with motor) Transmission Linkage drive (1:1) Joint Encoder AEA board with MA730 (absolute angle encoder) Range of Motion (HW) -30/+30 (degrees) Range of Motion (SW) -30/+30 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#arm-upperarm-forearm","title":"Arm - Upperarm, Forearm","text":""},{"location":"ergoCub1/ergoCub1-joints/#joint-0-shoulder-pitch","title":"Joint 0 - shoulder pitch","text":"Joint identifier(s) <code>r_shoulder_pitch</code> , <code>l_shoulder_pitch</code> Motor Brushless DC, MOOG_C2900576, OD 49.2, ID 15.5, L 24.7, 8 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Speed Reducer Harmonic Drive CSD-20-100-2UH, Reduction 100:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (PWB_103839), 64/63 pole pairs, OD 50.7 Range of Motion (HW) -170/+35 (degrees) Range of Motion (SW) -130/+14 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-1-shoulder-roll","title":"Joint 1 - shoulder roll","text":"Joint identifier(s) <code>r_shoulder_roll</code> , <code>l_shoulder_roll</code> Motor Brushless DC, MOOG_C2900576, OD 49.2, ID 15.5, L 24.7, 8 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Speed Reducer Harmonic Drive CSD-17-100-2A, Reduction 100:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (PWB_103839), 64/63 pole pairs, OD 50.7 Range of Motion (HW) -15/+150 (degrees) Range of Motion (SW) -00/+130 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-2-shoulder-yaw","title":"Joint 2 - shoulder yaw","text":"Joint identifier(s) <code>r_shoulder_yaw</code> , <code>l_shoulder_yaw</code> Motor Brushless DC, MOOG_C2900575, OD 49.2, ID 15.5, L 17.7, 8 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Speed Reducer Harmonic Drive CSD-17-100-2UH, Reduction 100:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (PWB_103839), 64/63 pole pairs, OD 50.7 Range of Motion (HW) -52/+82 (degrees) Range of Motion (SW) -50/+80 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-3-elbow","title":"Joint 3 - elbow","text":"Joint identifier(s) <code>r_elbow</code> , <code>l_elbow</code> Motor Brushless DC, MOOG_C2900575, OD 49.2, ID 15.5, L 17.7, 8 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Speed Reducer Harmonic Drive CSD-17-100-2A, Reduction 100:1 Transmission Linkage drive (1:1) Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (MU7S), 25/32 pole pairs, OD 24.5 Range of Motion (HW) -5/+120 (degrees) Range of Motion (SW) -3/+105 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-4-wrist-yaw","title":"Joint 4 - wrist yaw","text":"Joint identifier(s) <code>r_wrist_yaw</code> , <code>l_wrist_yaw</code> Motor Brushless DC, Faulhaber 2214S024BXTH, OD 22 Motor Encoder None Speed Reducer Planetary Gearhead, Faulhaber 22 GPT, Reduction 196:1 (integrated with motor) Transmission Belt drive (2:1) Joint Encoder AEA board with MA730 (absolute angle encoder) Range of Motion (HW) -92/+92 (degrees) Range of Motion (SW) -90/+90 (degrees) <p>Note</p> <p>all wrist joints are coupled into a co-axial spherical parallel mechanism</p>"},{"location":"ergoCub1/ergoCub1-joints/#joint-5-wrist-roll","title":"Joint 5 - wrist roll","text":"Joint identifier(s) <code>r_wrist_roll</code> , <code>l_wrist_roll</code> Motor Brushless DC, Faulhaber 2214S024BXTH, OD 22 Motor Encoder None Speed Reducer Planetary Gearhead, Faulhaber 22 GPT, Reduction 196:1 (integrated with motor) Transmission Belt drive (2:1) Joint Encoder AEA board with MA730 (absolute angle encoder) Range of Motion (HW) -20/+30 (degrees) Range of Motion (SW) -20/+30 (degrees) <p>Note</p> <p>all wrist joints are coupled into a co-axial spherical parallel mechanism</p>"},{"location":"ergoCub1/ergoCub1-joints/#joint-6-wrist-pitch","title":"Joint 6 - wrist pitch","text":"Joint identifier(s) <code>r_wrist_pitch</code> , <code>l_wrist_pitch</code> Motor Brushless DC, Faulhaber 2214S024BXTH, OD 22 Motor Encoder None Speed Reducer Planetary Gearhead, Faulhaber 22 GPT, Reduction 196:1 (integrated with motor) Transmission Belt drive (2:1) Joint Encoder AEA board with MA730 (absolute angle encoder) Range of Motion (HW) -20/+20 (degrees) Range of Motion (SW) -20/+20 (degrees) <p>Note</p> <p>all wrist joints are coupled into a co-axial spherical parallel mechanism</p>"},{"location":"ergoCub1/ergoCub1-joints/#arm-hand","title":"Arm - Hand","text":""},{"location":"ergoCub1/ergoCub1-joints/#joint-7-thumb-adductionabduction","title":"Joint 7 - thumb adduction/abduction","text":"Joint identifier(s) <code>r_thumb_add</code> , <code>l_thumb_add</code> Motor DC, Maxon DCX10S EB KL 9V, OD 10 Motor Encoder None Speed Reducer Planetary Gearhead, Maxon GPX10, Reduction 256:1 (integrated with motor) Transmission Linkage (variable reduction) Joint Encoder FAP board with finger absolute position sensor Range of Motion (HW) +0/+100 (degrees) Range of Motion (SW) +0/+85 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-8-thumb-open-close","title":"Joint 8 - thumb open &amp; close","text":"Joint identifier(s) <code>r_thumb_oc</code> , <code>l_thumb_oc</code> Motor DC Micromotor, Faulhaber 1331T012SR, OD 13 Motor Encoder Incremental encoder IE2-400, (integrated with motor) Speed Reducer Planetary Gearhead, Faulhaber 14/1, Reduction 159:1 (integrated with motor) Transmission Tendon drive and linkages Joint Encoder FAP board with finger absolute position sensor Range of Motion (HW) +0/+90 (degrees) Range of Motion (SW) +4/+70 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-9-index-adductionabduction","title":"Joint 9 - index adduction/abduction","text":"Joint identifier(s) <code>r_index_add</code> , <code>l_index_add</code> Motor DC Gearmotor, Faulhaber 1512U012SR 324:1, OD 15 Motor Encoder None Speed Reducer Spur Gearhead, Reduction 324:1 (integrated with motor) Transmission Linkages (variable reduction) Joint Encoder FAP board with finger absolute position sensor Range of Motion (HW) +0/+15 (degrees) Range of Motion (SW) +0/+15 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-10-index-finger-open-close","title":"Joint 10 - index finger open &amp; close","text":"Joint identifier(s) <code>r_index_oc</code> , <code>l_index_oc</code> Motor DC Micromotor, Faulhaber 1331T012SR, OD 13 Motor Encoder Incremental encoder IE2-400, (integrated with motor) Speed Reducer Planetary Gearhead, Faulhaber 14/1, Reduction 159:1 (integrated with motor) Transmission Tendon drive and linkages Joint Encoder FAP board with finger absolute position sensor Range of Motion (HW) +0/+90 (degrees) Range of Motion (SW) +4/+85 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-11-middle-finger-open-close","title":"Joint 11 - middle finger open &amp; close","text":"Joint identifier(s) <code>r_middle_oc</code> , <code>l_middle_oc</code> Motor DC Micromotor, Faulhaber 1331T012SR, OD 13 Motor Encoder Incremental encoder IE2-400, (integrated with motor) Speed Reducer Planetary Gearhead, Faulhaber 14/1, Reduction 159:1 (integrated with motor) Transmission Tendon drive and linkages Joint Encoder FAP board with finger absolute position sensor Range of Motion (HW) +0/+90 (degrees) Range of Motion (SW) +4/+85 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-12-ring-pinky-finger-open-close","title":"Joint 12 - ring &amp; pinky finger open &amp; close","text":"Joint identifier(s) <code>r_ring_pinky_oc</code> , <code>l_ring_pinky_oc</code> Motor DC Micromotor, Faulhaber 1331T012SR, OD 13 Motor Encoder Incremental encoder IE2-400, (integrated with motor) Speed Reducer Planetary Gearhead, Faulhaber 14/1, Reduction 159:1 (integrated with motor) Transmission Tendon drive and linkages Joint Encoder FAP board with finger absolute position sensor Range of Motion (HW) +0/+90 (degrees) Range of Motion (SW) +4/+85 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#torso","title":"Torso","text":""},{"location":"ergoCub1/ergoCub1-joints/#joint-0-torso-roll","title":"Joint 0 - torso roll","text":"Joint identifier(s) <code>torso_roll</code> Motor Brushless DC, MOOG_C2900576, OD 49.2, ID 15.5, L 24.7, 8 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Speed Reducer Harmonic Drive CSD-20-100-2UH, Reduction 100:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (PWB_103839), 64/63 pole pairs, OD 50.7 Range of Motion (HW) -25/+25 (degrees) Range of Motion (SW) -23/+23 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-1-torso-pitch","title":"Joint 1 - torso pitch","text":"Joint identifier(s) <code>torso_pitch</code> Motor Brushless DC, MOOG_C2900576, OD 49.2, ID 15.5, L 24.7, 8 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Speed Reducer Harmonic Drive CSD-20-160-2UH, Reduction 160:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (PWB_103839), 64/63 pole pairs, OD 50.7 Range of Motion (HW) -20/+65 (degrees) Range of Motion (SW) -18/+45 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-2-torso-yaw","title":"Joint 2 - torso yaw","text":"Joint identifier(s) <code>torso_yaw</code> Motor Brushless DC, MOOG_C2900576, OD 49.2, ID 15.5, L 24.7, 8 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Speed Reducer Harmonic Drive CSD-20-100-2UH, Reduction 100:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (PWB_103839), 64/63 pole pairs, OD 50.7 Range of Motion (HW) -45/+45 (degrees) Range of Motion (SW) -43/+43 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#leg","title":"Leg","text":""},{"location":"ergoCub1/ergoCub1-joints/#joint-0-hip-pitch","title":"Joint 0 - hip pitch","text":"Joint identifier(s) <code>r_hip_pitch</code> , <code>l_hip_pitch</code> Motor Brushless DC, MOOG_C2900580, OD 72.4, ID 15.5, L 27.5, 12 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Speed Reducer Harmonic Drive CSD-25-100-2UH, Reduction 100:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (PWB_103839), 64/63 pole pairs, OD 50.7 Range of Motion (HW) -44/+110 (degrees) Range of Motion (SW) -42/+102 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-1-hip-roll","title":"Joint 1 - hip roll","text":"Joint identifier(s) <code>r_hip_roll</code> , <code>l_hip_roll</code> Motor Brushless DC, MOOG_C2900576, OD 49.2, ID 15.5, L 24.7, 8 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Transmission Belt drive (1:1) Speed Reducer Harmonic Drive CSD-20-160-2UH, Reduction 160:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (PWB_103839), 64/63 pole pairs, OD 50.7 Range of Motion (HW) -20/+111 (degrees) Range of Motion (SW) -15/+108 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-2-hip-yaw","title":"Joint 2 - hip yaw","text":"Joint identifier(s) <code>r_hip_yaw</code> , <code>l_hip_yaw</code> Motor Brushless DC, MOOG_C2900576, OD 49.2, ID 15.5, L 24.7, 8 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Speed Reducer Harmonic Drive CSD-20-100-2UH, Reduction 100:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (PWB_103839), 64/63 pole pairs, OD 50.7 Range of Motion (HW) -81/+81 (degrees) Range of Motion (SW) -78/+78 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-3-knee","title":"Joint 3 - knee","text":"Joint identifier(s) <code>r_knee</code> , <code>l_knee</code> Motor Brushless DC, MOOG_C2900580, OD 72.4, ID 15.5, L 27.5, 12 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Transmission Belt drive (1:1) Speed Reducer Harmonic Drive CSD-25-100-2UH, Reduction 100:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (PWB_103839), 64/63 pole pairs, OD 50.7 Range of Motion (HW) -105/+7 (degrees) Range of Motion (SW) -103/+5 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-4-ankle-pitch","title":"Joint 4 - ankle pitch","text":"Joint identifier(s) <code>r_ankle_pitch</code> , <code>l_ankle_pitch</code> Motor Brushless DC, MOOG_C2900580, OD 72.4, ID 15.5, L 27.5, 12 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Transmission Belt drive (1:1) Speed Reducer Harmonic Drive CSD-25-100-2UH, Reduction 100:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (PWB_103839), 64/63 pole pairs, OD 50.7 Range of Motion (HW) -45/+45 (degrees) Range of Motion (SW) -43/+43 (degrees)"},{"location":"ergoCub1/ergoCub1-joints/#joint-5-ankle-roll","title":"Joint 5 - ankle roll","text":"Joint identifier(s) <code>r_ankle_roll</code> , <code>l_ankle_roll</code> Motor Brushless DC, MOOG_C2900576, OD 49.2, ID 15.5, L 24.7, 8 pole pairs, without Hall Sensor Motor Encoder LCORE5 board with AEDR-850x (reflective optical incremental encoder) + Optical Disk 004 with 900 CPR, OD 26 Speed Reducer Harmonic Drive CSD-17-160-2A, Reduction 160:1 Joint Encoder AMO board with iC-MU (absolute magnetic off-axis encoder) + Magnetic wheel (MU7S), 25/32 pole pairs, OD 24.5 Range of Motion (HW) -25/+25 (degrees) Range of Motion (SW) -23/+23 (degrees)"},{"location":"ergoCub1_wiring/","title":"Scope of document","text":"<p>The purpose of this document is to provide detailed documentation about the electronics, wiring and sensors and motors placement.</p>"},{"location":"ergoCub1_wiring/#the-ergocub-wiring","title":"The ergoCub wiring","text":"<p>Please click on any of the link below to go to the right page.</p> <ul> <li>ergoCub 1.0</li> <li>ergoCub 1.1</li> <li>ergoCub 1.2</li> <li>ergoCub 1.3</li> </ul>"},{"location":"ergoCub1_wiring/ergoCub1_0/","title":"ergoCub 1.0","text":""},{"location":"ergoCub1_wiring/ergoCub1_0/#ergocub-10-wiring","title":"ergoCub 1.0 Wiring","text":"<p>The system architecture of ergoCub1.0 is depicted in the following image:</p>"},{"location":"ergoCub1_wiring/ergoCub1_0/#logic-and-harness-ergocub-10-e10-full-robot","title":"Logic and Harness ergoCub 1.0 E1.0 Full Robot","text":"<ul> <li>ergoCub1.0 Logic_1.0.0</li> <li>ergoCub1.0 Harness_1.0.0</li> </ul>"},{"location":"ergoCub1_wiring/ergoCub1_1/","title":"ergoCub 1.1","text":""},{"location":"ergoCub1_wiring/ergoCub1_1/#ergocub-11-wiring","title":"ergoCub 1.1 Wiring","text":"<p>The system architecture of ergoCub1.1 is depicted in the following image:</p>"},{"location":"ergoCub1_wiring/ergoCub1_1/#logic-and-harness-ergocub-11-full-robot","title":"Logic and Harness ergoCub 1.1 Full Robot","text":"<ul> <li>ergoCub1.1 S/N:001 Logic_1.1.0</li> <li>ergoCub1.1 S/N:001 Harness_1.1.0</li> </ul>"},{"location":"ergoCub1_wiring/ergoCub1_1/#motor-board-placement-ergocub-11","title":"Motor &amp; Board Placement ergoCub 1.1","text":"<ul> <li>ergoCub1.1 S/N:001 rev1.1.0</li> </ul>"},{"location":"ergoCub1_wiring/ergoCub1_2/","title":"ergoCub 1.2","text":""},{"location":"ergoCub1_wiring/ergoCub1_2/#ergocub-12-wiring","title":"ergoCub 1.2 Wiring","text":"<p>The system architecture of ergoCub1.2 is depicted in the following image:</p>"},{"location":"ergoCub1_wiring/ergoCub1_2/#logic-and-harness-ergocub-12-full-robot","title":"Logic and Harness ergoCub 1.2 Full Robot","text":"<ul> <li>ergoCub1.2_Logic_17929_1.2.0</li> <li>ergoCub1.2_Harness_17935_1.2.0</li> </ul>"},{"location":"ergoCub1_wiring/ergoCub1_2/#motor-board-placement-ergocub-12","title":"Motor &amp; Board Placement ergoCub 1.2","text":"<ul> <li>ergoCub1.2 S/N:002 rev1.2.0</li> </ul>"},{"location":"ergoCub1_wiring/ergoCub1_3/","title":"ergoCub 1.3","text":""},{"location":"ergoCub1_wiring/ergoCub1_3/#ergocub-13-wiring","title":"ergoCub 1.3 Wiring","text":"<p>The system architecture of ergoCub1.3 is depicted in the following image:</p>"},{"location":"ergoCub1_wiring/ergoCub1_3/#logic-and-harness-ergocub-13-full-robot","title":"Logic and Harness ergoCub 1.3 Full Robot","text":"<ul> <li>ergoCub1.3_Logic_18252_1.3.0</li> <li>ergoCub1.3_Harness_18253_1.3.0</li> </ul>"},{"location":"ergoCub1_wiring/ergoCub1_3/#motor-board-placement-ergocub-13","title":"Motor &amp; Board Placement ergoCub 1.3","text":"<ul> <li>ergoCub1.3 S/N:002 rev1.3.0</li> </ul>"},{"location":"ergoCub_battery_pack/","title":"Summary","text":""},{"location":"ergoCub_battery_pack/#ergocub-battery-pack","title":"ErgoCub Battery Pack","text":"<p>We collect here information regarding the new <code>Battery Pack</code> for <code>ergocub S/N002</code></p> <ul> <li>Introduction</li> <li>General description</li> <li>Storing the battery pack</li> <li>Charging the battery pack</li> <li>Using the battery pack on the robot<ul> <li>Robot switched off, without external power supply</li> <li>Robot switched on, with external power supply</li> <li>Robot switched on, powered by battery pack</li> </ul> </li> </ul>"},{"location":"ergoCub_battery_pack/ergoCub_battery_pack/","title":"ErgoCub Battery Pack","text":""},{"location":"ergoCub_battery_pack/ergoCub_battery_pack/#introduction","title":"Introduction","text":"<p>This documentation page describes the new ergoCub <code>Battery Pack</code>. Thereby, you will find here information on its features and how to use it.</p> <p>The adopted solution is designed to power and supply the <code>ergocub</code>. This project is also strictly related to the use of the <code>BMS</code> specifically designed for this <code>Battery Pack</code>. From the user perspective, consider the <code>Battery Pack</code> and the <code>BMS</code> board as a single device designed for <code>ergocub</code>.</p>"},{"location":"ergoCub_battery_pack/ergoCub_battery_pack/#general-description","title":"General description","text":"<ul> <li> <p>The main characteristics of the battery pack are detailed in this table:</p> Description weight 1.5 Kg certifications UN 38.3 nominal voltage 37 VDC capacity 8000 mAh temperature range of use -20\u00b0C min/60\u00b0C Max cell architecture 10S 2P cell technology Li-Ion 3,7V NCM, 21700 </li> </ul> <p>The <code>Battery Pack</code> is designed for use with the <code>BMS_IIT1A-11S-50APK_PCA</code>. Therefore, do not separate the board from the <code>Battery Pack</code> as it guarantees that the <code>Battery Pack</code> operates safely and under control during charging and discharging. Controls are implemented for:</p> <ul> <li>Overvoltage</li> <li>Undervoltage</li> <li>Overcurrent</li> <li>Under-temperature</li> <li>Overtemperature</li> <li>Cell voltage unbalance</li> <li>General BMS operation alarms</li> </ul> <p>Check whether these errors are present in the screen located on the robot's chest. The normal operation of the <code>Battery Pack</code> is that, in the absence of the above alarms, it is ready to supply current with the power contacts closed. </p> <p>Warning</p> <p>Pay absolute attention to the power contacts: the <code>Battery Pack</code> exposes the contacts so that they can be inserted into the robot.  Any violation or improper use can cause serious injury to those involved and severely damage the hardware.</p> <p>If there are alarms, contact the persons in charge.</p>"},{"location":"ergoCub_battery_pack/ergoCub_battery_pack/#storing-the-battery-pack","title":"Storing the battery pack","text":"<p>The <code>Battery Pack</code> must always be stored in the battery container when not in use for safety reasons. Do not leave the battery pack elsewhere or on the robot.</p> <p>Stowe it in robot arena in the cabinet shown in this image:</p> <p>Note</p> <p>The <code>Battery pack</code>, with no connections, is to be considered as switched off (sleep mode) but ready to supply power when plugged into the robot. </p>"},{"location":"ergoCub_battery_pack/ergoCub_battery_pack/#charging-the-battery-pack","title":"Charging the battery pack","text":"<p>The <code>Battery pack</code> must be charged with the appropriate charger. Follow the instructions given here for the charging procedure.</p> <p>To proceed correctly, follow these steps:</p> <ul> <li>Insert the <code>Battery pack</code> into the appropriate slot in the charging station.</li> <li>Now switch on the charger, so that if necessary the charging phase will start directly.</li> </ul> <p>After that, the charger will perform a few tests and start charging. You can figure out that the system is working properly when the \u2018charging\u2019 status LED is lit. When charging is complete, the charger will finish charging. This step corresponds to the \u2018full\u2019 status.</p> <p>If this step or anything else did not work properly, you will get the \u2018error\u2019 LED. In this case make sure that the <code>Battery pack</code> and charger  are working. If the error persists, report it to the responsible person and put the <code>Battery pack</code> back in the cabinet.</p> <p>If the charging process is successful, you can use the battery pack on the robot. Follow the next section for this part.</p>"},{"location":"ergoCub_battery_pack/ergoCub_battery_pack/#using-the-battery-pack-on-the-robot","title":"Using the battery pack on the robot","text":"<p>the <code>Battery pack</code> is designed for agile use on the robot. The idea was to create a <code>plug-and-play</code> system. In the correct condition of use, the battery will be inserted on the back of the <code>ergocub</code> in the dedicated compartment and, similar to using an external power supply, the robot is ready to use. Conditions other than this scenario may refer to failures or special situations. Read this chapter to learn more.</p>"},{"location":"ergoCub_battery_pack/ergoCub_battery_pack/#robot-switched-off-without-external-power-supply","title":"Robot switched off, without external power supply","text":"<p>Consider this scenario when the robot is switched off and there are no power cables connected to the robot. In this scenario, you only want to switch the robot on by inserting the <code>Battery pack</code>.</p> <p>The robot is switched off, if you insert the <code>Battery pack</code> into the slot shown in the figure, you will automatically power the robot. Consider this case as equivalent to the situation where you do not have the <code>Battery pack</code> and want to use the robot with the external power cable.  At this point the <code>Battery pack</code> verifies (via the integrated <code>BMS</code>) that the use case is compliant. If this step did not detect any anomalies, switch the robot on using the buttons shown in the figure.</p> <p>If everything worked properly, the robot will be ready to use and you can see the battery percentage on the front display. Cases other than this could result in battery failure or anomaly. Disconnect the <code>Battery pack</code> from the robot and check that it is charged. Then take the <code>Battery pack</code> to the persons in charge to check that everything is OK.</p>"},{"location":"ergoCub_battery_pack/ergoCub_battery_pack/#robot-switched-on-with-external-power-supply","title":"Robot switched on, with external power supply","text":"<p>In this situation you have the robot switched on and working properly. The power source is external via the blue power cable. If you wish to switch to battery power you have two options: 1. Switch the robot off, disconnect the Blue cable. In this case, you are in the situation described above. 2. You want to make a \u2018<code>hot swap</code>\u2019 without interrupting the robot's functionality. In this case, follow the steps listed here:</p> <p>Note</p> <p>Pay attention to these steps, you might suddenly switch off the robot and damage it.</p> <ul> <li>Insert the <code>Battery pack</code> with the robot powered through the external power cable.</li> <li>Check from the display on the front that the <code>Battery pack</code> is charged and free of allarms.</li> <li>Switch off the external power supply and disconnect the blue external power cable from the robot.</li> </ul> <p>If these steps are successful, you will have achieved a hot swap without service interruption.</p> <p>If this step did not work, make sure the <code>Battery pack</code> is charged and error-free. Check with the person in charge that no faults are present.</p>"},{"location":"ergoCub_battery_pack/ergoCub_battery_pack/#robot-switched-on-powered-by-battery-pack","title":"Robot switched on, powered by battery pack","text":"<p>In this situation, the robot is correctly functioning and powered by the <code>Battery pack</code>. If you wish to change power supply you still have two possible scenarios: 1. Switch the robot off, disconnect the <code>Battery pack</code>. in this case you are in the first situation described if you want to restart with a new charged <code>Battery pack</code>. If, on the other hand, you want to power the robot via the external power supply, connect the Blue cable, switch on the power supply, and switch the robot on again by pressing P and then M buttons. 2. If you do not want to interrupt the robot's functionality, you can perform a \u2018<code>hot swap</code>\u2019. You again have two options, continue with an external power supply or use a new <code>Battery pack</code>. Follow the steps for this procedure:</p> <p>Note</p> <p>Pay attention to these steps, you might suddenly switch off the robot and damage it.</p> <ul> <li>The robot is functional and receives power from the <code>Battery pack</code> to be replaced. Prepare the external power supply, connect the blue connector to the robot's power port.</li> <li>Activate the power supply so that it can supply power to the robot.</li> <li>Disconnect/remove the <code>Battery pack</code>, the robot will automatically remain switched on via the external power supply.</li> </ul> <p>If you now want to switch back to a power supply via a new battery pack, follow the steps described in the previous chapter.</p> <p>If this steps doesn't work, make sure the <code>Battery pack</code> is charged and error-free. Check with the person in charge that no faults are present.</p>"},{"location":"ergocub_operating_systems/","title":"Introduction","text":"<p>This manual describes how to install and customize the linux operating systems required to run on machines in the ergoCub enviroment. </p> <p>The ergoCub robot relies on two machines: <code>ergocub-head</code>, a <code>NVIDIA Jetson Xavier AGX</code> used to control the realsense camera, the lidar and the OLED display, and <code>ergocub-torso</code>, which is a <code>COM express type 10</code> that controls the motors.</p> <p>These machines are nodes of the ergoCub network.</p>"},{"location":"ergocub_operating_systems/#os-configurations","title":"OS configurations","text":"<p>The following guides will help you properly configure the OS for the specific board.</p> <ul> <li>ergocub-head</li> <li>ergocub-torso</li> </ul> <p>Alternatively, you can download the OS pre-built images.</p>"},{"location":"ergocub_operating_systems/network/","title":"ergoCub network","text":"<p>The network on ergocub can be divided in two parts:</p> <ul> <li>internal network (10.0.1.0/24): it connects <code>ergocub-torso</code> to all the motor controller boards on the robot, it is a segregated network (there is no connection from the nodes on its subnet and the ouside world) and it is used to send motor commands from ergocub-torso to motor control boards;</li> <li>extenal network (10.0.2.0/24): it is managed by the ergocub-server and it connects all the ergoCub machines together, handling the internet connection too. This connection can be wired or wireless;</li> <li>backup network (10.0.0.0/24): this is a backup/troubleshoot network for connecting directly to the robot in case of not reaching the external network.</li> </ul>"},{"location":"ergocub_operating_systems/network/#ergocub-network-interfaces","title":"ergoCub network interfaces","text":"<ul> <li> <p><code>ergocub-torso</code></p> <p>On ergocub-torso, one of the two ethernet interfaces is connected to the internal network. The other one, instead, is directly connected to ergocub-head via backup network.</p> </li> <li> <p><code>ergocub-head</code></p> <p>On ergocub-head, the ethernet interfaces are bridged together on the backup network.</p> </li> </ul> <p>Both head and torso are connected to the external network via WiFi.</p>"},{"location":"ergocub_operating_systems/network/#ip-addresses-and-other-network-configurations","title":"IP addresses and other network configurations","text":"<p>Below you can find the default network parameters of the ergoCub networks.</p>"},{"location":"ergocub_operating_systems/network/#internal-network-configurations","title":"Internal network configurations","text":"<p>This configuration depends deeply on the motor control board firmware and thus it can't be changed.</p> <ul> <li>IP address : 10.0.1.104 - STATIC</li> <li>Netmask : 255.255.255.0</li> </ul> <p>Since this is a segregated network, there is no default gateway.</p>"},{"location":"ergocub_operating_systems/network/#external-network-configurations","title":"External network configurations","text":"<p>Usually, it is a static configuration, but it works also in DHCP mode. This configuration can be changed but it is not recommended.</p> <p>For <code>ergocub-torso</code>:</p> <ul> <li>WiFi IP address : 10.0.2.2</li> <li>Netmask : 255.255.255.0</li> <li>Default Gateway : 10.0.2.1</li> <li>DNS server : 10.0.2.1</li> </ul> <p>For <code>ergocub-head</code>:</p> <ul> <li>WiFi IP address : 10.0.2.3</li> <li>Netmask : 255.255.255.0</li> <li>Default Gateway : 10.0.2.1</li> <li>DNS server : 10.0.2.1</li> </ul>"},{"location":"ergocub_operating_systems/network/#backup-network-configurations","title":"Backup network configurations","text":"<p>For <code>ergocub-torso</code>:</p> <ul> <li>IP address : 10.0.0.2</li> <li>Netmask : 255.255.255.0</li> </ul> <p>For <code>ergocub-head</code>:</p> <ul> <li>IP address : 10.0.0.3</li> <li>Netmask : 255.255.255.0</li> </ul>"},{"location":"ergocub_operating_systems/ergocub_torso/install_from_scratch/","title":"Install from scratch","text":"<p><code>ergocub-torso</code> is based on Ubuntu server 22.04, we will install it from the default installer and then we manually customize it.</p> <p>To install the OS from scratch, please follow this guide, being careful to install the Ubuntu 22.04 LTS Server.</p> <p>Note</p> <p>Remember to substitute the references to <code>icub</code> and  <code>icub-head</code> respectively with <code>ergocub</code> and <code>ergocub-torso</code>.</p> <p>To synchronize the system date and time, edit the file <code>/etc/default/ntpdate</code> by changing the following lines:</p> <pre><code>NTPDATE_USE_NTP_CONF=\"no\"\nNTPSERVERS=\"10.0.2.1 ntp.ubuntu.com\"\n</code></pre>"},{"location":"ergocub_versions/","title":"The ergoCub Versions Table","text":""},{"location":"ergocub_versions/#currently-known-ergocub-versions","title":"Currently known ergoCub versions","text":"ergoCub version Features Notes v1.0 This is the first version of the robot designed for the ergoCub project v1.1 v1.0 with the hands mk5.1 v1.2 v1.1 with the NVIDIA Orin NX in the head v1.3 v1.2 with the certified battery pack v1.3.1 v1.3 with the neck mk3 v1.4 v1.3.1 with the medium joint in the torso pitch Not yet produced"},{"location":"ft_sensors/","title":"Summary","text":""},{"location":"ft_sensors/#ft-sensors","title":"F/T Sensors","text":""},{"location":"ft_sensors/#overview-of-ft-sensors","title":"Overview of F/T sensors","text":""},{"location":"ft_sensors/#the-onboard-imu-device","title":"The onboard IMU device","text":""},{"location":"ft_sensors/#study-on-change-of-frame-for-accelerometer-measurements","title":"Study on change of frame for accelerometer measurements","text":""},{"location":"ft_sensors/#simulink-models-to-interface-ft-sensors","title":"Simulink models to interface FT sensors","text":""},{"location":"ft_sensors/#can-protocol-to-communicate-with-the-ft-sensor","title":"CAN protocol to communicate with the FT sensor","text":""},{"location":"ft_sensors/change_of_frame_accelerometer/","title":"Study on change of frame for accelerometer measurements","text":""},{"location":"ft_sensors/change_of_frame_accelerometer/#author","title":"Author","text":"@traversaro <p>Unless noted, notation follows what is described in \"A Multibody Dynamics Notation \u2013 Revision_2\" \ud83d\udcda</p>"},{"location":"ft_sensors/change_of_frame_accelerometer/#problem-description","title":"Problem description","text":"<p>Assume that we have two accelerometers, that are attached to the same rigid body, but placed in two different frames (\\(S\\) and \\(B\\)).  We indicate with:</p> <ul> <li>\\(A\\) the (absolute) inertial frame that we assume to be rigidly attached to the ground (disregarding the rotation of the earth on itself and any other cosmic rotational motion).</li> <li>\\({}^A o_B \\in \\mathbb{R}^3\\) the 3D vector that represent the position of the origin of frame \\(B\\) w.r.t. to frame \\(A\\), such that if \\(S\\) is another frame we have:</li> </ul> \\[ \\begin{equation} {}^A o_S = {}^A o_B + {}^A R_B {}^B o_S. \\tag{1} \\end{equation} \\] <ul> <li>\\({}^A g \\in \\mathbb{R}^3\\) the gravity vector expressed in the inertial frame. </li> <li>The angular velocity \\({}^B \\omega_{A,B} \\in \\mathbb{R}^3\\) is defined as:</li> </ul> \\[ \\begin{equation} {}^B \\omega_{A,B} \\times = {}^B R_A {}^A \\dot{R}_B \\end{equation} \\] <p>from which we can derive that:</p> \\[ \\begin{equation} {}^A \\dot{R}_B = {}^A R_B {}^B \\omega_{A,B} \\times \\end{equation} \\] <p>and </p> \\[ \\begin{align} {}^A \\ddot{R}_ B &amp;= {}^A \\dot{R}_ B {}^B \\omega_{A,B} \\times + {}^A R_B {}^B \\dot{\\omega}_{A,B} \\times = \\\\ &amp;= {}^A R_B {}^B \\omega_{A,B} \\times {}^B \\omega_{A,B} \\times + {}^A R_B {}^B \\dot{\\omega}_{A,B} \\times. \\tag{2} \\end{align} \\] <p>As \\(B\\) and \\(S\\) are rigidly attached to the same rigid body, we have that \\({}^B o_S\\) is constant and so:</p> \\[ \\begin{equation} {}^B \\dot{o}_S = 0. \\tag{3} \\end{equation} \\] <p>The measure of each sensor is given by:</p> \\[ \\begin{equation} m_S = {}^S R_A ( {}^A \\ddot{o}_S - {}^A g) \\tag{4} \\end{equation} \\] \\[ \\begin{equation} m_B = {}^B R_A ( {}^A \\ddot{o}_B - {}^A g) \\end{equation} \\] <p>To express \\(m_S\\) in function of \\(m_B\\), we can first take \\((1)\\) and take first a derivative:</p> \\[ \\begin{equation} {}^A \\dot{o}_S = {}^A \\dot{o}_B + {}^A \\dot{R}_B {}^B o_S + {}^A R_B {}^B \\dot{o}_S \\end{equation} \\] <p>and then we derivative again:</p> \\[ \\begin{equation} {}^A \\ddot{o}_S = {}^A \\ddot{o}_B + {}^A \\ddot{R}_B {}^B o_S + 2 {}^A \\dot{R}_B {}^B \\dot{o}_S  + {}^A R_B {}^B \\ddot{o}_S \\end{equation} \\] <p>as we know that the \\(B\\) and \\(C\\) are rigidly attached to the same body (see \\((3)\\)), we have:</p> \\[ \\begin{equation} {}^A \\ddot{o}_S = {}^A \\ddot{o}_B + {}^A \\ddot{R}_B {}^B o_S. \\tag{5} \\end{equation} \\] <p>By substituting \\((5)\\) in \\((4)\\) we have:</p> \\[ \\begin{align} m_S &amp;= {}^S R_A ( {}^A \\ddot{o}_B + {}^A \\ddot{R}_B {}^B o_S  - {}^A g) = \\\\ &amp;= {}^S R_A ( {}^A \\ddot{o}_B - {}^A g)  + {}^S R_A ({}^A \\ddot{R}_B {}^B o_S  ) = \\\\ &amp;= {}^S R_B m_B + {}^S R_A ({}^A \\ddot{R}_B {}^B o_S  ) \\end{align} \\] <p>By using \\((2)\\), we have then:</p> \\[ \\begin{equation} m_S = {}^S R_ B ( m_ B + {}^B \\omega_{A,B} \\times {}^B \\omega_{A,B} \\times {}^B o_S  + {}^B \\dot{\\omega}_{A,B} \\times  {}^B o_S ) \\end{equation}. \\]"},{"location":"ft_sensors/ft_onboard_imu/","title":"F/T Sensors on-board IMU","text":"<p>The F/T sensors have an onboard IMU unit mounted on the STRAIN2 (the signal conditioning electronic board).  The data from the IMU can be streamed out to the CAN bus with dedicated messages to complement the information from F/T sensor.</p> <p>The IMU device is the BNO055 9-axis. The basic configuration of the IMU allows the user to directly read the raw data.</p>"},{"location":"ft_sensors/ft_onboard_imu/#measurement-frame-specifications","title":"Measurement frame specifications","text":"<p>The F/T sensor reference frame and the IMU default reference frame are rigidly connected. The two frames are rotated with respect to each other.</p> <p>The F/T reference frame can be determined by visual inspection (see Figure 1):</p> <ul> <li>the connection cable exits the sensor in the \\(-x\\) direction.</li> <li>the thin sensor cover (blue) indicates the \\(+z\\) direction.</li> <li>the \\(y\\) axis is determined according to a right-handed convention.</li> </ul> Figure 1: the FT reference frame as can be defined while using the device <p>This reference frame is the one used to determine and transmit the forces and torques. </p> <p>The IMU reference frame is defined w.r.t its location on the Strain2 PCB (see Figure 2). Its orientation can be also defined in terms of the F/T frame:</p> IMU F/T \\(x_{IMU}\\) \\(-y_{FT}\\) \\(y_{IMU}\\) \\(-x_{FT}\\) \\(z_{IMU}\\) \\(-z_{FT}\\) <p>Finally, the IMU origin in the F/T frame coordinates are \\(\\left( 7.5, \\; 8.6 \\right)\\) \\(\\text{mm}\\).</p> Figure 2. The Strain2 simplified board layout with highlighted the reference frames, magenta for the IMU and green for the F/T sensor; in magenta it is also highlighted the footprint of the IMU component <p>By configuring the firmware options, the two reference frames can be made coincident.</p> <p>Nonetheless, to express accelerations in a different reference frame, one needs to account for non-inertial terms as explained in the following section.</p>"},{"location":"ft_sensors/ft_onboard_imu/#acceleration-transformation-with-non-inertial-terms","title":"Acceleration transformation with non-inertial terms","text":"<p>We have two reference frames rotated w.r.t. each other but rigidly connected, i.e. F/T and IMU reference frames. We measure accelerations with the IMU in its proper reference frame B, and we seek to transform the accelerations in the FT reference frame S.</p> <p>Given the two relevant quantities:</p> <ul> <li>origin displacement of FT reference frame in IMU reference frame \\({}^B o_S = (8.6, 7.5, 0)\\) \\(\\text{mm}\\);</li> <li>rotation matrix between the two reference frames \\({}^SR_B\\); </li> </ul> <p>we can identify the transformation law as:</p> \\[ m_S = {}^S R_ B ( m_ B + {}^B \\omega_{A,B} \\times {}^B \\omega_{A,B} \\times {}^B o_S  + {}^B \\dot{\\omega}_{A,B} \\times  {}^B o_S ), \\] <p>where the last two terms on the right are the non-inertial terms that appear in the reference frame transformation. The suffix A means that the quantity is calculated w.r.t. the inertial absolute reference frame. </p> <p>For a more thorough and complete analysis, refer to this study \ud83d\udcda</p>"},{"location":"ft_sensors/ft_onboard_imu/#measurement-of-non-inertial-terms-in-realistic-scenarios","title":"Measurement of non-inertial terms in realistic scenarios","text":"<p>To assess the required level of precision in transforming the acceleration between the two dragged reference frames, we performed a few tests in a real world case, i.e.  the iCub performing the Yoga Demo. In this demo the left foot is held on the ground and the robot balances over it moving the right leg.  We logged both gyroscope and accelerometer data from all the F/T sensors and evaluated the non-inertial terms from the formula above.</p> <p>As a test, we compared the transformed accelerations with and without the non-inertial components calculated according to equation above and the results are reported in the plotv below.</p> <p>As a first approximation, in our use case we can neglect the effect of the drag non-inertial forces in the remapping of the accelerometer data.  However, we choose an algorhithm approach to keep this possibility open in a next step.</p> <p>To further pinpoint our assumption, we have evaluated the gravity vector as streamed from the BNO055 as \\(g = 9.778\\pm 0.021 m/s^2 \\; (95\\% \\; \\text{C.L.})\\) which suffers also from systematic error of approx. \\(0.4 m/s^2\\), which is comparable to the error introduced by neglecting the non-inertial terms.</p>"},{"location":"ft_sensors/ft_onboard_imu/#outlook","title":"Outlook","text":"<p>As a future step, we may consider implementing the full transformation that includes the non-intertial terms. </p>"},{"location":"ft_sensors/ft_sensors/","title":"F/T Sensors","text":"<p>The F/T sensor (6-dof) has also been specially designed to fit the iCub. However, the size of the sensor has been made compatible with an existing commercial product. On the other hand, the signal conditioning electronics has been made to fit the sensor itself, consequently reducing the space required. The F/T sensor is based on a classical Wheatstone bridge design employing 12 semiconductor strain gauges arranged in a 6 half-bridges configuration.</p>"},{"location":"ft_sensors/ft_sensors/#mechanical-specifications","title":"Mechanical specifications","text":""},{"location":"ft_sensors/ft_sensors/#physical-specifications","title":"Physical specifications","text":"<p>The physical specifications of the sensor are reported in Table 1:</p> Weight 0.122[kg] Diameter 45[mm] Height 18.4[mm] Table 1: Physical specifications of the sensor"},{"location":"ft_sensors/ft_sensors/#measurement-frame-specifications","title":"Measurement frame specifications","text":"The F/T sensor reference frame <p>Please notice that the key elements to localize the reference frame on the sensor are two: 1. the hole where the CAN exits the sensor; 2. the thick VS the thin sensor cover.</p> <p>The sensor is calibrated to measure the Force/Torque applied by the upper (blue) part of the sensor on the lower (red) part and express it on the F/T sensor reference frame.</p>"},{"location":"ft_sensors/ft_sensors/#calibration-specifications","title":"Calibration specifications","text":"<p>The sensors are calibrated in order to obtain high resolution in typical operating regions. Typical values of the range and resolution for a sensor after the calibration procedure are reported in Table 2. The resolution is typical for most applications and can be improved with filtering. Resolutions quoted are the effective resolution after dropping three counts of noise.</p> Fx, Fy [N] Fz [N] Tx, Ty [Nm] Tz [Nm] Range 1500 2000 35 25 Resolution 0.25 0.25 0.005 0.004 Table 2: typical values after sensor calibration"},{"location":"ft_sensors/ft_sensors/#creo-cad-model","title":"Creo CAD model","text":"<p>The CAD model of FTSens is available in the hardware repository of the <code>icub-tech-iit</code> organization on <code>GitHub</code>.</p> <p>In particular, the FT sensor assembly name is <code>ic_008_a_001.asm.1</code>.</p>"},{"location":"ft_sensors/ft_sensors/#additional-info","title":"Additional info","text":"<p>For more info on how to flash the firmware and the calibration matrix on a FT sensor, check the documentation page on Firmware.</p>"},{"location":"ft_sensors/ft_sensors/#electronics","title":"Electronics","text":"<p>There are three versions of the electronic board of the iCub's FT sensor: STRAIN (also known as STRAIN1), STRAIN1.5 or STRAIN2. All these electronic boards sample the analog strain gauges voltages, and expose the measurements over a CAN interface.</p> <p>Low-level documentation and materials about the <code>STRAIN2</code> board are available here.</p> <p>Firmware source code:</p> <ul> <li>STRAIN</li> <li>STRAIN2</li> </ul>"},{"location":"ft_sensors/ft_sensors/#ft45-and-ft58-assembly-variants-mechanics-electronics","title":"FT45 and FT58 Assembly Variants (Mechanics + Electronics)","text":"IITCODE ALIAS REV Description Note 12487 12487 (da cambiare) - FT45 M4 cod.12191 - IC_008_A_001 +STRAIN2 cod.11996.B + Wiring materials cod. 12478.0.0 Strain-gauge code missing 12491 FT45_M1_E2 - FT45 M1 cod. ? - STRAIN2 cod.11996.B + Wiring materials cod.12478.0.0 Mech. assembly (with strain-gauge code) missing 12031 FT45_M1_E1.5 - iCub, assembly - Force/Torque sensor (5x gain), with mechanical parts, strain-gauge, strain board and cabling 12621 FT58_M2_E2 - FT58 M2 cod.12176.A1 - IC_005_A_001 + STRAIN2 cod.11996.B + Wiring materials cod.12478.0.0"},{"location":"ft_sensors/ft_sensors/#ft45-mechanical-variants","title":"FT45 Mechanical variants","text":"FTSENSOR45A IC_001_A_001_ftsensor45 IC_007_A_001 IC_008_A_001 informal name FT45 FT45 v.2 (a.ka. Diego's sensor) - - variant id FT45_M1 FT45_M2 FT45_M3 FT45_M4 first mechanical structure YES NO YES NO second mechanical structure * NO YES NO YES central through hole ** NO NO YES YES obsolete YES YES YES NO <p>* no countersunk screw, with pin assembly</p> <p>** requires STRAIN2 board</p>"},{"location":"ft_sensors/ft_sensors/#ft58-variants","title":"FT58 variants","text":"ICUB3_005_A_001_ftsensor58 IC_005_A_001 informal name FT58_M1 FT58_M2 variant id FT58_M1 FT58_M2 central through hole ** NO YES <p>** requires STRAIN2 board</p>"},{"location":"ft_sensors/ft_sensors/#ft58-assembly","title":"FT58 assembly","text":"<p>The FT58 sensor is assembled as described hereafter.</p> <p>The assembly of the sensor is a 6 step process:</p> <ol> <li>the top part, the sensor part and the bottom part are screwed together</li> <li>the pin holes are enalrged with the proper bore tool</li> <li>the sensor part is gaged</li> <li>the sensor is assembled and wired with the electronic board</li> <li>the three sensor parts are screwed together: the sensor is closed</li> <li>if needed pins are added with the proper strain relieving tool</li> </ol> <p>For further details on the assembly refer to the component drawing in the repository folder. The drawing code is depends on the sensor to be assebled (refer to the table in the above section for the code).</p> <p>The top interface is fixed with 6 M4x10 UNI 5931 counterbore hex. screws (cod. V4-10--_-_U5931_GC). The recommended tightening torque is 2.8Nm.</p> <p>The bottom interface is fixed with 6 M4x10 UNI 5931 counterbore hex. screws (cod. V4-10--_-_U5931_GC). The recommended tightening torque is 2.8Nm.</p>"},{"location":"ft_sensors/ft_sensors/#ft58-assembly-on-icub-3","title":"FT58 assembly on iCub 3","text":"<p>The FT58 sensor is assembled on iCub 3 as represented in th following pictures. The top interface is fixed with 6 M4x12 UNI 5933 countersunk hex. screws (cod. V4-12--_-_U5933_C). The recommended tightening torque is 2Nm.</p> <p>The bottom interface is fixed with 6 M4x12 UNI 5933 countersunk hex. screws (cod. V4-12--_-_U5933_C). The recommended tightening torque is 2Nm.</p>"},{"location":"ft_sensors/ft_sensors/#ft-sensor-electronics-variants","title":"FT Sensor Electronics Variants","text":"<p>There are three cards for reading six-axis F/T Sensors:</p> Name IIT Code and .Revision Description Status Compatible with Mechanical variant\u00a0 STRAIN1\u00a0 832.B STRAIN_01F, IIT - Electronic board, 6-axial strain gauges amplification card with enhanced noise capability end of life FT45_M1,FT45_M2,FT58_M1 STRAIN1.5 832.F STRAIN_01F, IIT - Electronic board, 6-axial strain gauges amplification card with enhanced noise capability, 5X gain end of life\u00a0 FT45_M1,FT45_M2,FT58_M1 STRAIN2 11996.B STRAIN2, IIT - Electronic board, 6 channels strain gauges variable gain interface board with CAN/UART, Temperature sensor, IMU, STM32L4 in production <p>FT45_M1*,FT45_M2*,FT58_M1*</p> <p>FT45_M3**,FT45_M4**,FT58_M2**</p> <p>* if breaking the legs</p> <p>** if removing the central ring </p>"},{"location":"ft_sensors/ft_sensors/#cable-connections","title":"Cable connections","text":""},{"location":"ft_sensors/ft_sensors/#strain","title":"STRAIN","text":""},{"location":"ft_sensors/ft_sensors/#strain2","title":"STRAIN2","text":""},{"location":"ft_sensors/ft_sensors/#summarized-usable-codes","title":"Summarized usable codes","text":"short description Asm. cod. Wingst Rev. Dwg. Micron Istrumnents code status FTSensor 45 - Strain 1 (mech 1) FTSENSOR45A 3407 A2 150923 only maintenance FTSensor 45 - Strain 1 (mech 2) IC_001_A_001_ftsensor45 not present 0 150923 OBSOLETE FTSensor 45 - Strain 2 (mech 3) IC_007_A_001 12183 A2 151245 OBSOLETE FTSensor 45 - Strain 2 (mech 4) IC_008_A_001 12191 A1 151245 ACTIVE FTSensor 58 - Strain 1\u00a0 ICUB3_005_A_001_ftsensor58 10308 A1 151351 OBSOLETE FTSensor 58 - Strain 2\u00a0 IC_005_A_001 12176 A1 151351 ACTIVE"},{"location":"ft_sensors/ft_sensors/#more-information","title":"More information","text":"<ul> <li>F/T sensors are mounted by Micron Instruments</li> </ul>"},{"location":"hands/","title":"Summary","text":""},{"location":"hands/#hands","title":"Hands","text":""},{"location":"hands/#hands-mk5","title":"Hands Mk5","text":"<ul> <li>Overview of the hands Mk5</li> <li>Coupling laws of hands Mk5</li> <li>Fingertip skin and MMA board</li> </ul>"},{"location":"hands/fingertip_and_mma_mk5/","title":"Fingertip skin and MMA board","text":""},{"location":"hands/fingertip_and_mma_mk5/#hand-sensors","title":"Hand Sensors","text":""},{"location":"hands/fingertip_and_mma_mk5/#finger-sensors","title":"Finger sensors","text":"<p>Tactile sensors are deployed on the fingertip.  The fingertip comprises a 3DMID piece with the patterned taxels and a conventional PCB (the FT3D) reading the capacitances and hosting an IMU. </p> <p>The taxel mapping is represented in Fig. 1.</p> <p> </p> <p> <sub>Fig.1 \u2013 Taxel mapping.</sub> </p>"},{"location":"hands/fingertip_and_mma_mk5/#ft3d-board-configuration-rev-2","title":"FT3D board configuration - rev. 2","text":"<p>The AD7147 hosted on the FT3D has configurable I2C address  to allow for multiple devices. </p> <p>The congfiguration is made through the jumpers AD0 and AD1 reported in Fig. 2 by simply soldering  the desired connection on the dedicated jumper. Also R1 is to be removed in this revision.  Depending on the connection (see below) the IMU also needs to be removed.</p> <p> </p> <p> <sub>Fig.2 \u2013 Address configuration: the board represented has Address bits (AD0, AD1) = (0, 0).</sub> </p> <p>Since the IMU is not equipped with similar configurable address pins, we need to remove all the IMUs from unwanted boards before the installation. This will be fixed in rev. 3 of the FT3D.</p> <p>The complete configuration set is as follow:</p>"},{"location":"hands/fingertip_and_mma_mk5/#ergocub-sn000","title":"ergoCub SN000","text":"<p>Note</p> <p>In ergoCub SN000 currently the fingertips are not wired to the MMA board.</p> finger AD0 AD1 IMU I2C dataline IIT code thumb 0 0 LSM6DSLTR 0 17544 index 0 0 LSM6DSLTR 1 17544 middle 1 0 no 1 17545 ring 0 1 no 1 17546 pink 1 0 no 0 17545"},{"location":"hands/fingertip_and_mma_mk5/#ergocub-equipped-with-mma-rev-b-from-ergocub-sn001","title":"ergoCub equipped with MMA rev. B (from ergoCub SN001)","text":"<p>These robots are equipped with the MMA rev. B IITCODE 16872.B</p> finger AD0 AD1 IMU I2C dataline IIT code thumb 0 0 IIM-42652 0 15467.B index 0 0 IIM-42652 1 15467.B middle 0 0 IIM-42652 2 15467.B ring 0 0 IIM-42652 3 15467.B pink 0 0 IIM-42652 4 15467.B <p>No customization of the boards is needed. They are purchased with the correct jumper configuration.</p> <p>I2C dataline is decided at the MMA level through the connector assignment.  The MTB to be mounted should be equipped with a dedicated firmware to enable the use of PIN 7  in the connector as an additional I2C line (SDA_4).</p>"},{"location":"hands/fingertip_and_mma_mk5/#mounting-the-3dmid","title":"Mounting the 3DMID","text":""},{"location":"hands/fingertip_and_mma_mk5/#needed-material-for-one-hand","title":"Needed material (for one hand):","text":"IITCODE description quantity 17628 support for soldering 5 17627 base for soldering support 1 16619 3DMID shells 5 15467 FT3D board 5 17377 rubber fingertip 5 1.6x6mm screws 5 1.6x8mm screws 5 <p>Plus:</p> <ol> <li>low temperature solder (LTS): used Indium solder wire SMDIN52SN48<sup>1</sup></li> <li>dedicated tips for the soldering iron</li> <li>dedicated flux for LTS</li> <li>screwdriver</li> </ol> <p> </p> <p> <sub>Fig.3 \u2013 Some material needed to mount the fingertips.</sub> </p>"},{"location":"hands/fingertip_and_mma_mk5/#procedure","title":"Procedure","text":"<p> <sub>Fig.4 - fixing the 3DMID to the soldering support.</sub> </p> <ul> <li>Fix the 3DMID to the soldering support with 1.6x6mm screw.</li> <li>Plug the soldering support on the base.</li> </ul> <p> </p> <p> <sub>Fig.5 \u2013 soldering support plugged into the base.</sub> </p> <ul> <li>Set the soldering iron to 250 C, apply flux and pre-tin the pads on the 3DMID.</li> <li>Apply flux and pre-tin the castellated holes on FT3DB.</li> <li>Configure the FT3DB jumpers (see section above).</li> <li>Place the FT3DB on the 3DMID aligning the soldering pads.</li> <li>Apply some flux if needed and solder a couple of pads holding the FT3DB in position.</li> <li>Go on and solder all the pads.</li> </ul> <p> </p> <p> <sub>Fig.6 \u2013 soldered FT3DB on the 3DMID shell.</sub> </p> <p>At this point the device is ready for testing, just connect it to the MMA with the dedicated cable.  To fully mount the fingertip, proceed with the next steps:</p> <ul> <li>Put on the rubber fingertip cod. 17377.</li> </ul> <p> </p> <p> <sub>Fig.7 \u2013 adjusted rubber fingertip on 3DMID shell.</sub> </p> <ul> <li>Test the fingertip in this condition.</li> </ul> <p> </p> <p> <sub>Fig.8 \u2013 3DMID fingertips with and without the rubber cap.</sub> </p> <ul> <li>To mount on the finger distal phalanx (fig. 9):<ol> <li>Connect the cable exiting from the phalanx.</li> <li>Slide the rear of the assembly into the bore with a small inclination.</li> <li>Push up and ahead to insert the locking clip into its slot.</li> </ol> </li> </ul> <p>At this point, the assembly should look sturdy and precisely fit, in addition you can tighten it with 1.6x8 mm screw. Now it's ready for testing the signals. </p> <p> </p> <p> <sub>Fig.9 \u2013 3DMID fingertip insertion procedure, left: connection, center: insertion of the device,  right: 3DMID device inserted into the distal phalanx.</sub> </p>"},{"location":"hands/fingertip_and_mma_mk5/#encoders","title":"Encoders","text":"<p>The finger position (closing and adduction angles) are read out by a set of FAP cards (Finger Absolute Position), each one coupled with a small magnet rigidly connected to the corresponding joint. Each FAP has the same I2C address, thus one I2C data line is needed for one FAP. This is implemented at the PCB level. </p>"},{"location":"hands/fingertip_and_mma_mk5/#mma-connection-scheme","title":"MMA Connection scheme","text":"<p>Three Molex 8-Pin connectors are the inputs for three dedicated MTB cards: - One MTB for tactile reading. - Two MTBs for FAP reading: max. 8 FAPs can be connected (4x MTB).</p> <p>The power suppy and signals are then routed to the connectors towards the FAPs and Fingertips: - JST SURS 5 contacts for the fingertips. - JST XRS 4 contacts for the FAPs.</p> <p>The family of connectors on the same device are identified with the REF DES: i.e., Picoblade J1 goes to connectors J1 1, J1 2 and so on; Picoblade J2 goes to J2 1 etc.  Details are summarized in the table below:</p> connector description sensor J1 Molex 8-Pin conventional MTB J2 Molex 8-Pin MTB-FAP J3 Molex 8-Pin MTB-FAP J10-J15 JST SURS fingertips and palm - corresponding to J1 J20-J23 JST XRS encoders - corresponding to J2 J30-J33 JST XRS encoders - corresponding to J3 <p>The encoders are connected with the following logic: - Finger position encoders are to be routed to one MTB-FAP. - Adduction encoders are to be routed to the other MTB-FAP.</p> <p>The connection of the MTB-FAP can be made allowing for the simplest layout and reported here and in the wiring scheme.</p> <p>The schematic of the MMA is shown below.</p>"},{"location":"hands/fingertip_and_mma_mk5/#tactile-sensors","title":"Tactile sensors","text":"<p> <sub>Fig.3 \u2013 Skin connections. The fingers belonging to the same Data Line can be swapped.</sub> </p> <p>The tactile sensors are connected to the MMA as in Fig. 3. The fingers (index, middle, ring) can be swapped to account for easier cabling, with no effect in mapping of the signals. Also, Thumb and Pink can be swapped the similarly.</p>"},{"location":"hands/fingertip_and_mma_mk5/#encoder-connection","title":"Encoder connection","text":"<p>The encoders are connected as reported in the table above and in the schematic snapshot in Fig. 4.</p> <p> </p> <p> <sub>Fig.4 \u2013 FAPs connections. The FAP mapping should be reported in the configuration files for proper working of the joints.</sub> </p>"},{"location":"hands/fingertip_and_mma_mk5/#software-items","title":"Software items","text":"<p>To use correctly the data from the sensors we need to have the following information embedded in the configuration files.</p>"},{"location":"hands/fingertip_and_mma_mk5/#signal-wrapping-in-configuration-files","title":"Signal wrapping in configuration files","text":"<p>For the configuration of the Wrapper file in the robots-configuration tree, for streaming through the YARP  services and signal visualization, the mapping of the signals is reported in the table below:</p>"},{"location":"hands/fingertip_and_mma_mk5/#ergocub-sn000-sn001","title":"ergoCub SN000 &amp; SN001","text":"Finger board nr. Taxel Index Thumb 4 48-59 Index 0 0-11 Middle 1 12-23 Ring 2 24-35 Pink 5 60-71 Palm TBD TBD"},{"location":"hands/fingertip_and_mma_mk5/#ergocub-with-mma-revb","title":"ergoCub with MMA rev.B","text":"Finger board nr. Taxel Index Thumb 0 0-11 Index 4 48-59 Middle 8 96-107 Ring 12 144-155 Pink 16 192-203 Palm TBD TBD"},{"location":"hands/fingertip_and_mma_mk5/#ad7147-configuration","title":"AD7147 configuration","text":"<p>The values for the mk2 fingertip are reported here, to be implemented in .xml files with the proper labeling:</p> Parameter Value Bitshift 2 CDC offset 0x0000 No load value note<sup>2</sup>"},{"location":"hands/fingertip_and_mma_mk5/#encoders-mapping-in-the-configuration-files","title":"Encoders mapping in the configuration files","text":"<p>\ud83d\udea7 WIP \ud83d\udea7</p> <ol> <li> <p>See link or buy from usual suppliers of electronics goods.\u00a0\u21a9</p> </li> <li> <p>The No load value can be choosen to be lower than 0xF0 (240) to allow for some room for opposite polarity signals to be recorded. In this case, the set level must be forwarded to high level tools such as SkinGUI etc. for a proper managing of events. A nice choice could be a value of about 0xC0 (192) to have ~60 ADC counts of headroom for opposite sign forces, i.e., shear forces, to be measured with the lateral taxels or elastic effects for non-touched taxels to improve force measurement.\u00a0\u21a9</p> </li> </ol>"},{"location":"hands/hands_mk5/","title":"Hand Mk5 joints Specs","text":""},{"location":"hands/hands_mk5/#mk51","title":"Mk5.1","text":"Joint number Motors Identifier Type Parent link Child link HW lower limit HW upper limit SW low. l. SW upp. l. Notes l_thumb_add ROT l_hand_palm l_hand_thumb_1 0\u00b0 100\u00b0 T1 in fig. l_thumb_prox ROT l_hand_thumb_1 l_hand_thumb_2 0\u00b0 90\u00b0 T2 in fig. l_thumb_dist ROT l_hand_thumb_2 l_hand_thumb_3 0\u00b0 101.4\u00b0 T3 in fig. l_index_add ROT l_hand_palm l_hand_index_1 0\u00b0 15\u00b0 I1 in fig. l_index_prox ROT l_hand_index_1 l_hand_index_2 0\u00b0 90\u00b0 I2 in fig. l_index_dist ROT l_hand_index_2 l_hand_index_3 0\u00b0 103.1\u00b0 I3 in fig. l_middle_prox ROT l_hand_palm l_hand_middle_1 0\u00b0 90\u00b0 M1 in fig. l_middle_dist ROT l_hand_middle_1 l_hand_middle_2 0\u00b0 103.1\u00b0 M2 in fig. l_ring_prox ROT l_hand_palm l_hand_ring_1 0\u00b0 90\u00b0 R1 in fig. l_ring_dist ROT l_hand_ring_1 l_hand_ring_2 0\u00b0 103.1\u00b0 R2 in fig. l_pinkie_prox ROT l_hand_palm l_hand_pinkie_1 0\u00b0 90\u00b0 P1 in fig. l_pinkie_dist ROT l_hand_pinkie_1 l_hand_pinkie_2 0\u00b0 98.7\u00b0 P2 in fig. <p> <sub>Hand Mk5.1 joints</sub> </p>"},{"location":"hands/hands_mk5/#mk50","title":"Mk5.0","text":"Joint number Motors Identifier Type Parent link Child link HW lower limit HW upper limit SW low. l. SW upp. l. Notes l_thumb_add ROT l_hand_palm l_hand_thumb_1 0\u00b0 90\u00b0 T1 in fig. l_thumb_prox ROT l_hand_thumb_1 l_hand_thumb_2 0\u00b0 82.1\u00b0 T2 in fig. l_thumb_dist ROT l_hand_thumb_2 l_hand_thumb_3 0\u00b0 53.6\u00b0 T3 in fig. l_index_add ROT l_hand_palm l_hand_index_1 0\u00b0 15\u00b0 I1 in fig. l_index_prox ROT l_hand_index_1 l_hand_index_2 0\u00b0 90\u00b0 I2 in fig. l_index_dist ROT l_hand_index_2 l_hand_index_3 0\u00b0 99.2\u00b0 I3 in fig. l_middle_prox ROT l_hand_palm l_hand_middle_1 0\u00b0 90\u00b0 M1 in fig. l_middle_dist ROT l_hand_middle_1 l_hand_middle_2 0\u00b0 99.2\u00b0 M2 in fig. l_ring_prox ROT l_hand_palm l_hand_ring_1 0\u00b0 90\u00b0 R1 in fig. l_ring_dist ROT l_hand_ring_1 l_hand_ring_2 0\u00b0 99.2\u00b0 R2 in fig. l_pinkie_prox ROT l_hand_palm l_hand_pinkie_1 0\u00b0 90\u00b0 P1 in fig. l_pinkie_dist ROT l_hand_pinkie_1 l_hand_pinkie_2 0\u00b0 93.3\u00b0 P2 in fig. <p> <sub>Hand Mk5.0 joints</sub> </p>"},{"location":"hands/hands_mk5_coupling/","title":"Hand Mk5 Coupling Laws","text":""},{"location":"hands/hands_mk5_coupling/#coupling-variables","title":"Coupling variables","text":"<p>Below, a sketch of the finger kinematics is reported:</p> <p> </p> <p> <sub>Hand Mk5 leverism</sub> </p> <p>Unless specified otherwise, angles reported in the next sections follow the convention in figure.</p> <ul> <li>\\(q_0\\) is the variable angle of \\(A-C\\).</li> <li>\\(q_1\\) is the variable angle of the first phalanx.</li> <li>\\(q_2\\) is the variable angle of the second phalanx.</li> </ul> <p>Joint angle feedback</p> <p>The joint encoder is mounted in position \\(P_0\\), hence we can measure the angle \\(q_1\\) that in turn is used to close the control loop.</p> <p>Motor encoder feedback</p> <p>A quadrature encoder is mounted on the motor shaft, which is currently used only to handle the tendon wrapping.         </p>"},{"location":"hands/hands_mk5_coupling/#coupling-laws","title":"Coupling Laws","text":"<p>Considering the following quantities:</p> \\[b = \\left| L_{0} - P_{0} \\right|\\] \\[d = \\left| P_{1} - P_{0} \\right|\\] \\[l = \\left| L_{1} - P_{1} \\right|\\] \\[k = \\left| L_{1} - L_{0} \\right|\\] \\[s = \\left| B - P_{0} \\right|\\] \\[t = |A - B|\\] \\[f = |A - C|\\] \\[r = |D - C|\\] \\[h(q_{1}) = \\left| P_{1}(q_{1}) - L_{0} \\right|\\] \\[a(q_{0}) = \\left| A(q_{0}) - P_{0} \\right|\\] \\[P_{1x} = P_{0x} + d\\cos\\left( q_{1} + q_{1off} \\right)\\] \\[P_{1y} = P_{0y} + d\\sin\\left( q_{1} + q_{1off} \\right)\\] \\[A_{x} = C_{x} + f\\cos\\left( q_{0} + q_{0off} \\right)\\] \\[A_{y} = C_{y} + f\\sin\\left( q_{0} + q_{0off} \\right)\\] <p>We have \\(q_{2}\\)  that depends only on the variable \\(q_{1}\\) through the implicit dependence on \\(P_{1}\\) and h:</p> \\[q_{2} = \\tan^{- 1}\\left( \\frac{P_{1y}(q_{1}) - L_{0y}}{P_{1x}(q_{1}) - L_{0x}} \\right) + \\cos^{- 1}{\\left( \\frac{l^{2} - k^{2} + h^{2}(q_{1})}{2lh(q_{1})} \\right) - q_{2bias} - \\pi}.\\] <p>The Jacobian that relates the variations of \\(q_{2}\\) to the variations of \\(q_{1}\\) is:</p> \\[\\frac{\\partial q_{2}}{\\partial q_{1}} = \\frac{1}{2 - \\frac{d^{2} - b^{2}}{d^{2} - (L_{0x}P_{1x}+L_{0y}P_{1y})}} + \\frac{\\left( L_{0x}P_{1y} - L_{0y}P_{1x} \\right)\\left( l^{2} - k^{2} - h^{2}(q_1) \\right)}{2lh^{3}(q_1)\\sqrt{1 - \\left( \\frac{l^{2} - k^{2} + h^{2}(q_1)}{2lh(q_1)} \\right)^{2}}}.\\] <p>The relationship between \\(q_{0}\\) and \\(q_{1}\\) is:</p> \\[q_{1} = \\tan^{- 1}\\left( \\frac{A_{y}(q_{0}) - P_{0y}}{A_{x}(q_{0}) - P_{0x}} \\right) + \\cos^{- 1}{\\left( \\frac{s^{2} - t^{2} + a^{2}(q_{0})}{2sa(q_{0})} \\right) - q_{1bias} - \\pi}.\\] <p>Let us move on to explore the relation between the motor pulling the tendon and \\(q_0\\). Both the tendon ends are clamped to bushings that describe circular arcs; one bushing is centered in \\(D\\) and its trajectory is an arc centered in \\(C\\) whereas the other is centered in \\(F\\) and its trajectory is an arc centered in \\(E\\).</p> <p> </p> <p> <sub>Finger motor pulley (forearm)</sub> </p> <p>Be \\(q_{mot}\\) the variable angle of the motor pulley and assuming the steel wire to be inextensible, the arc lengths described by the two trajectories shall be equal, i.e.:</p> \\[r_{mot} \\cdot q_{mot} = r \\cdot q_0\\] <p>Hence we get</p> \\[q_0 = \\frac{r_{mot}}{r} \\cdot q_{mot} \\]"},{"location":"hands/hands_mk5_coupling/#mk51-coupling-variables","title":"Mk5.1 coupling variables","text":"<p>The following table describes the coupling variables of the finger mechanisms in the hand Mk5.1.</p> Name UoM Values Description THUMB INDEX MIDDLE RING PINKY \\(L_{0x}\\) mm -5 -5 -5 -5 -5 \\(x\\) coordinate of the first end of   the leverism \\(L_{0y}\\) mm 4 4 4 4 4 \\(y\\) coordinate of the the first end   of the leverism \\(L_{1x}\\) mm 29 34 34 34 29 \\(x\\) coordinate of the second end of   the leverism \\(L_{1y}\\) mm 0.8 0.8 0.8 0.8 0.5 \\(y\\) coordinate of the second end of   the leverism \\(P_{1x}\\) mm 35 40 40 40 35 \\(x\\) coordinate of the axis of the   joint between the first and the second phalanx \\(P_{1y}\\) mm 1.5 1.5 1.5 1.5 1.5 \\(y\\) coordinate of the axis of the   joint between the first and the second phalanx \\(q_{0off}\\) deg -97.54 -97.54 -97.54 -97.54 -97.52 Angle of \\(A-C\\) when the finger is   fully open \\(q_{2bias}\\) deg -173.35 -173.35 -173.35 -173.35 -170.53 Angle of \\(L_1-P_1\\) when the finger   is fully open \\(q_{1off}\\) deg 2.45 2.15 2.15 2.15 2.46 Angle of \\(P_1-P_0\\)  when the finger is fully open \\(q_{1bias}\\) deg -90 -90 -90 -90 -90 Angle of \\(B-P_0\\)  when the finger is fully open \\(q_{0max}\\) deg -12 -12 -12 -12 -11.97 Max value of \\(q_0\\), i.e. when the   finger is fully closed \\(q_{1max}\\) deg 90 90 90 90 90 Max value of \\(q_1\\), same as above \\(q_{2max}\\) deg 191.44 193.06 193.06 193.06 188.7 Max value of \\(q_2\\), same as above \\(k\\) mm 34.15 39.13 39.13 39.13 34.18 Connecting rod length, \\(\\|L_1-L_0\\|\\) \\(d\\) mm 35.03 40.03 40.03 40.03 35.03 Distance between the two   joints,   \\(P_1\\) and \\(P_0\\) \\(l\\) mm 6.04 6.04 6.04 6.04 6.08 Distance between \\(L_1\\) and   \\(P_1\\) \\(b\\) mm 6.4 6.4 6.4 6.4 6.4 Distance between \\(L_0\\) and   \\(P_0\\) \\(s\\) mm 5.5 5.5 5.5 5.5 5.5 Distance between joint \\(B\\) of   the   connecting rod \\(A-B\\) and joint   \\(P_0\\) \\(t\\) mm 14.5 14.5 14.5 14.5 14.5 Length of the connecting rod   \\(A-B\\) \\(f\\) mm 5.5 5.5 5.5 5.5 5.5 Length of the connecting rod   \\(A-C\\) \\(r\\) mm 8.5 8.5 8.5 8.5 8.5 Length of the connecting rod   \\(D-C\\) \\(r_{mot}\\) mm 5 5 5 5 5 Distance between the axis of the bushing and the rotational axis of the finger motor"},{"location":"hands/hands_mk5_coupling/#mk50-coupling-variables","title":"Mk5.0 coupling variables","text":"<p>The following table describes the coupling variables of the finger mechanisms in the hand Mk5.0.</p> Name UoM Values Description THUMB INDEX MIDDLE RING PINKY \\(L_{0x}\\) mm -5.55 -5 -5 -5 -5 \\(x\\) coordinate of the first end of   the leverism \\(L_{0y}\\) mm 2.85 4 4 4 4 \\(y\\) coordinate of the the first end   of the leverism \\(L_{1x}\\) mm 11.5 24 24 24 19 \\(x\\) coordinate of the second end of   the leverism \\(L_{1y}\\) mm 1.5 0.8 0.8 0.8 0.5 \\(y\\) coordinate of the second end of   the leverism \\(P_{1x}\\) mm 20 30 30 30 25 \\(x\\) coordinate of the axis of the   joint between the first and the second phalanx \\(P_{1y}\\) mm 1.5 1.5 1.5 1.5 1.5 \\(y\\) coordinate of the axis of the   joint between the first and the second phalanx \\(q_{0off}\\) deg -110.71 -97.54 -97.54 -97.54 -97.54 Angle of \\(A-C\\) when the finger is   fully open \\(q_{2bias}\\) deg -180 -173.35 -173.35 -173.35 -170.54 Angle of \\(L_1-P_1\\) when the finger   is fully open \\(q_{1off}\\) deg 4.29 2.86 2.86 2.86 3.43 Angle of \\(P_1-P_0\\)  when the finger is fully open \\(q_{1bias}\\) deg -90 -90 -90 -90 -90 Angle of \\(B-P_0\\)  when the finger is fully open \\(q_{0max}\\) deg -44.68 -11.97 -11.97 -11.97 -11.97 Max value of \\(q_0\\), i.e. when the   finger is fully closed \\(q_{1max}\\) deg 86.35 90 90 90 90 Max value of \\(q_1\\), same as above \\(q_{2max}\\) deg 135.65 189.2 189.2 189.2 183.31 Max value of \\(q_2\\), same as above \\(k\\) mm 17.1 29.18 29.18 29.18 24.25 Connecting rod length, \\(\\|L_1-L_0\\|\\) \\(d\\) mm 20.06 30.04 30.04 30.04 25.04 Distance between the two joints,   \\(P_1\\) and \\(P_0\\) \\(l\\) mm 8.5 6.04 6.04 6.04 6.08 Distance between \\(L_1\\) and \\(P_1\\) \\(b\\) mm 6.24 6.4 6.4 6.4 6.4 Distance between \\(L_0\\) and \\(P_0\\) \\(s\\) mm 6.52 5.5 5.5 5.5 5.5 Distance between joint \\(B\\) of the   connecting rod \\(A-B\\) and joint \\(P_0\\) \\(t\\) mm 13 14.5 14.5 14.5 14.5 Length of the connecting rod \\(A-B\\) \\(f\\) mm 6 5.5 5.5 5.5 5.5 Length of the connecting rod \\(A-C\\) \\(r\\) mm 7.5 8.5 8.5 8.5 8.5 Length of the connecting rod \\(D-C\\)"},{"location":"icub-ergocub_ros2/","title":"Using <code>iCub</code> and <code>ergoCub</code> with ROS 2","text":"<p>Note</p> <p>We illustrate in this documentation how to control <code>iCub</code> and <code>ergoCub</code> physical robots using ROS 2 (simulation models are not covered).</p> <p>Info</p> <p>As the last supported ROS 1 distribution (ROS Noetic Ninjemys) is reaching its End of Life (EOL) on May 2025, with the distro release <code>v2024.11.1</code> ROS 1 support was deprecated.</p>"},{"location":"icub-ergocub_ros2/#overwiew","title":"Overwiew","text":"<p>All the YARP Network Wrapper Server (NWS) and Network Wrapper Client (NWC) devices that use ROS 2 can be found under <code>yarp-devices-ros2</code> repository.</p> <p><code>yarp-devices-ros2</code> contains the devices and utilities for YARP-ROS 2 compatibility. The devices are in the form of NWS/NWC that read/write information from/to ROS 2 topics and make them available via the YARP API. Starting from the distro <code>v2024.11.1</code>, the devices can be built with <code>robotology-superbuild</code> by enabling the <code>ROBOTOLOGY_USES_ROS2</code> CMake option.</p>"},{"location":"icub-ergocub_ros2/#publishing-icubergocubs-joints-state-the-controlboard_nws_ros2-module","title":"Publishing <code>iCub/ergoCub</code>'s joints state: the <code>controlBoard_nws_ros2</code> module","text":""},{"location":"icub-ergocub_ros2/#modules-description","title":"Modules description","text":"<p><code>controlBoard_nws_ros2</code> is the controlBoard network wrapper server for ROS 2. As per the <code>controlBoard_nws_yarp</code>, this device publishes the joint position information on ROS 2 topics instead of YARP ports. The device uses the yarpDeviceParamParserGenerator with its list of required parameters.</p>"},{"location":"icub-ergocub_ros2/#using-controlboard_nws_ros2","title":"Using <code>controlBoard_nws_ros2</code>","text":"<p>The NWS/NWC for YARP and ROS 2 are organized into separate wrappers. In this way, it is possible to attach multiple wrappers to the same device (<code>controlBoard_nws_yarp</code> for YARP, <code>controlBoard_nws_ros2</code> for ROS 2) and include them to the same configuration file used to launch the <code>yarprobotinterface</code>.</p>"},{"location":"icub-ergocub_ros2/#ergocub","title":"ergoCub","text":"<p>All ergoCub robots have the configuration files to enable this module under robots-configuration repository. To activate them, run the <code>yarprobotinterface</code> with the following option:</p> <pre><code>yarprobotinterface --enable_tags \"(enable_ros2)\"\n</code></pre>"},{"location":"icub-ergocub_ros2/#icub","title":"iCub","text":"<p>For iCub robots, instead, the module can be activated using an <code>xml</code> file, for example this <code>alljoints-mc_nws_ros2.xml</code>:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE devices PUBLIC \"-//YARP//DTD yarprobotinterface 3.0//EN\" \"http://www.yarp.it/DTD/yarprobotinterfaceV3.0.dtd\"&gt;\n\n&lt;device xmlns:xi=\"http://www.w3.org/2001/XInclude\" name=\"alljoints-mc_nws_ros2\" type=\"controlBoard_nws_ros2\"&gt;\n    &lt;param name=\"node_name\"&gt; icub_cb_node &lt;/param&gt;\n    &lt;param name=\"topic_name\"&gt; /joint_states &lt;/param&gt;\n    &lt;action phase=\"startup\" level=\"15\" type=\"attach\"&gt;\n        &lt;param name=\"device\"&gt; alljoints-mc_remapper &lt;/param&gt;\n    &lt;/action&gt;\n    &lt;action phase=\"shutdown\" level=\"20\" type=\"detach\" /&gt;\n&lt;/device&gt;\n</code></pre> <p>Warning</p> <p>Not all iCub configuration files have been modified to support ROS 2. If you didn't find those files within your robot name folder under <code>robots-configuration</code>, please don't hesitate to file an issue.</p> <p>With this kind of file, the positions of all the joints specified in the <code>alljoints-mc_remapper</code> are published on the <code>/joint_states</code> ROS 2 topic.</p> <p>In particular, this file is meant to be used as part of the same <code>yarprobotinterface</code> with which you launch the robot. To include it among the launched devices, you have to modify the <code>icub_all.xml</code> (or any file that is launched with your <code>yarprobotinterface</code>) to include the line:</p> <pre><code>&lt;xi:include href=\"wrappers/motorControl/alljoints-mc_nws_ros2.xml\" /&gt;\n</code></pre>"},{"location":"icub-ergocub_ros2/#xcub-moveit2","title":"xcub-moveit2","text":"<p><code>xcub-moveit2</code> contains ROS 2 packages to control a YARP-based robot (iCub/ergoCub) with MoveIt2 platform. Check it out for more details.</p>"},{"location":"icub3/icub3-joints/","title":"iCub 3","text":"<p>Here's are described the elctrical and mechanical specifications for each joint</p>"},{"location":"icub3/icub3-joints/#head-joints-specs","title":"Head Joints Specs","text":""},{"location":"icub3/icub3-joints/#joints-01-pitch-and-roll-coupled","title":"Joints 0,1 - pitch and roll (coupled)","text":"Motor type DC Motor Encoder 512 ppr First stage reduction 18/28 Harmonic drive 1/100 Last stage (cables and pulleys reduction) 30.5/31.7 Joint encoder AEA HW limits pitch -30/+41 roll \u00b140 (degrees)"},{"location":"icub3/icub3-joints/#joint-2-yaw","title":"Joint 2 - yaw","text":"Motor type DC Motor Encoder 512 ppr First stage reduction - Harmonic drive 1/100 Last stage (cables and pulleys reduction) - Joint encoder AEA HW limits \u00b145 (degrees)"},{"location":"icub3/icub3-joints/#joint-3-eyes-tilt","title":"Joint 3 - eyes tilt","text":"Motor type DC Motor Encoder 512 ppr First stage reduction - Harmonic drive 1/100 Last stage (cables and pulleys reduction) - Joint encoder AEA HW limits \u00b145 (degrees)"},{"location":"icub3/icub3-joints/#joint-45-eyes-pan","title":"Joint 4,5 - eyes pan","text":"Motor type DC Motor Encoder 512 ppr First stage reduction - Harmonic drive 1/50 Last stage (cables and pulleys reduction) - Joint encoder - HW limits \u00b130 (degrees)"},{"location":"icub3/icub3-joints/#face-joints-specs","title":"Face Joints Specs","text":""},{"location":"icub3/icub3-joints/#joint-0-eyelids","title":"Joint 0 - Eyelids","text":"Motor type DC Motor Encoder 10 lpr Integrated gearbox 1/16 Joint encoder AEA Last stage reduction 42/100 HW limits 0/-70 (degrees)"},{"location":"icub3/icub3-joints/#upperarm-joints-specs","title":"Upperarm Joints specs","text":""},{"location":"icub3/icub3-joints/#joint-0-shoulder-pitch","title":"Joint 0 - shoulder pitch","text":"Motor type Brushless C2900576 8 poles Motor Encoder Lcore optical encoder on motor shaft Harmonic drive 1/100 Joint encoder Magnetic target 64/63 &amp; AMO board (MU7S_64-63N PWB 103839) HW limits -25/+180 (degrees)"},{"location":"icub3/icub3-joints/#joint-1-shoulder-roll","title":"Joint 1 - shoulder roll","text":"Motor type Brushless C2900576 8 poles Motor Encoder Lcore optical encoder on motor shaft Harmonic drive 1/100 Joint encoder Magnetic target 64/63 &amp; AMO board (MU7S_64-63N PWB 103839) HW limits -15/+150 (degrees)"},{"location":"icub3/icub3-joints/#joint-2-upperarm-yaw","title":"Joint 2 - upperarm yaw","text":"Motor type Brushless C2900576 8 poles Motor Encoder Lcore optical encoder on motor shaft Harmonic drive 1/100 Joint encoder magnetic target 64/63 &amp; AMO board (MU7S_64-63N PWB 103839) HW limits -52/+82 (degrees)"},{"location":"icub3/icub3-joints/#joint-3-elbow","title":"Joint 3 - elbow","text":"Motor type Brushless C2900576 8 poles Motor Encoder Lcore optical encoder on motor shaft Harmonic drive 1/100 Joint encoder magnetic target MU7S_25-32N &amp; AMO board (MU7S_64-63N PWB 103839) HW limits -5/+115 (degrees)"},{"location":"icub3/icub3-joints/#forearm-joints-specs","title":"Forearm Joints specs","text":""},{"location":"icub3/icub3-joints/#joint-4-pronosupination","title":"Joint 4 - Pronosupination","text":"Motor type DC Motor Encoder 512 ppr Harmonic drive 1/100 Joint encoder - HW limits -90/+90 (degrees)"},{"location":"icub3/icub3-joints/#joint-56-wrist-yaw-and-pitch-coupled","title":"Joint 5,6 -Wrist yaw and pitch - coupled","text":"Motor type DC Motor Encoder 400 ppr Integrated gearbox 1/159 Cables\u2019pulleys reduction 14/18.8 Joint encoder AEA (both joints) HW limits -45/+45 (degrees)"},{"location":"icub3/icub3-joints/#joint-7-fingers-abduction","title":"Joint 7 - Fingers abduction","text":"Motor type DC Motor Encoder 10 ppr Integrated gearbox 1/256 Cables\u2019pulleys reduction - Joint encoder Hall effect sensor"},{"location":"icub3/icub3-joints/#joint-8-thumb-abduction","title":"Joint 8 - Thumb abduction","text":"Motor type DC Motor Encoder no Integrated gearbox 1/256 Cables\u2019pulleys reduction - Joint encoder Hall effect sensor"},{"location":"icub3/icub3-joints/#joint-91113-thumb-index-and-middle-proximals","title":"Joint 9,11,13 - Thumb, index and middle proximals","text":"Motor type DC Motor Encoder 10 ppr Integrated gearbox 1/256 Cables\u2019pulleys reduction - Joint encoder Hall effect sensor"},{"location":"icub3/icub3-joints/#joint-10-thumb-distals-2-joints-1-motor","title":"Joint 10 - Thumb distals - 2 joints 1 motor","text":"Motor type DC Motor Encoder 10 ppr Integrated gearbox 1/256 Cables\u2019pulleys reduction - Joint encoder Hall effect sensor"},{"location":"icub3/icub3-joints/#joint-12-index-distals-2-joints-1-motor","title":"Joint 12 - Index distals - 2 joints 1 motor","text":"Motor type DC Motor Encoder 10 ppr Integrated gearbox 1/256 Cables\u2019pulleys reduction - Joint encoder Hall effect sensor"},{"location":"icub3/icub3-joints/#joint-14-middle-distals-2-joints-1-motor","title":"Joint 14 - Middle distals - 2 joints 1 motor","text":"Motor type DC Motor Encoder 10 ppr Integrated gearbox 1/256 Cables\u2019pulleys reduction - Joint encoder Hall effect sensor"},{"location":"icub3/icub3-joints/#joint-15-ring-and-pinky-distals-4-joints-1-motor","title":"Joint 15 - Ring and pinky distals - 4 joints 1 motor","text":"Motor type DC Motor Encoder 10 ppr Integrated gearbox 1/256 Cables\u2019pulleys reduction - Joint encoder Hall effect sensor"},{"location":"icub3/icub3-joints/#lowebody-joints-specs","title":"Lowebody Joints specs","text":""},{"location":"icub3/icub3-joints/#torso-joints","title":"Torso joints","text":""},{"location":"icub3/icub3-joints/#joint-0-torso-roll","title":"Joint 0 - torso roll","text":"Motor type MOOG_C2900576 Moog BLDC motor, OD 49.2, ID 15.5, L 24.7 , W/O HALL SENSOR Fast shaft sensor Lcore 5 \u2013 optical disk 004 Slow shaft sensor drive AMO board  - magnetic target 64/63  (MU7S_64-63N PWB 103839) Harmonic drive CSD-20-100-2UH_CS (1:100) HW limits +25/-25 (degrees) SW limits -"},{"location":"icub3/icub3-joints/#joint-1-torso-pitch","title":"Joint 1 - torso pitch","text":"Motor type MOOG_C2900576 Moog BLDC motor, OD 49.2, ID 15.5, L 24.7 , W/O HALL SENSOR Fast shaft sensor Lcore 5 \u2013 optical disk 004 Slow shaft sensor drive AMO board  - magnetic target 64/63  (MU7S_64-63N PWB 103839) Harmonic drive CSD-20-100-2UH_CS (1:100) HW limits +65/-25 front/rear (degrees) SW limits -"},{"location":"icub3/icub3-joints/#joint-2-torso-yaw","title":"Joint 2 - torso yaw","text":"Motor type Brushless C2900576 8 poles Motor Encoder Lcore optical encoder on motor shaft Harmonic drive 1/100 Joint encoder Magnetic target 64/63 &amp; AMO board (MU7S_64-63N PWB 103839) HW limits -45/+45 (degrees)"},{"location":"icub3/icub3-joints/#legs-joints","title":"Legs joints","text":""},{"location":"icub3/icub3-joints/#joint-0-left-right-hip-pitch","title":"Joint 0 - left, right hip pitch","text":"Motor type MOOG_C2900580 Moog BLDC motor, OD 72.4, ID 15.5, L 27.5 , W/O HALL SENSOR Fast shaft sensor Lcore 5 \u2013 optical disk 004 Slow shaft sensor drive AMO board  - magnetic target 64/63  (MU7S_64-63N PWB 103839) Harmonic drive CSD-20-100-2UH_CS (1:100) HW limits +94/-47 front/rear (degrees) SW limits -"},{"location":"icub3/icub3-joints/#joint-1-left-right-hip-roll","title":"Joint 1 - left, right hip roll","text":"Motor type MOOG_C2900576 Moog BLDC motor, OD 49.2, ID 15.5, L 24.7 , W/O HALL SENSOR Fast shaft sensor Lcore 5 \u2013 optical disk 004 Slow shaft sensor drive AMO board  - magnetic target 64/63  (MU7S_64-63N PWB 103839) Harmonic drive CSD-20-100-2UH_CS (1:100) HW limits +120/-20 front/rear (degrees) SW limits -"},{"location":"icub3/icub3-joints/#joint-2-left-right-yaw","title":"Joint 2 - left, right yaw","text":"Motor type MOOG_C2900576 Moog BLDC motor, OD 49.2, ID 15.5, L 24.7 , W/O HALL SENSOR Fast shaft sensor Lcore 5 \u2013 optical disk 004 Slow shaft sensor drive AMO board  - magnetic target 64/63  (MU7S_64-63N PWB 103839) Harmonic drive CSD-20-100-2UH_CS (1:100) HW limits -80.5/+80.5 (degrees) SW limits -"},{"location":"icub3/icub3-joints/#joint-3-left-right-knee","title":"Joint 3 - left, right knee","text":"Motor type MOOG_C2900580 Moog BLDC motor, OD 72.4, ID 15.5, L 27.5 , W/O HALL SENSOR Fast shaft sensor Lcore 5 \u2013 optical disk 004 Slow shaft sensor drive AMO board  - magnetic target 64/63  (MU7S_64-63N PWB 103839) Harmonic drive CSD-25-100-2UH_CS (1:100) HW limits +105/-5 (degrees) SW limits -"},{"location":"icub3/icub3-joints/#joint-4-left-right-foot-pitch","title":"Joint 4 - left, right foot pitch","text":"Motor type MOOG_C2900580 Moog BLDC motor, OD 72.4, ID 15.5, L 27.5 , W/O HALL SENSOR Fast shaft sensor Lcore 5 \u2013 optical disk 004 Slow shaft sensor drive AMO board  - magnetic target 64/63  (MU7S_64-63N PWB 103839) Harmonic drive CSD-25-100-2UH_CS (1:100) HW limits +45/-45 (degrees) SW limits -"},{"location":"icub3/icub3-joints/#joint-5-left-right-foot-roll","title":"Joint 5 - left, right foot roll","text":"Motor type MOOG_C2900576 Moog BLDC motor, OD 49.2, ID 15.5, L 24.7 , W/O HALL SENSOR Fast shaft sensor Lcore 5 \u2013 optical disk 004 Slow shaft sensor drive AMO board  - magnetic Encoder  (MU7S_25-32N) Harmonic drive CSD-17-100-2A (1:100) HW limits +25/-25 (degrees) SW limits -"},{"location":"icub_cpu_boards/icub_cpu_boards/","title":"CPU boards","text":"<p>The table below reports all CPU boards installed on the robots.</p> Internal name Vendor Model Vendor Description Board Form factor Robot version CPU RAM HardDisk OTHER / BIOS PC104 PB-855+ PB-855+ 1400PM Embedded Logic PC104plus Motherboard PB855+, with Intel M processor 1,8 GHz PC104 Plus Standard iCub 1.0 Intel M processor 1,8 GHz n.a. (*) USB pen PC104 PB945+ PB945+ T7400 Embedded Logic PC104 Motherboard PB945+, with Intel Core 2Duo 2,16 Ghz PC104 Plus Standard iCub 1.0 and iCub 2.0 Intel Core 2Duo 2,16 Ghz n.a. (*) USB pen ATOM PB-ATOM-L_D525 Embedded Logic PC104 Motherboard PB-ATOM-L+, with Intel ATOM D525 PC104 Plus Standard iCub 1.0 and iCub 2.0 Intel ATOM D525 n.a. (*) USB pen CM2-BT2-E3825 ATOM E3825 Advantech DUAL CORE ATOM E3825 To be tested PC104 Plus Standard iCub 1.0 and iCub 2.0 Intel ATOM E3825 4GB mSATA drive Manual Disable UEFI boot from BIOS to boot from iCub LIVE USB COMEXPRESS CONGATEC conga-TC87/i7-4650U Congatec COM-Express Type6, Congatec TC87/i7-4650U (Core i7-4650U 1.7GHz) p/n 46901 COM-Express Type6 iCub 2.5, iCub 3.0 Core i7-4650U 8GB external SATA 32GB COMEXPRESS KONTRON COMe-cKL6i7-7600 8GB32S Kontron COM-Express Type6, Kontron COMe-cKL6i7-7600 8GB RAM onboard and 32GB SLC eMMC 5.0 (Core i7-7600U 1.7GHz) COM-Express Type6 iCub 2.5-2.6 and 2.7 Intel i7-7600U 8+8GB RAM onboard 32GB COMEXPRESS Advantech ADVANTECH_SOM-7583C7-S8A1 Advantech COM-Express Type10, Advantech SOM i7-1185G7E 16GB DDR4, 64GB SSD Com-Express Type 10 ergoCub 1.x Intel i7-1185G7E 4 cores 2.8GHz 16GB RAM DDR4 onboard 64GB NVMe SSD Xavier NX Jetson Xavier NX NVIDIA\u00ae NVIDIA Jetson Xavier NX Series (21 TOPS) Connect Tech Quark Carrier Board iCub 2.10, iCub 3.0, iRonCub 3.0 384-core Volta GPU, 6-core Carmel Arm 64-bit CPU 16GB RAM 16GB eMMC Xavier AGX Jetson Xavier AGX NVIDIA\u00ae NVIDIA Jetson Xavier AGX Series (32 TOPS) Connect Tech Rogue Carrier Board ergoCub 1.x 512-core Volta GPU, 8-core Carmel Arm 64-bit CPU 16GB RAM 32 GB eMMC + external M.2 SSD Orin NX Jetson Orin NX NVIDIA\u00ae NVIDIA Jetson Orin NX Series (50 TOPS) Connect Tech Boson for FRAMOS Carrier Board ergoCub 1.1 1024-core Ampere GPU, 8-core Arm Cortex-A78AE 64-bit CPU 16GB RAM 64GB external M.2 SSD"},{"location":"icub_firmware/","title":"Firmware Documentation","text":"<p>Here you can find information about firmware in the various versions of the robot and some related resources.</p> <ul> <li>Firmware Toolchain Documentation</li> <li>Firmware Documentation</li> <li>FirmwareUpdater Walkthrough</li> <li>Associated Firmware</li> <li>Automatic Firmware Update Runbook</li> </ul>"},{"location":"icub_firmware/associated-firmware/associated-firmware/","title":"Associated Firmware","text":"<p>This page reports the association <code>board/address/firmware</code> version either for <code>CAN</code> and <code>ETH</code> based robots</p>"},{"location":"icub_firmware/associated-firmware/associated-firmware/#can-based-robots","title":"CAN based robots","text":""},{"location":"icub_firmware/associated-firmware/associated-firmware/#can-networks","title":"CAN Networks","text":"<p>The iCub 1.0.0 four can bus network are used (ids range from 0 to 3)</p> <ul> <li>0 head network, device pcan</li> <li>1 left arm network, device pcan</li> <li>2 right arm network, device pcan</li> <li>3 legs network, device pcan</li> </ul> <p>On iCub 1.1.0 two ecan devices are added to the existing pcans.</p> <ul> <li>0 head network, device pcan</li> <li>1 left arm network, device pcan</li> <li>2 right arm network, device pcan</li> <li> <p>3 legs network, device pcan</p> </li> <li> <p>left hand: device ecan, variable id</p> </li> <li>right hand: device ecan, variable id</li> </ul> <p>On iCub 1.2.0 the cfw2can board is used (ids range from 0 to 8).</p> <ul> <li>0 head network, device cfw2can</li> <li>1 left arm network, device cfw2can</li> <li>2 right arm network, device cfw2can</li> <li>3 left leg network, device cfw2can</li> <li>4 right leg network, device cfw2can</li> <li>5 left hand, device cfw2can</li> <li>6 right hand, device cfw2can</li> <li>7 left hand skin network, device cfw2can</li> <li>8 right hand skin network, device cfw2can</li> </ul> <p>On iCub 1.3.0 the cfw2can board is used (ids range from 0 to 8).</p> <ul> <li>0 head network, device cfw2can</li> <li>1 left arm network, device cfw2can</li> <li>2 right arm network, device cfw2can</li> <li>3 left leg network, device cfw2can</li> <li>4 right leg network, device cfw2can</li> <li>5 left hand, device cfw2can</li> <li>6 right hand, device cfw2can</li> <li>7 left hand and forearm skin network, device cfw2can</li> <li>8 right hand and forearm skin network, device cfw2can</li> </ul> <p>On iCub 1.3.1 the Head V2.0 is installed on a 1.3.0 robot.</p> <p>On iCub 2 the cfw2can board is used (ids range from 0 to 9).</p> <ul> <li>0 head network, device cfw2can</li> <li>1 left arm network, device cfw2can</li> <li>2 right arm network, device cfw2can</li> <li>3 left leg network, device cfw2can</li> <li>4 right leg network, device cfw2can</li> <li>5 left hand, device cfw2can</li> <li>6 right hand, device cfw2can</li> <li>7 left hand, forearm and upperarm skin network, device cfw2can</li> <li>8 right hand forearm and upperarm skin network, device cfw2can</li> <li>9 torso skin network, device cfw2can</li> </ul> <p></p>"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v10","title":"iCub V1.0","text":"<p>We here describe the CAN-bus networks structure of the iCub v1.0. The version 1.0 uses the CFW board which has 4 canbus lines.</p> <p>This version of iCub is no more supported. Firmware versions marked in red have been removed from the main repository.</p> can-bus network configuration file associated robot part pcan-0 icub_head_torso.ini head (entries 0 to 5) and torso (entries 6 to 8) pcan-1 icub_left_arm.ini left_arm pcan-2 icub_right_arm.ini right_arm pcan-3 icub_legs_leg.ini left_leg (entries 0 to 5) and right_leg (entries 6 to 11) <p>Details on the control boards connected to each network are given below.</p>"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan0-head-and-torso","title":"PCAN0: Head and Torso","text":""},{"location":"icub_firmware/associated-firmware/associated-firmware/#head","title":"Head","text":"boardLabel canDeviceNum boardId firmware 0B0 -&gt; 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -&gt; 0 (pcan) 3 (4) 4DC.1.15.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso","title":"Torso","text":"boardLabel canDeviceNum boardId firmware 0B3 -&gt; 0 (pcan) 6 2BLL.1.52.out.S 0B4 -&gt; 0 (pcan) 5 2BLL.1.54.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan1-left-arm","title":"PCAN1: Left arm","text":"boardLabel canDeviceNum boardId firmware 1B0 -&gt; 1 (pcan) 1 2BLL.1.50.out.S 1B1 -&gt; 1 (pcan) 2 2BLL.1.53.out.S 1B2 -&gt; 1 (pcan) 3 (4) 4DC.1.19.out.S 1B3 -&gt; 1 (pcan) 5 (6) 4DC.1.18.out.S 1B4 -&gt; 1 (pcan) 7 (8) 4DC.1.20.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan2-right-arm","title":"PCAN2: Right arm","text":"boardLabel canDeviceNum boardId firmware 2B0 -&gt; 2 (pcan) 1 2BLL.1.50.out.S 2B1 -&gt; 2 (pcan) 2 2BLL.1.53.out.S 2B2 -&gt; 2 (pcan) 3 (4) 4DC.1.19.out.S 2B3 -&gt; 2 (pcan) 5 (6) 4DC.1.18.out.S 2B4 -&gt; 2 (pcan) 7 (8) 4DC.1.20.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan3-legs","title":"PCAN3: Legs","text":"boardLabel canDeviceNum boardId firmware 3B5 -&gt; 3 (pcan) 5 2BLL.1.51.out.S 3B6 -&gt; 3 (pcan) 6 2BLL.1.51.out.S 3B7 -&gt; 3 (pcan) 7 2BLL.1.51.out.S 3B8 -&gt; 3 (pcan) 8 2BLL.1.51.out.S 3B9 -&gt; 3 (pcan) 9 2BLL.1.51.out.S 3B10 -&gt; 3 (pcan) 10 2BLL.1.51.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v110","title":"iCub V1.1.0","text":"<p>We here describe the CAN-bus networks structure of the iCub v1.1. The version 1.1 uses the CFW board which has 4 canbus lines and 2 esd-can device. Overall we have 6 canbus lines: 4 pcan and 2 ecan. Additionaly, the robot is equipped with MAIS and STRAIN analog sensors.</p> can-bus network configuration file associated robot part pcan-0 icub_head_torso.ini head (entries 0 to 5) and torso (entries 6 to 8) pcan-1 icub_left_arm.ini left_arm (joints 0 to 7) pcan-2 icub_right_arm.ini right_arm (joints 0 to 7) pcan-3 icub_legs.ini left_leg (entries 0 to 5) and right_leg (entries 6 to 11) ecan-0 or ecan-1 icub_left_hand.ini left_arm (joints 8 to 15) ecan-0 or ecan-1 icub_right_hand.ini right_arm (joints 8 to 15) <p>Details on the control boards connected to each network are given below.</p>"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan0-head-and-torso_1","title":"PCAN0: Head and Torso","text":""},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_1","title":"Head","text":"boardLabel canDeviceNum boardId firmware 0B0 -&gt; 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -&gt; 0 (pcan) 3 (4) 4DC.1.15.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_1","title":"Torso","text":"boardLabel canDeviceNum boardId firmware 0B3 -&gt; 0 (pcan) 6 2BLL.1.52.out.S 0B4 -&gt; 0 (pcan) 5 2BLL.1.54.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan1-left-arm_1","title":"PCAN1: Left arm","text":"boardLabel canDeviceNum boardId firmware 1B0 -&gt; 1 (pcan) 1 2BLL.1.50.out.S 1B1 -&gt; 1 (pcan) 2 2BLL.1.57.out.S 1B2 -&gt; 1 (pcan) 3 (4) 4DC.1.19.out.S virtual FT joint sensor -&gt; 1 (pcan) 12 - - - Strain -&gt; 1 (pcan) 13 strain.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#ecan1-left-hand","title":"ECAN1: Left hand","text":"boardLabel canDeviceNum boardId firmware 1B3 -&gt; 1 (ecan) 5 (6) 4DC.1.28.out.S 1B4 -&gt; 1 (ecan) 7 (8) 4DC.1.30.out.S virtual FT joint sensor -&gt; 1 (ecan) 12 - - - MAIS -&gt; 1 (ecan) 14 mais.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan2-right-arm_1","title":"PCAN2: Right arm","text":"boardLabel canDeviceNum boardId firmware 2B0 -&gt; 2 (pcan) 1 2BLL.1.50.out.S 2B1 -&gt; 2 (pcan) 2 2BLL.1.57.out.S 2B2 -&gt; 2 (pcan) 3 (4) 4DC.1.19.out.S virtual FT joint sensor -&gt; 2 (pcan) 12 - - - Strain -&gt; 2 (pcan) 13 strain.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#ecan0-right-hand","title":"ECAN0: Right hand","text":"boardLabel canDeviceNum boardId firmware 2B3 -&gt; 2 (ecan) 5 (6) 4DC.1.28.out.S 2B4 -&gt; 2 (ecan) 7 (8) 4DC.1.30.out.S virtual FT joint sensor -&gt; 2 (ecan) 12 - - - MAIS -&gt; 2 (ecan) 14 mais.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan3-legs_1","title":"PCAN3: Legs","text":"boardLabel canDeviceNum boardId firmware 3B5 -&gt; 3 (pcan) 5 2BLL.1.51.out.S 3B6 -&gt; 3 (pcan) 6 2BLL.1.51.out.S 3B7 -&gt; 3 (pcan) 7 2BLL.1.51.out.S 3B8 -&gt; 3 (pcan) 8 2BLL.1.51.out.S 3B9 -&gt; 3 (pcan) 9 2BLL.1.51.out.S 3B10 -&gt; 3 (pcan) 10 2BLL.1.51.out.S virtual FT joint sensor (left_leg) -&gt; 3 (pcan) 12 - - - Strain (left_leg) -&gt; 3 (pcan) 13 strain.hex virtual FT joint sensor (right_leg) -&gt; 3 (pcan) 11 - - - Strain (right_leg) -&gt; 3 (pcan) 14 strain.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v120","title":"iCub v1.2.0","text":"<p>We here describe the CAN-bus networks structure of the iCub v1.2.0. The version 1.2.0 uses the CFW2 board which has 10 can-Bus lines available.</p> can-bus network configuration file associated robot part 0 icub_head_torso.ini head and torso 1 icub_left_arm.ini left_arm (joints 0 to 7) 2 icub_right_arm.ini right_arm (joints 0 to 7) 3 icub_left_leg.ini left_leg 4 icub_right_leg.ini right_leg 5 icub_left_hand.ini left_arm (joints 8 to 15) 6 icub_right_hand.ini right_arm (joints 8 to 15) 7 skinlefthand.ini left_hand skin 8 skinrighthand.ini right_hand skin <p>Details on the control boards connected to each network are given in the following.</p>"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can0-head-and-torso","title":"CFW2CAN0: Head and Torso","text":""},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_2","title":"Head","text":"boardLabel canDeviceNum boardId firmware 0B0 -&gt; 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -&gt; 0 (pcan) 3 (4) 4DC.1.15.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_2","title":"Torso","text":"boardLabel canDeviceNum boardId firmware 0B3 -&gt; 0 (pcan) 6 2BLL.1.52.out.S 0B4 -&gt; 0 (pcan) 5 2BLL.1.54.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can1-left-arm","title":"CFW2CAN1: Left arm","text":"boardLabel canDeviceNum boardId firmware 1B0 -&gt; 1 (cfw2can) 1 2BLL.1.50.out.S 1B1 -&gt; 1 (cfw2can) 2 2BLL.1.57.out.S 1B2 -&gt; 1 (cfw2) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -&gt; 1 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -&gt; 1 (cfw2can) 11 - - - Strain -&gt; 1 (cfw2can) 13 strain.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can5-left-hand","title":"CFW2CAN5: Left hand","text":"boardLabel canDeviceNum boardId firmware 1B3 -&gt; 5 (cfw2can) 5 (6) 4DC.1.28.out.S 1B4 -&gt; 5 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -&gt; 5 (cfw2can) 14 mais.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can2-right-arm","title":"CFW2CAN2: Right arm","text":"boardLabel canDeviceNum boardId firmware 2B0 -&gt; 2 (cfw2can) 1 2BLL.1.50.out.S 2B1 -&gt; 2 (cfw2can) 2 2BLL.1.57.out.S 2B2 -&gt; 2 (cfw2can) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -&gt; 2 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -&gt; 2 (cfw2can) 11 - - - Strain -&gt; 2 (cfw2can) 13 strain.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can6-right-hand","title":"CFW2CAN6: Right hand","text":"boardLabel canDeviceNum boardId firmware 2B3 -&gt; 6 (cfw2can) 5 (6) 4DC.1.28.out.S 2B4 -&gt; 6 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -&gt; 6 (cfw2can) 14 mais.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can3-left-leg","title":"CFW2CAN3: left leg","text":"boardLabel canDeviceNum boardId firmware 3B5 -&gt; 3 (cfw2can) 5 2BLL.1.51.out.S 3B6 -&gt; 3 (cfw2can) 6 2BLL.1.51.out.S 3B7 -&gt; 3 (cfw2can) 7 2BLL.1.51.out.S virtual FT joint sensor -&gt; 3 (cfw2can) 12 - - - Strain -&gt; 3 (cfw2can) 13 strain.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can4-right-leg","title":"CFW2CAN4: right leg","text":"boardLabel canDeviceNum boardId firmware 3B8 -&gt; 4 (cfw2can) 8 2BLL.1.51.out.S 3B9 -&gt; 4 (cfw2can) 9 2BLL.1.51.out.S 3B10 -&gt; 4 (cfw2can) 10 2BLL.1.51.out.S virtual FT joint sensor -&gt; 4 (cfw2can) 11 - - - Strain -&gt; 4 (cfw2can) 14 strain.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can7-skin-left-hand","title":"CFW2CAN7: Skin Left hand","text":"boardLabel canDeviceNum boardId firmware 1B7 -&gt; 7 (cfw2can) 15 skin.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can8-skin-right-hand","title":"CFW2CAN8: Skin Right hand","text":"boardLabel canDeviceNum boardId firmware 2B7 -&gt; 8 (cfw2can) 15 skin.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v130","title":"iCub v1.3.0","text":"<p>We here describe the CAN-bus networks structure of the iCub v1.3.0. The version 1.3.0 uses the CFW2 board which has 10 can-Bus lines available.</p> can-bus network configuration file associated robot part 0 icub_head_torso.ini head and torso 1 icub_left_arm.ini left_arm (joints 0 to 7) 2 icub_right_arm.ini right_arm (joints 0 to 7) 3 icub_left_leg.ini left_leg 4 icub_right_leg.ini right_leg 5 icub_left_hand.ini left_arm (joints 8 to 15) 6 icub_right_hand.ini right_arm (joints 8 to 15) 7 skinlefthand.ini left_hand skin 8 skinrighthand.ini right_hand skin <p>Details on the control boards connected to each network are given in the following.</p>"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can0-head-and-torso_1","title":"CFW2CAN0: Head and Torso","text":""},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_3","title":"Head","text":"boardLabel canDeviceNum boardId firmware 0B0 -&gt; 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -&gt; 0 (pcan) 3 (4) 4DC.1.15.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_3","title":"Torso","text":"boardLabel canDeviceNum boardId firmware 0B3 -&gt; 0 (pcan) 6 2BLL.1.52.out.S 0B4 -&gt; 0 (pcan) 5 2BLL.1.54.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can1-left-arm_1","title":"CFW2CAN1: Left arm","text":"boardLabel canDeviceNum boardId firmware 1B0 -&gt; 1 (cfw2can) 1 2BLL.1.50.out.S 1B1 -&gt; 1 (cfw2can) 2 2BLL.1.57.out.S 1B2 -&gt; 1 (cfw2) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -&gt; 1 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -&gt; 1 (cfw2can) 11 - - - Strain -&gt; 1 (cfw2can) 13 strain.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can5-left-hand_1","title":"CFW2CAN5: Left hand","text":"boardLabel canDeviceNum boardId firmware 1B3 -&gt; 5 (cfw2can) 5 (6) 4DC.1.28.out.S 1B4 -&gt; 5 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -&gt; 5 (cfw2can) 14 mais.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can2-right-arm_1","title":"CFW2CAN2: Right arm","text":"boardLabel canDeviceNum boardId firmware 2B0 -&gt; 2 (cfw2can) 1 2BLL.1.50.out.S 2B1 -&gt; 2 (cfw2can) 2 2BLL.1.57.out.S 2B2 -&gt; 2 (cfw2can) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -&gt; 2 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -&gt; 2 (cfw2can) 11 - - - Strain -&gt; 2 (cfw2can) 13 strain.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can6-right-hand_1","title":"CFW2CAN6: Right hand","text":"boardLabel canDeviceNum boardId firmware 2B3 -&gt; 6 (cfw2can) 5 (6) 4DC.1.28.out.S 2B4 -&gt; 6 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -&gt; 6 (cfw2can) 14 mais.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can3-left-leg_1","title":"CFW2CAN3: left leg","text":"boardLabel canDeviceNum boardId firmware 3B5 -&gt; 3 (cfw2can) 5 2BLL.1.51.out.S 3B6 -&gt; 3 (cfw2can) 6 2BLL.1.51.out.S 3B7 -&gt; 3 (cfw2can) 7 2BLL.1.51.out.S virtual FT joint sensor -&gt; 3 (cfw2can) 12 - - - Strain -&gt; 3 (cfw2can) 13 strain.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can4-right-leg_1","title":"CFW2CAN4: right leg","text":"boardLabel canDeviceNum boardId firmware 3B8 -&gt; 4 (cfw2can) 8 2BLL.1.51.out.S 3B9 -&gt; 4 (cfw2can) 9 2BLL.1.51.out.S 3B10 -&gt; 4 (cfw2can) 10 2BLL.1.51.out.S virtual FT joint sensor -&gt; 4 (cfw2can) 11 - - - Strain -&gt; 4 (cfw2can) 14 strain.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can7-skin-left-hand_1","title":"CFW2CAN7: Skin Left hand","text":"boardLabel canDeviceNum boardId firmware 1B7 (HAND) -&gt; 7 (cfw2can) 14 skin.hex 1B9 (FOREARM UPPER) -&gt; 7 (cfw2can) 13 skin.hex 1B8 (FOREARM LOWER) -&gt; 7 (cfw2can) 12 skin.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can8-skin-right-hand_1","title":"CFW2CAN8: Skin Right hand","text":"boardLabel canDeviceNum boardId firmware 2B7 (HAND) -&gt; 8 (cfw2can) 14 skin.hex 2B9 (FOREARM UPPER) -&gt; 8 (cfw2can) 13 skin.hex 2B8 (FOREARM LOWER) -&gt; 8 (cfw2can) 12 skin.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v1x1-x1","title":"iCub v1.x.1 ( x&gt;1 )","text":"<p>We here describe the CAN-bus networks structure of the iCub v1.x.1 ( x&gt;1 ). The version 1.x.1 uses the Head V2. For CAN-bus network different from NET0 refer to relative iCub version</p> can-bus network configuration file associated robot part 0 icub_head_torso.ini head and torso <p>Details on the control boards connected to network 0 are given in the following.</p>"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can0-head-and-torso_2","title":"CFW2CAN0: Head and Torso","text":""},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_4","title":"Head","text":"boardLabel canDeviceNum boardId firmware 0B0 -&gt; 0 (cfw2can) 1 2BLLDC.1.62.out.S 0B1 -&gt; 0 (cfw2can) 2 (3) 4DC.2.15.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_4","title":"Torso","text":"boardLabel canDeviceNum boardId firmware 0B3 -&gt; 0 (cfw2can) 6 2BLL.1.52.out.S 0B4 -&gt; 0 (cfw2can) 5 2BLL.1.54.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v2","title":"iCub v2","text":"<p>We here describe the CAN-bus networks structure of the iCub v2</p>"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can0-head-and-torso_3","title":"CFW2CAN0: Head and Torso","text":""},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_5","title":"Head","text":"boardLabel canDeviceNum boardId firmware 0B0 -&gt; 0 (cfw2can) 1 2BLLDC.1.62.out.S 0B1 -&gt; 0 (cfw2can) 2 (3) 4DC.2.15.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_5","title":"Torso","text":"boardLabel canDeviceNum boardId firmware 0B3 -&gt; 0 (cfw2can) 6 2BLL.2.52.out.S 0B4 -&gt; 0 (cfw2can) 5 2BLL.2.54.out.S 6SG (optional) -&gt; 0 (cfw2can) 14 6sg.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can1-left-arm_2","title":"CFW2CAN1: Left arm","text":"boardLabel canDeviceNum boardId firmware 1B0 -&gt; 1 (cfw2can) 1 2BLL.2.50.out.S 1B1 -&gt; 1 (cfw2can) 2 2BLL.2.57.out.S 1B2 -&gt; 1 (cfw2) 3 (4) 4DC.2.19.out.S virtual FT joint sensor (shoulder) -&gt; 1 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -&gt; 1 (cfw2can) 11 - - - Strain -&gt; 1 (cfw2can) 13 strain.hex 6SG Shoulder (optional) -&gt; 1 (cfw2can) 9 6sg.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can5-left-hand_2","title":"CFW2CAN5: Left hand","text":"boardLabel canDeviceNum boardId firmware 1B3 -&gt; 5 (cfw2can) 5 (6) 4DC.2.28.out.S 1B4 -&gt; 5 (cfw2can) 7 (8) 4DC.2.30.out.S MAIS -&gt; 5 (cfw2can) 14 mais.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can2-right-arm_2","title":"CFW2CAN2: Right arm","text":"boardLabel canDeviceNum boardId firmware 2B0 -&gt; 2 (cfw2can) 1 2BLL.2.50.out.S 2B1 -&gt; 2 (cfw2can) 2 2BLL.2.57.out.S 2B2 -&gt; 2 (cfw2can) 3 (4) 4DC.2.19.out.S virtual FT joint sensor (shoulder) -&gt; 2 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -&gt; 2 (cfw2can) 11 - - - Strain -&gt; 2 (cfw2can) 13 strain.hex 6SG Shoulder (optional) -&gt; 1 (cfw2can) 9 6sg.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can6-right-hand_2","title":"CFW2CAN6: Right hand","text":"boardLabel canDeviceNum boardId firmware 2B3 -&gt; 6 (cfw2can) 5 (6) 4DC.1.28.out.S 2B4 -&gt; 6 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -&gt; 6 (cfw2can) 14 mais.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can3-left-leg_2","title":"CFW2CAN3: left leg","text":"boardLabel canDeviceNum boardId firmware 3B5 -&gt; 3 (cfw2can) 5 2BLL.2.51.out.S 3B6 -&gt; 3 (cfw2can) 6 2BLL.2.51.out.S 3B7 -&gt; 3 (cfw2can) 7 2BLL.2.51.out.S virtual FT joint sensor -&gt; 3 (cfw2can) 12 - - - Strain -&gt; 3 (cfw2can) 13 strain.hex 6SG Upper Leg (optional) -&gt; 3 (cfw2can) 1 6sg.hex 6SG Lower Leg (optional) -&gt; 3 (cfw2can) 2 6sg.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can4-right-leg_2","title":"CFW2CAN4: right leg","text":"boardLabel canDeviceNum boardId firmware 3B8 -&gt; 4 (cfw2can) 8 2BLL.2.51.out.S 3B9 -&gt; 4 (cfw2can) 9 2BLL.2.51.out.S 3B10 -&gt; 4 (cfw2can) 10 2BLL.2.51.out.S virtual FT joint sensor -&gt; 4 (cfw2can) 11 - - - Strain -&gt; 4 (cfw2can) 14 strain.hex 6SG Upper Leg (optional) -&gt; 4 (cfw2can) 1 6sg.hex 6SG Lower Leg (optional) -&gt; 4 (cfw2can) 2 6sg.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can7-skin-left-arm","title":"CFW2CAN7: Skin Left arm","text":"boardLabel canDeviceNum boardId firmware 1B7 (HAND) -&gt; 7 (cfw2can) 14 skin.hex 1B8 (LEFT LOWER FOREARM) -&gt; 7 (cfw2can) 12 skin.hex 1B9 (LEFT UPPER FOREARM) -&gt; 7 (cfw2can) 13 skin.hex 1B10 (LEFT UPPER EXTERNAL) -&gt; 7 (cfw2can) 10 skin.hex 1B11 (LEFT UPPER BOTTOM) -&gt; 7 (cfw2can) 11 skin.hex 1B12 (LEFT UPPER INTERNAL) -&gt; 7 (cfw2can) 9 skin.hex 1B13 (LEFT LOWER UPPERARM) -&gt; 7 (cfw2can) 8 skin.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can8-skin-right-arm","title":"CFW2CAN8: Skin Right arm","text":"boardLabel canDeviceNum boardId firmware 2B7 (HAND) -&gt; 8 (cfw2can) 14 skin.hex 2B8 (LEFT LOWER FOREARM) -&gt; 8 (cfw2can) 12 skin.hex 2B9 (LEFT UPPER FOREARM) -&gt; 8 (cfw2can) 13 skin.hex 2B10 (RIGHT UPPER EXTERNAL) -&gt; 8 (cfw2can) 10 skin.hex 2B11 (RIGHT UPPER BOTTOM) -&gt; 8 (cfw2can) 11 skin.hex 2B12 (RIGHT UPPER INTERNAL) -&gt; 8 (cfw2can) 9 skin.hex 2B13 (RIGHT LOWER UPPERARM) -&gt; 8 (cfw2can) 8 skin.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can9-skin-torso","title":"CFW2CAN9: Skin Torso","text":"boardLabel canDeviceNum boardId firmware 0B7 -&gt; 9 (cfw2can) 7 skin.hex 0B8 -&gt; 9 (cfw2can) 8 skin.hex 0B9 -&gt; 9 (cfw2can) 9 skin.hex 0B10 -&gt; 9 (cfw2can) 10 skin.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v2-talking-head","title":"iCub v2 - Talking Head","text":"<p>We here describe the CAN-bus networks structure of the iCub v2 - Talking Head</p>"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can0-head-and-torso_4","title":"CFW2CAN0: Head and Torso","text":""},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_6","title":"Head","text":"boardLabel canDeviceNum boardId firmware 0B0 -&gt; 0 (cfw2can) 1 2BLLDC.1.62.out.S 0B1 -&gt; 0 (cfw2can) 2 (3) 4DC.2.15.out.S 0B7 -&gt; 0 (cfw2can) 7 (8) 4DC.2.15.out.S 0B9 -&gt; 0 (cfw2can) 9 (10) 4DC.1.11.out.S"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_6","title":"Torso","text":"boardLabel canDeviceNum boardId firmware 0B3 -&gt; 0 (cfw2can) 6 2BLL.2.52.out.S 0B4 -&gt; 0 (cfw2can) 5 2BLL.2.54.out.S 6SG (optional) -&gt; 0 (cfw2can) 14 6sg.hex"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-25-wiring-32","title":"iCub 2.5 - Wiring &lt;= 3.2","text":"<p>We here describe the ETH and CAN-bus firmware association structure of the iCub v2.5 (Wiring &lt;= 3.2)</p> IP address Board Name(firmware) Atatched CAN Boards(firmware) Services 10.0.1.1 EB1 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN1:32FOC(2foc.hex) CAN1:4STRAIN(strain.hex) CAN2:13 MC: left arm joints 0 -&gt; 3  STRAIN 10.0.1.2 EB2 (ems.hex) MC4(4DC.2.19.out.S) CAN1:3MC4(4DC.2.28.out.S) CAN1:5MC4(4DC.2.30.out.S) CAN1:7MAIS(mais.hex) CAN1:14MTB(mtb.hex) CAN2:8MTB(mtb.hex) CAN2:9MTB(mtb.hex) CAN2:10MTB(mtb.hex) CAN2:11MTB(mtb.hex) CAN2:12MTB(mtb.hex) CAN2:13MTB(mtb.hex) CAN2:14 MC: left arm joints 4 -&gt; 11  MAIS left hand  SKIN left arm  INERTIALS: left arm 10.0.1.3 EB3 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN1:32FOC(2foc.hex) CAN1:4STRAIN(strain.hex) CAN2:13 MC: right arm joints 0 -&gt; 3STRAIN 10.0.1.4 EB4 (ems.hex) MC4(4DC.2.19.out.S) CAN1:3MC4(4DC.2.28.out.S) CAN1:5MC4(4DC.2.30.out.S) CAN1:7MAIS(mais.hex) CAN1:14MTB(mtb.hex) CAN2:8MTB(mtb.hex) CAN2:9MTB(mtb.hex) CAN2:10MTB(mtb.hex) CAN2:11MTB(mtb.hex) CAN2:12MTB(mtb.hex) CAN2:13MTB(mtb.hex) CAN2:14 MC: right arm joints 4 -&gt; 11  MAIS right hand  SKIN right arm  INERTIALS: right arm 10.0.1.5 EB5 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:32FOC(2foc.hex) CAN1:4 MC: torso joints 0 -&gt; 2 10.0.1.6 EB6 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN1:32FOC(2foc.hex) CAN1:4STRAIN(strain.hex) CAN2:13 MC: left leg joints 0 -&gt; 3STRAIN 10.0.1.7 EB7 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN2:1 MC: left leg joints 4 -&gt; 5STRAIN 10.0.1.8 EB8 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN1:32FOC(2foc.hex) CAN1:4STRAIN(strain.hex) CAN2:13 MC: right leg joints 0 -&gt; 3STRAIN 10.0.1.9 EB9 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN2:1 MC: right leg joints 4 -&gt; 5STRAIN 10.0.1.10 EB10 (ems.hex) MTB(mtb.hex) CAN1:1MTB(mtb.hex) CAN1:2MTB(mtb.hex) CAN1:3MTB(mtb.hex) CAN1:4MTB(mtb.hex) CAN1:5MTB(mtb.hex) CAN1:6MTB(mtb.hex) CAN1:7MTB(mtb.hex) CAN2:8MTB(mtb.hex) CAN2:9MTB(mtb.hex) CAN2:10MTB(mtb.hex) CAN2:11MTB(mtb.hex) CAN2:12MTB(mtb.hex) CAN2:13 SKIN: left legINERTIALS: left leg 10.0.1.11 EB11 (ems.hex) MTB(mtb.hex) CAN1:1MTB(mtb.hex) CAN1:2MTB(mtb.hex) CAN1:3MTB(mtb.hex) CAN1:4MTB(mtb.hex) CAN1:5MTB(mtb.hex) CAN1:6MTB(mtb.hex) CAN1:7MTB(mtb.hex) CAN2:8MTB(mtb.hex) CAN2:9MTB(mtb.hex) CAN2:10MTB(mtb.hex) CAN2:11MTB(mtb.hex) CAN2:12MTB(mtb.hex) CAN2:13 SKIN: right legINERTIALS: right leg <p></p>"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-25-wiring-32_1","title":"iCub 2.5 - Wiring &gt; 3.2","text":"<p>We here describe the ETH and CAN-bus firmware association structure of the iCub v2.5 (Wiring &gt; 3.2)</p> IP address Board Name(firmware) Atatched CAN Boards(firmware) Services 10.0.1.1 EB1 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN1:32FOC(2foc.hex) CAN1:4STRAIN2(strain2.hex) CAN2:13 MC: left arm joints 0 -&gt; 3  STRAIN2 10.0.1.3 EB3 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN1:32FOC(2foc.hex) CAN1:4STRAIN2(strain2.hex) CAN2:13 MC: right arm joints 0 -&gt; 3STRAIN2 10.0.1.5 EB5 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:32FOC(2foc.hex) CAN1:4 MC: torso joints 0 -&gt; 2 10.0.1.6 EB6 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN1:32FOC(2foc.hex) CAN1:4STRAIN2(strain2.hex) CAN2:13 MC: left leg joints 0 -&gt; 3STRAIN2 10.0.1.7 EB7 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN2:1STRAIN2(strain2.hex) CAN2:13 MC: left leg joints 4 -&gt; 5STRAIN2 10.0.1.8 EB8 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN1:32FOC(2foc.hex) CAN1:4STRAIN2(strain2.hex) CAN2:13 MC: right leg joints 0 -&gt; 3STRAIN2 10.0.1.9 EB9 (ems.hex) 2FOC(2foc.hex) CAN1:12FOC(2foc.hex) CAN1:22FOC(2foc.hex) CAN2:1STRAIN2(strain2.hex) CAN2:13 MC: right leg joints 4 -&gt; 5STRAIN2 10.0.1.10 EB10 (ems.hex) MTB4(mtb4.hex) CAN1:1MTB4(mtb4.hex) CAN1:2MTB4(mtb4.hex) CAN1:3MTB4(mtb4.hex) CAN1:4MTB4(mtb4.hex) CAN1:5MTB4(mtb4.hex) CAN1:6MTB4(mtb4.hex) CAN1:7MTB4(mtb4.hex) CAN2:8MTB4(mtb4.hex) CAN2:9MTB4(mtb4.hex) CAN2:10MTB4(mtb4.hex) CAN2:11MTB4(mtb4.hex) CAN2:12MTB4(mtb4.hex) CAN2:13 SKIN: left legINERTIALS: left leg 10.0.1.11 EB11 (ems.hex) MTB4(mtb4.hex) CAN1:1MTB4(mtb4.hex) CAN1:2MTB4(mtb4.hex) CAN1:3MTB4(mtb4.hex) CAN1:4MTB4(mtb4.hex) CAN1:5MTB4(mtb4.hex) CAN1:6MTB4(mtb4.hex) CAN1:7MTB4(mtb4.hex) CAN2:8MTB4(mtb4.hex) CAN2:9MTB4(mtb4.hex) CAN2:10MTB4(mtb4.hex) CAN2:11MTB4(mtb4.hex) CAN2:12MTB4(mtb4.hex) CAN2:13 SKIN: right legINERTIALS: right leg 10.0.1.20 EB20 (mc4plus.hex)MC4PLUS No CAN boards MC: head joints 0 -&gt; 1 10.0.1.21 EB21 (mc4plus.hex)MC4PLUS RFE(rfe.hex) CAN1:1 MC: head joints 2 -&gt; 5INERTIALS: head 10.0.1.22 EB22 (mc4plus.hex)MC4PLUS MTB4(mtb4.hex) CAN1:7MTB4(mtb4.hex) CAN1:8MTB4(mtb4.hex) CAN1:9MTB4(mtb4.hex) CAN1:10 SKIN: torso 10.0.1.24 EB24 (mc4plus.hex)MC4PLUS MTB4(mtb4.hex) CAN1:8MTB4(mtb4.hex) CAN1:9MTB4(mtb4.hex) CAN1:10MTB4(mtb4.hex) CAN1:11MTB4(mtb4.hex) CAN1:12MTB4(mtb4.hex) CAN1:13MTB4(mtb4.hex) CAN1:14 MC: left arm joints 4 -&gt; 7  SKIN: left arm 10.0.1.25 EB25 (mc4plus.hex)MC4PLUS MAIS(mais.hex) CAN1:14 MC: left arm joints 8 -&gt; 11 10.0.1.26 EB26 (mc4plus.hex)MC4PLUS MAIS(mais.hex) CAN1:14 MC: left arm joints 12 -&gt; 15 10.0.1.27 EB27 (mc4plus.hex)MC4PLUS MTB4(mtb4.hex) CAN1:8MTB4(mtb4.hex) CAN1:9MTB4(mtb4.hex) CAN1:10MTB4(mtb4.hex) CAN1:11MTB4(mtb4.hex) CAN1:12MTB4(mtb4.hex) CAN1:13MTB4(mtb4.hex) CAN1:14 MC: right arm joints 4 -&gt; 7  SKIN: right arm 10.0.1.28 EB28 (mc4plus.hex)MC4PLUS MAIS(mais.hex) CAN1:14 MC: right arm joints 8 -&gt; 11 10.0.1.29 EB29 (mc4plus.hex)MC4PLUS MAIS(mais.hex) CAN1:14 MC: right arm joints 12 -&gt; 15"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/","title":"Automatic Firmware Update","text":"<p>This guide explains how to perform an automatic firmware update for iCub robots using the <code>manageFWrobot.py</code> script, which is located in <code>robotology-superbuild/src/icub-firmware-build/scripts/</code>.</p>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#1-automated-firmware-update-afu-using-provided-scripts","title":"1. Automated Firmware Update (AFU) Using Provided Scripts","text":"<p>The recommended way to perform a firmware update is to use the provided bash scripts in the <code>scripts</code> directory. These scripts simplify the process by automatically selecting the correct configuration files and options for your robot.</p>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#11-navigate-to-the-scripts-directory","title":"1.1 Navigate to the Scripts Directory","text":"<p>Open a terminal and change directory to:</p> <pre><code>cd /path/to/robotology-superbuild/src/icub-firmware-build/scripts\n</code></pre>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#12-update-a-specific-body-part","title":"1.2 Update a Specific Body Part","text":"<ul> <li>To update a specific body part, run the corresponding script. For example, to update the left arm:</li> </ul> <pre><code>./FirmwareUpdater.script.update.left_arm.sh\n</code></pre> <ul> <li>Scripts are available for: <code>head</code>, <code>face</code>, <code>left_arm</code>, <code>right_arm</code>, <code>torso</code>, <code>left_leg</code>, <code>right_leg</code>, and for all parts (<code>all</code>).</li> </ul>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#13-update-all-boards-of-a-specific-type","title":"1.3 Update All Boards of a Specific Type","text":"<ul> <li>To update all boards of a certain type (e.g., all FOC boards):</li> </ul> <pre><code>./FirmwareUpdater.script.update.all.foc.sh\n</code></pre> <ul> <li>Similarly, use <code>FirmwareUpdater.script.update.all.ems4.sh</code> for all EMS4 boards, etc.</li> </ul>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#14-customizing-or-excluding-board-types","title":"1.4 Customizing or Excluding Board Types","text":"<ul> <li>To exclude a board type or further customize the update, copy one of the scripts (e.g., <code>FirmwareUpdater.script.update.left_arm.sh</code>) and edit the command line:<ul> <li>Use the <code>-xb &lt;board_type&gt;</code> option to exclude a board type (e.g., <code>-xb ems4</code>).</li> <li>Change the <code>-p &lt;part&gt;</code> or <code>-b &lt;board_type&gt;</code> options as needed.</li> <li>Example to update left_leg but exclude EMS4 boards:</li> </ul> </li> </ul> <pre><code>./manageFWrobot.py -n `yarp resource --from network.$YARP_ROBOT_NAME.xml | grep ^\\\".*$ | sed 's/\"//g'` -f ../info/firmware.info.xml -p left_leg -a update -xb ems4\n</code></pre> <ul> <li>Save your custom script and run it as above.</li> </ul>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#15-using-action-oriented-scripts-info-query-verify-update-program","title":"1.5 Using Action-Oriented Scripts (info, query, verify, update, program)","text":"<p>In addition to part- or board-specific scripts, the <code>scripts</code> directory also provides action-oriented scripts that let you perform a specific action (such as info, query, verify, update, or program) on all or selected boards/parts.</p>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#examples","title":"Examples:","text":"<ul> <li>To show board and firmware info for all parts:</li> </ul> <pre><code>./FirmwareUpdater.script.info.all.sh\n</code></pre> <ul> <li>To query the current firmware versions on all boards:</li> </ul> <pre><code>./FirmwareUpdater.script.query.all.sh\n</code></pre> <ul> <li>To verify that all boards have the required firmware version:</li> </ul> <pre><code>./FirmwareUpdater.script.verify.all.sh\n</code></pre> <ul> <li>To update all boards (only if not up-to-date):</li> </ul> <pre><code>./FirmwareUpdater.script.update.all.sh\n</code></pre> <ul> <li>To force programming of all boards (regardless of current version):</li> </ul> <pre><code>./FirmwareUpdater.script.program.all.sh\n</code></pre> <p>You can also find scripts for specific parts and actions, such as:</p> <pre><code>./FirmwareUpdater.script.info.left_arm.sh\n./FirmwareUpdater.script.query.right_leg.sh\n./FirmwareUpdater.script.verify.head.sh\n</code></pre> <p>These scripts are named using the pattern: <code>FirmwareUpdater.script.&lt;action&gt;.&lt;part or all&gt;.sh</code></p> <p>Use the script that matches the action and part you want to operate on.</p> <p>Sidenotes</p> <ul> <li>Always use the provided scripts unless you have a special need. If modifications are necessary, ensure you thoroughly understand the implications and double-check all parameters.</li> <li>Do not edit scripts unless you understand the options.</li> <li>Check logs in the <code>../logs/</code> directory after running a script.</li> </ul> <p>For advanced customization, see the Step-by-Step Procedure below.</p>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#2-automatic-firmware-update-afu-by-launching-the-managefwrobotpy","title":"2. Automatic Firmware Update (AFU) by launching the manageFWrobot.py","text":"<p>If you need more control or want to understand the underlying process, you can use the <code>manageFWrobot.py</code> script directly.</p>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure you have a working Python 3 environment.</li> <li>Make sure the robot is powered on and connected to the network.</li> <li>You have the correct network and firmware info XML files for your robot.</li> </ul>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#step-by-step-procedure","title":"Step-by-Step Procedure","text":""},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#21-prepare-the-xml-files","title":"2.1 Prepare the XML Files","text":"<ul> <li>Network XML file (<code>-n</code>): Describes the robot's board configuration (e.g., <code>network.iCubGenova02.xml</code>).   Location: <code>robotology-superbuild/src/robots-configuration/</code></li> <li>Firmware info XML file (<code>-f</code>): Lists firmware versions and file paths (e.g., <code>firmware.info.xml</code>).   Location: <code>robotology-superbuild/src/icub-firmware-build/info/</code></li> </ul> <p>Note</p> <p>Always verify that the firmware info file contains the correct versions and paths for your update.</p>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#22-navigate-to-the-scripts-directory","title":"2.2 Navigate to the Scripts Directory","text":"<p>Open a terminal and change directory to:</p> <pre><code>cd /path/to/robotology-superbuild/src/icub-firmware-build/scripts\n</code></pre>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#23-run-the-firmware-updater-script","title":"2.3 Run the Firmware Updater Script","text":"<p>The general command structure is:</p> <pre><code>./manageFWrobot.py -n &lt;network_file.xml&gt; -f &lt;firmware_info.xml&gt; -p &lt;part&gt; -b &lt;board_type&gt; -a &lt;action&gt;\n</code></pre> <p>Example</p> <pre><code>./manageFWrobot.py -n network.iCubGenova02.xml -f ../info/firmware.info.xml -p left_leg -b foc -a update\n</code></pre>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#example-with-parallel-updates","title":"Example with Parallel Updates","text":"<p>For faster firmware updates when multiple CAN boards of the same type are present on the same Ethernet connection:</p> <pre><code>./manageFWrobot.py -n network.iCubGenova02.xml -f ../info/firmware.info.xml -p left_leg -b foc -a update --parallel\n</code></pre>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#option-definitions","title":"Option Definitions","text":"<ul> <li><code>-n</code> : Path to the network XML file describing the robot's boards.</li> <li><code>-f</code> : Path to the firmware info XML file with firmware versions and file locations.</li> <li><code>-p</code> : The robot part to operate on (e.g., <code>face</code>, <code>left_arm</code>, <code>right_leg</code>, <code>all</code>).</li> <li><code>-b</code> : The board type to target (e.g., <code>foc</code>, <code>ems4</code>, <code>all</code>).</li> <li><code>-a</code> : The action to perform. Common values:</li> <li><code>info</code> : Show board and firmware info.</li> <li><code>query</code> : Query current firmware versions on the boards.</li> <li><code>verify</code> : Check if boards have the required firmware version.</li> <li><code>update</code> : Update firmware only if the board is not up-to-date (recommended).</li> <li><code>program</code> : Force firmware programming regardless of current version.</li> <li><code>-xb</code> : (Optional) Exclude a specific board type from the operation.</li> <li><code>-v</code> : (Optional) Set verbosity level (0-3).</li> <li><code>--parallel</code> : (Optional) Enable parallel updating of CAN boards of the same type under the same Ethernet connection. This can significantly speed up the firmware update process when multiple boards of the same type are present on the same network segment.</li> </ul> <p>Tip</p> <p>Favor the <code>update</code> action over <code>program</code> to avoid unnecessary reprogramming. The <code>update</code> action checks versions and only updates when needed.</p> <p>Note: The <code>--parallel</code> option is particularly useful when updating multiple boards of the same type (e.g., multiple FOC boards) that are connected to the same Ethernet interface, as it allows simultaneous firmware updates instead of sequential processing.</p>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#monitor-the-output","title":"Monitor the Output","text":"<ul> <li>The script will print progress and results to the terminal.</li> <li>If errors occur, check the XML files and connections.</li> </ul>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#additional-help","title":"Additional Help","text":"<p>To see all available options and their descriptions, run:</p> <pre><code>python3 manageFWrobot.py --help\n</code></pre>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Ensure all XML files are correct and accessible.</li> <li>Check network connectivity to the robot.</li> <li>Use higher verbosity (<code>-v 2</code> or <code>-v 3</code>) for more detailed logs.</li> </ul>"},{"location":"icub_firmware/automatic_firmware_update_runbook/automatic_firmware_update_runbook/#references","title":"References","text":"<ul> <li>FirmwareUpdater Online Documentation</li> <li>FirmwareUpdater Full Details (GitHub)</li> </ul> <p>Enjoy the firmware update process! If you encounter issues, consult the documentation or seek support from the iCub community.</p>"},{"location":"icub_firmware/canLoader/canLoader/","title":"CanLoader","text":"<p>Missing</p> <p><code>Canloader</code> is no longer available since this overhaul of the codebase.</p>"},{"location":"icub_firmware/canLoader/canLoader/#canloader","title":"CanLoader","text":"<p>The canLoader application allows flashing the firmware of the dsp boards using the canbus interface. It can be also used to determine which boards are up and running. The canLoader allows to either use plx canbus boards or esd canbus boards (actually any device implementing an ICanBus interface in YARP). Detailed CANLoader protocol.</p>"},{"location":"icub_firmware/canLoader/canLoader/#steps","title":"Steps","text":"<ul> <li>Determine the type of device you want to use. If you are on the pc104 this will probably be the cfw2 device.</li> <li>Make sure you have compiled the appropriate canbus device (pcan,cfw2 or ecan) (read Compilation on the pc104).</li> <li>Make sure the canLoader program has been compiled. In the main iCub project, this is done automatically if you have the gtk/gtkmm libraries.</li> <li>Run the canLoader program. If you ssh into the pc104 make sure you use the -X option to redirect the graphic output to your local machine.</li> <li>Select the device you use (cfw2/pcan/ecan) in the text box (for historical reason default is ecan).</li> <li>Select the can network you want to probe (0 to 9), and hit connect. See below for a list of the can networks.</li> </ul> <p>You should see a list of boards that are available in the network you have selected, their id, the version of the firmware, the build number and a text description. If a card is listed here it means that it was able to reply to the broadcast message from the canLoader (a good start).</p>"},{"location":"icub_firmware/canLoader/canLoader/#device-type","title":"Device Type","text":"<p>The device type is the software module that wraps the can bus device you are using.</p> <ul> <li>On the first version of iCub the pc104 has a plx can bus device, wrapped by the pcan software module.</li> <li>On iCub 1.1 the pc104 also mounts two esd can bus devices, which are wrapped by the ecan software module. In this case the device module you use depends on  - The can bus network (or body part) your want to access.</li> <li>On iCub 1.1.1 (and later) the pc104 mounts up to 9 can bus devices, which are wrapped by the cfw2 software module.</li> </ul>"},{"location":"icub_firmware/canLoader/canLoader/#standard-firmware-update-dsp","title":"Standard firmware update (DSP)","text":"<p>The firmware upgrade of the whole robot is performed using a script based on a command line version of the CanLoader module. Before you try to use this script please check that this module is compiled on the pc104. You should also make sure that the hardware modules it needs (controlboard, canmotioncontrol, ecan/pcan/cfw2can) are compiled and liked correctly (this is usually the case on the robot pc104).</p> <p>Please, notice that the firmware upgrade is delicate procedure which changes one of the core parts of the iCub robot software (and therefore requires a corresponding update of the yarp and iCub modules). If you decide to perform a firmware upgrade, be aware that this might change the robot motor behaviour quite a lot. Nevertheless, a firmware upgrade is always recommended because it usually corresponds to improvements in the control board performances. Finally, remember to perform the firmware update with your robot in a 'clean' state (i.e. control boards have been just turned on, and iCubinterface has not run yet).</p> <p>Here are the steps to perform the firmware update:</p> <ul> <li>Connect to the PC104.</li> <li>Go to the $ICUB_ROOT directory and update it (svn update or git pull, depending on your installation)</li> <li>Go to the $ICUB_DIR directoy and recompile the icub-main repository</li> <li>If the icub-firmware-build directory does not exists, create it with: git clone robotology/icub-firmware-build</li> <li>If it already exists, update it with git pull.</li> <li>Launch the firmware update script (icub-firmware-build/updateRobot.sh):</li> </ul> <p>The script will automatically retrieve the robot configuration from the firmwareUpdate.txt file which is located in the robot configuration folder.</p> <p>When the <code>updateRobot.sh</code> script terminates, a brief report about the firmware update operation is shown on the screen. If all the listed boards have the \"ALL OK\" tag, then the update was successful. If one or more boards show errors, you can use the CanLoader application in order to check what went wrong, and retry to download the firmware on that particular boards. The CanLoader GUI allows you to check if all the boards have the updated firmware: simply compare the Build number with the most recent build number reported by the ChangeLog file (icub-firmware/motorControllerDsp56f807/2BLL/ChangeLog for the type=RM BLL(DSP) boards and icub-firmware/motorControllerDsp56f807/4DC/ChangeLog for the type=RM 4DC(DSP) boards).</p> <p>Automatic update of the full robot with the FirmwareUpdater program will soon be possible. For some preliminary details see section (2) of document https://github.com/robotology/icub-firmware-build/blob/master/docs/FirmwareUpdater.readme.fulldetails.txt.</p>"},{"location":"icub_firmware/canLoader/canLoader/#advanced-firmware-update-dsp","title":"Advanced firmware update (DSP)","text":"<p>Alternatively to the complete firmware upgrade procedure described above, you can also create your own custom script which update just a part of the robot, for example:</p> <p><code>icub@pc104:ICUB_ROOT/firmware/build$ ./updateRobot.sh updateLegs.txt</code></p> <p>The .txt file simply contains a list of board addresses and associated firmware files with the following structure:</p> <p><code>[canModule] [canDeviceNum] [boardId] [firmware]</code></p> <p>where:</p> <ul> <li>canModule can be either pcan (if you are using the PLX custom board) or ecan (if you are using the commercial usb to can interface produced by ESD or cfw2can (if you are using the custom CFW2 board).</li> <li>canDeviceNum is the CAN line identifier (i.e: 0 for the head, 1 for the left arm, 2 for the right arm, etc..)</li> <li>boardID is the board address (0...14) on the selected CAN line.</li> <li>firmware is the firmware binary file (*.s for motorola-based boards, *.hex for DSPIC-based board)</li> </ul>"},{"location":"icub_firmware/canLoader/canLoader/#firmware-update-forcetorque-sensors","title":"Firmware update (Force/Torque Sensors)","text":"<p>In this section is described the procedure to update the firmware of the F/T sensors. iCub (version &gt;=1.1) is equipped with four F/T sensors, one for each limb, connected to the CanBus. For a complete reference of the used CAN bus addresses please refer to: list of the CAN bus addresses</p>"},{"location":"icub_firmware/canLoader/canLoader/#procedure-for-updating-the-firmware-of-the-ft-sensors","title":"Procedure for updating the firmware of the F/T Sensors","text":"<p>The update of the F/T sensors firmware is performed using the CanLoader module. The procedure is identical to the standard procedure used to update the firmware of a single DSP board:</p> <ul> <li>open the CanLoader GUI.</li> <li>select the can bus number and the can bus device driver from the menus and click 'Connect'.</li> <li>select the F/T sensor (click on the checkbox on the left).</li> <li>select the firmware file from the file selector on the right (default location: iCub\\src\\firmware\\build\\strain.hex).</li> <li>click 'Start Download'.</li> </ul> <p></p> <p>Note: A command-line procedure is also provided. To update the firmware, run the following command:</p> <p>canLoader20 --canDeviceType  --canDeviceNum  --boardId  --firmware  <p>where:</p> <p>parameter  is the name of the CAN bus driver. It can be ecan or pcan or cfw2can parameter  is the number of the CAN bus (0-9) parameter  is the CAN address of the F/T sensor (0-15) parameter  is the firmware binary file (e.g. strain.hex)"},{"location":"icub_firmware/canLoader/canLoader/#reset-of-the-ft-sensors","title":"Reset of the F/T Sensors","text":"<p>Note: This procedure completely erases both the flash and the eeprom of the F/T Sensor. You will have to download again the calibration data in the sensor after performing the reset of the F/T sensor. It's most likely that you DO NOT have to follow this procedure, unless some serious problem occurred. Even if you downloaded a wrong firmware file in the F/T sensors, only the standard procedure described above is needed to update it.</p> <p>The procedure to reset a F/T Sensor is the following:</p> <ul> <li>open the CanLoader GUI.</li> <li>select the can bus number and the can bus device driver from the menus and click 'Connect'.</li> <li>select the F/T sensor (click on the checkbox on the left).</li> <li>check the eeprom box on the right.</li> <li>select the firmware file from the file selector on the right (default location: iCub\\src\\firmware\\build\\strain.hex).</li> <li>click 'Start Download'.</li> </ul> <p>After the completion of the firmware download:</p> <ul> <li>reboot the F/T sensor (remove the power supply, restart the sensor, reconnect the Can Loader GUI, waiting for the boot time (10 seconds).</li> <li>after the reset, the CAN address of the sensor will be changed to 15. Change it by clicking on the number in the Can Loader GUI. The new address is automatically saved in the sensor eeprom.</li> <li>download a the correspoding sensor calibration data.</li> </ul> <p>Note: Remember: do not erase the F/T sensor eeprom, unless you are really sure what you are going to do or you were instructed to do so.</p> <p></p>"},{"location":"icub_firmware/canLoader/canLoader/#import-of-the-calibration-data","title":"Import of the calibration data","text":"<p>This procedure is used to download the calibration data in the F/T sensors eeprom. Since iCub mounts calibrated F/T sensors, you don't need to follow this procedure, unless you intentionally erased the sensor eeprom. (even if you flash a new firmware update, you do not need to redownload the calibration data because they are kept in eeprom memory)</p> <p>The procedure to import the calibration data is identical to the standard firmware update, just select a calibration file (calibrationDataSN*.dat) instead of a firmware file (strain.hex).</p> <ul> <li>open the CanLoader GUI.</li> <li>select the can bus number and the can bus device driver from the menus and click 'Connect'.</li> <li>select the F/T sensor (click on the checkbox on the left).</li> <li>select the calibration file from the file selector on the right (default location: iCub\\app\\\\conf\\calibration\\ftSensor\\\\calibrationDataSN*.dat). <li>click 'Start Download'. The software automatically distinguish a calibration data file from a firmware binary file. The calibration data are automatically saved in the eeprom.</li> <p>Note: A command-line procedure is also provided. To update the firmware, run the following command:</p> <p><code>canLoader20 --canDeviceType &lt;t&gt; --canDeviceNum &lt;x&gt; --boardId &lt;y&gt; --calibration &lt;f&gt;</code></p> <p>where:</p> <p>parameter  is the name of the CAN bus driver. It can be ecan or pcan or cfw2can parameter  is the number of the CAN bus (0-9) parameter  is the CAN address of the F/T sensor (0-15) parameter  is the calibration data file (e.g calibrationDataSN020.dat)"},{"location":"icub_firmware/firmware/firmware/","title":"Firmware Documentation","text":"<p>Here you can find informations about updating firmware, changing boards properties and firmware revisions in the various versions of the robot.</p>"},{"location":"icub_firmware/firmware/firmware/#firmwareupdater","title":"FirmwareUpdater","text":"<p>With the FirmwareUpdater application it is possible to perform GUI-based FW update on both CAN- and ETH-based robots.</p> <p></p>"},{"location":"icub_firmware/firmware/firmware/#firmware-tools","title":"Firmware tools","text":"<p>With the FirmwareUpdater application it is possible to perform GUI-based FW update on both CAN- and ETH-based robots. </p> <p>Here you can find quick and detailed instructions.</p>"},{"location":"icub_firmware/firmware/firmware/#operations-on-strain-with-the-firmwareupdater","title":"Operations on STRAIN with the FirmwareUpdater","text":"<p>The operations on the STRAIN boards described in the above sections can be performed also using the new FirmwareUpdater program.</p> <p>With reference to Figure 2 inside this document you can do as follows.</p> <ul> <li>Upload a new FW using the button <code>Upload Application</code>. See also section 6.</li> <li>Tick the button <code>Erase STRAIN EEPROM</code> and then upload the new FW if you also want to reset the F/T Sensors.</li> <li>Launch the STRAIN Calibration GUI with the button <code>Calibrate STRAIN</code> if you want to import a calibration data file.</li> </ul>"},{"location":"icub_firmware/firmware/firmware/#firmware-versions","title":"Firmware versions","text":"<p>A complete description of the different firmware versions used by the DSP boards which control the iCub robot can be found here</p>"},{"location":"icub_firmware/firmware/firmware/#automatic-update-of-the-robot","title":"Automatic update of the robot","text":"<p>The user can also decide to perform the automatic update of the complete robot (or of some of its parts). Inside folder scripts of repository there are some examples.</p> <p>The user can:</p> <ul> <li>retrieve info with scripts/FirmwareUpdater.script.info.all.sh,</li> <li>query the robot with scripts/FirmwareUpdater.script.verify.all.sh. This command also gives an estimate of the time required to perform the firmware update of the boards with old versions.</li> <li>update the firmware of all boards with old versions with scripts/FirmwareUpdater.script.update.all.sh</li> </ul>"},{"location":"icub_firmware/firmware/firmware/#the-topology-of-the-robot","title":"The topology of the robot","text":"<p>The robot network is described by the file network.{$YARP_ROBOT_NAME}.xml available for most robots in the repository. In case you cannot find this file, please ask for one here</p> <p>In its inside there is thelist of all boards with their name, drive, address and link relations.</p> <p>You can view some of this information with:</p> <ul> <li>scripts/FirmwareUpdater.script.info.all.sh: it prints the list of all boards with all details</li> <li>scripts/FirmwareUpdater.script.topology.all.sh: it prints the list of all ETH boards in link order.</li> </ul>"},{"location":"icub_firmware/firmware/firmware/#useful-resources","title":"Useful Resources","text":"<p>Below a list of useful links:</p> <ul> <li>Low-level boards programming (using degugger/programmer)</li> <li>Firmware sources</li> <li>Firmware binaries</li> <li><code>FirmwareUpdater</code> doc </li> <li><code>FirmwareUpdater</code> sources </li> </ul>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/","title":"FirmwareUpdater Walkthrough","text":"<p>With the <code>FirmwareUpdater</code> application it is possible to perform GUI-based FW update on both CAN- and ETH-based robots; the commonly used functionalities are:</p> <ul> <li>Upload <code>application</code> firmware both on <code>ETH</code> boards and <code>CAN</code> boards</li> <li>Change the <code>IP address</code> for ethernet based boards</li> <li>Change the <code>CAN ID</code> for the CAN based boards</li> <li>Update the <code>eLoader</code> (advanced option)</li> <li>Update the <code>eUpdater</code> (advanced option)</li> <li>Change <code>bootstrap</code> mode</li> <li>Access to the <code>F/T</code> sensors calibration data of the <code>STTRAIN</code>/<code>STRAIN2</code>/<code>STRAIN2C</code></li> </ul> <p>To launch <code>FirmwareUpdater</code> GUI just open a terminal and type :</p> <pre><code>FrimwareUpdater\n</code></pre> <p></p> <p>Info</p> <p>In order to have all possible drivers that <code>FirmwareUpdater</code> can use to communicate with the boards, make sure you have the firmwareupdater.ini file in the place where you launch the GUI </p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#gui-interface","title":"GUI interface","text":"<p>Here are described the main basic and advanced operations that the <code>FirmwareUpdater</code> GUI allows you to do.</p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#operations-on-eth-boards","title":"Operations on ETH boards","text":"<p>Here are the main operations on the ETH based boards.</p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#discover","title":"Discover","text":"<p>This allow you to discover all <code>ETH</code> boards in the current <code>IP subnet</code> (titpically `10.0.1.X)</p> <ul> <li> <p>In a terminal type <code>FirmwareUpdater</code></p> </li> <li> <p>It opens the GUI, select the <code>ETH</code> driver in the devices list and click <code>Discover</code> If any ETH boards are availabe they'll be listed prompting board info. Detailed processesinfo of each board are available in the <code>Board Properties</code> box clicking on the board.</p> </li> </ul> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#force-eth-maintenance","title":"Force ETH Maintenance","text":"<p>This allow you tu force the board in maintenance mode and do operations such as upload FW, change IP, change bootstrap mode etc..</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Force ETH Maintenance</code></li> </ul> <p>You should see the board running in the <code>eUpdater</code> process and related version.</p> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#force-eth-application","title":"Force ETH Application","text":"<p>This allow you tu force the board in application mode.</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Force ETH Application</code></li> </ul> <p>You should see the board running in the <code>eApplication</code> process and related version.</p> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#set-default-boot-process-eupdater","title":"Set default boot process eUpdater","text":"<p>This allow you tu force the default boot process to eUpdater</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Set Def Boot eUpdater</code></li> </ul> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#set-default-boot-process-eapplication","title":"Set default boot process eApplication","text":"<p>This allow you tu force the default boot process to eApplication</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Set Def Boot eApplication</code></li> </ul> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#change-board-ip-address","title":"Change board IP address","text":"<p>This allow you to change the IP address of the board.</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Force ETH Maintenance</code></li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Change IP Address</code> and insert the wanted new IP address in the dialog box.</li> </ul> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#upload-application","title":"Upload Application","text":"<p>This allow you to upload a new application binary onto the board uP.</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Force ETH Maintenance</code></li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Upload Application</code> and browse to the correct binary application file (official FW binaries are located at robotology/icub-firmware-build)</li> <li>Click on <code>Set Def Boot eApplication</code></li> </ul> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#update-of-the-eloader","title":"Update of the eLoader","text":"<p>This allow you to update the eLoader.</p> <p>Warning</p> <p>This is a critical operation! Do this only if strictly necessary and pay attention to respect the steps described! If the procedure fails you'll have to flash the board using the debugger, this means that probably you'll have to unmount the board from the robot if not accessible.</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the board by checking its checkbox </li> </ul> <p>Warning</p> <p>select only a board at once!</p> <ul> <li>Click on <code>Force ETH Maintenance</code></li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Upload eLoader</code> and browse to the respective binary file (i.e. for a EMS select this file)</li> <li>Verify that the new eLoader has been flashed : <ul> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Check the version in the <code>Board Properties</code> panel </li> </ul> </li> </ul> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#update-of-the-eupdater","title":"Update of the eUpdater","text":"<p>This allow you to update the eLoader.</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the board by checking its checkbox</li> </ul> <p>Warning</p> <p>select only a board at once!</p> <ul> <li>Click on <code>Force ETH Maintenance</code></li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Upload Application</code> and browse to the binary file (i.e. for a EMS select this file)</li> </ul> <p></p> <ul> <li>Select the board by checking its checkbox</li> <li>Click on <code>Restart ETH Board(s)</code></li> <li>wait at least 5 sec</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>The GUI will show that the executing process is <code>eApplPROGupdater</code></li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Upload eUpdater</code> and browse to the binary file (i.e. for a EMS select this file)</li> </ul> <p></p> <ul> <li>Click on <code>Set Def Boot eUpdater</code></li> <li>Click on <code>Restart ETH Board(s)</code></li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>The board has Startup, Default, and Running processed all set to value eUpdater (see the right panel called <code>Board Properties</code>,group <code>Bootstrap Processes</code>). </li> <li>Select the board by checking its checkbox</li> <li>Click on <code>Upload Application</code> and browse to the correct binary application file (official FW binaries are located at robotology/icub-firmware-build)</li> <li>Click on <code>Set Def Boot eApplication</code></li> </ul>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#operations-on-can-boards","title":"Operations on CAN boards","text":"<p>Here are the main operations on the CAN based boards connected to ETH boards.</p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#discover_1","title":"Discover","text":"<p>This allow you to discover all <code>CAN</code> boards connected to a selected <code>ETH</code> board</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the <code>ETH</code> board under which you want discover <code>CAN</code> boards by checking its checkbox</li> <li>Click on <code>Force ETH Maintenance</code></li> <li>Select the <code>ETH</code> board under which you want discover <code>CAN</code> boards by checking its checkbox</li> <li>Click on <code>Discover</code></li> </ul> <p>You should see all <code>CAN</code> boards connected to the slected <code>ETH</code> board.</p> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#change-can-id","title":"Change CAN ID","text":"<p>This allow you to change the ID to a <code>CAN</code> board connected to a selected <code>ETH</code> board</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the <code>ETH</code> board under which you want discover <code>CAN</code> boards by checking its checkbox</li> <li>Click on <code>Force ETH Maintenance</code></li> <li>Select the <code>ETH</code> board under which you want discover <code>CAN</code> boards by checking its checkbox</li> <li>Click on <code>Discover</code></li> <li>Select the <code>CAM</code> board on which you want to change the ID</li> <li>Click on <code>Chanhe CAN address</code></li> <li>Type the new ID (1-14) int the dialog box an hit OK</li> </ul> <p>You should see the new board <code>CAN</code> ID set.</p> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#upload-can-application","title":"Upload CAN application","text":"<p>This allow you to upload a new application to a <code>CAN</code> board connected to a selected <code>ETH</code> board</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the <code>ETH</code> board under which you want discover <code>CAN</code> boards by checking its checkbox</li> <li>Click on <code>Force ETH Maintenance</code></li> <li>Select the <code>ETH</code> board under which you want discover <code>CAN</code> boards by checking its checkbox</li> <li>Click on <code>Discover</code></li> <li>Select the <code>CAM</code> board on which you want to upload the new application</li> <li>Click on <code>Upload Application</code></li> <li>Browse to the wanted binary file (i.e. for a <code>MTB4</code> board select this file)</li> </ul> <p>You should see the new application version set.</p> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#discover-hidden-can-boards","title":"Discover hidden CAN boards","text":"<p>This section describes the procedure that you should use when you cannot discover a <code>CAN</code> board connected to a specific <code>ETH</code> board, even if the master <code>ETH</code> board is in <code>maintenance</code> mode and you checked that there are no hardware issues related to the cabling. Here is the step-by-step procedure (also shown in the animated GIF at the end of the section):</p> <ul> <li>In a terminal, type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>).</li> <li>Select the <code>ETH</code> driver in the devices list.</li> <li>Click on <code>Discover</code>.</li> <li>Select the <code>ETH</code> board under which you aim to discover the <code>CAN</code> board by ticking in its checkbox.</li> <li>If the <code>ETH</code> board <code>Status</code> is <code>application (IDLE)</code>, press the button <code>Force ETH Maintenance</code> and wait until the board <code>Status</code> has changed to <code>maintenance</code>.</li> </ul> <p>Warning</p> <p>It is important that you run the following two points in a row quickly, just one after the other, without waiting more than <code>5 seconds</code> in between.</p> <ul> <li>Click on <code>Restart ETH Board(s)</code>. </li> <li>Click on <code>Discover</code>.</li> </ul> <p>Note</p> <p>These two steps are fundamental for sending the discovery signal while the <code>CAN</code> boards are booting. In the animated GIF below, the boards that are not discoverable (e.g., <code>strain2</code>) are in the status <code>canBootloader</code> and not <code>canApplication</code>. Forcing the restart of the <code>ETH</code> boards is crucial as it will power-cycle the <code>CAN</code> boards too. The discovery command should be then sent at that right moment, that is when the <code>CAN</code> board is in <code>canBootloader</code>.</p> <ul> <li>Update the <code>CAN</code> board as usual.</li> </ul> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#access-strainstrain2strain2c-calibration-data","title":"Access Strain/Strain2/Strain2c calibration data","text":"<p>In order to acces the GUI containing the calibration data for F/T sensors do the following.</p> <ul> <li>In a terminal type <code>FirmwareUpdater -a</code> (or <code>FirmwareUpdater --admin</code>)</li> <li>Select the <code>ETH</code> driver in the devices list</li> <li>Click on <code>Discover</code></li> <li>Select the <code>ETH</code> board under which the <code>Strain/Strain2/Strain2c</code> is attached by checking its checkbox</li> <li>Click on <code>Force ETH Maintenance</code></li> <li>Select the <code>ETH</code> board under which you want discover <code>CAN</code> boards by checking its checkbox</li> <li>Click on <code>Discover</code></li> <li>Select the <code>Strain/Strain2/Strain2c</code> board on which you want to visualize calibation data by checking its checkbox</li> <li>Click on <code>Calibrate</code></li> </ul> <p> </p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#command-line-interface-cli","title":"Command Line Interface (CLI)","text":"<p><code>FirmwareUpdater</code> provides a CLI with a set of options to do operations via the command line.</p> <p>By running <code>FirmwareUpdater -h</code>, you'll be prompted with the list of all available options: </p> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#cli-options-to-change-can-id-and-ip-address","title":"CLI options to change CAN ID and IP address","text":"<p>Here's below a summary of the CLI functionalities: </p> <ul> <li>CAN board ID via <code>SOCKETCAN</code> device</li> <li>CAN board ID via <code>ETH</code> device  </li> <li>IP address of an ETH board</li> </ul>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#change-can-id-via-socketcan","title":"Change CAN ID via SOCKETCAN","text":"<p>In this example, we change the <code>CAN ID</code> on an <code>mtb</code> board connected via <code>SOCKETCAN</code> from 1 to 2. The syntax of the command is the following :  <pre><code>FirmwareUpdater -g -e SOCKETCAN -i 0 -c 0 -n 1 -k 2\n</code></pre> where :  - <code>-g -e SOCKETCAN -i 0 -c 0</code> is required to use a <code>SOCKETCAN</code> device (i.e. <code>ESD CAN/USB</code>) with <code>ID=0</code> and <code>canline=0</code> - <code>-n 1 -k 2</code> changes old id 1 (-n 1) to 2 (-k 2)</p> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#change-can-id-via-eth","title":"Change CAN ID via ETH","text":"<p>In this example, we change the <code>CAN ID</code> on an <code>mtb</code> board connected via <code>ETH</code> through an <code>ems4</code> board w/ <code>IP address = 10.0.1.1</code> from 1 to 2. The syntax of the command is the following :  <pre><code>FirmwareUpdater -g -e ETH -i eth1 -t 10.0.1.1 -c 1 -n 1 -k 2\n</code></pre> where :  - <code>-g -e ETH -i eth1 -t 10.0.1.1 -c 1</code> is required to use a <code>ETH</code> device (i.e. <code>ems4</code>) with <code>ip address = 10.0.1.1</code> and <code>canline=1</code> - <code>-n 1 -k 2</code> changes old id 1 (-n 1) to 2 (-k 2)</p> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#change-ip-address-of-an-eth-board","title":"Change IP address of an ETH board","text":"<p>In this example, we change the <code>IP address on an</code>ems4<code>board from</code>10.0.1.1<code>to 110.0.1.21. The syntax of the command is the following :  <pre><code> FirmwareUpdater -g -e ETH -i eth1 -t 10.0.1.1 -2 10.0.1.2\n</code></pre> where :  -</code> -g -e ETH -i eth1<code>is required to use a</code>ETH<code>device (i.e.</code>ems4<code>)  -</code>-t 10.0.1.1 -2 10.0.1.2<code>changes old i</code>IP address` 10.0.1.1 to 10.0.1.2</p> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#how-to-use-eth-boards-with-a-different-ip-subnet","title":"How to use ETH boards with a different IP subnet","text":"<p>We provide here the instructions to use ETH boards with a subnet different from the standard 10.0.1.X.</p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#change-ip-to-the-board","title":"Change IP to the board","text":"<p>Let's assume that the board we use has the <code>10.0.1.1</code> IP and that we aim to switch to <code>10.0.2.1</code>. You ought to follow these steps:</p> <ol> <li>Run <code>FirmwareUpdater -a</code> </li> <li>Select the eth interface and then <code>Discover</code></li> <li>Select the board and then <code>Force ETH Maintenance</code></li> <li>Select <code>Upload Application</code> and flash the new firmware (<code>icub-firmware-build</code> on branch <code>devel</code>)</li> <li>Select <code>Change IP Address</code> and input <code>10.0.2.1</code></li> </ol>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#configure-the-system","title":"Configure the system","text":"<ol> <li>Change the IP address of your ETH interface to <code>10.0.2.104</code></li> <li>Change the <code>firmwareupdater.ini</code> file including this line <pre><code>ETH \"10.0.2.104:3333\"\n</code></pre></li> <li>Reset the board and check if it is discoverable with the <code>FirmwareUpdater</code></li> <li>Change the following <code>xml</code> files : </li> </ol> <p>/hardware/electronics/pc104.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE params PUBLIC \"-//YARP//DTD yarprobotinterface 3.0//EN\" \"http://www.yarp.it/DTD/yarprobotinterfaceV3.0.dtd\"&gt;\n\n&lt;params xmlns:xi=\"http://www.w3.org/2001/XInclude\" robot=\"single-ETH-2FOC-motor\" build=\"1\"&gt;\n\n    &lt;group name=\"PC104\"&gt;\n        &lt;param name=\"PC104IpAddress\"&gt;           10.0.2.104      &lt;/param&gt;\n        &lt;param name=\"PC104IpPort\"&gt;              12345           &lt;/param&gt;\n        &lt;param name=\"PC104TXrate\"&gt;              1               &lt;/param&gt; \n        &lt;param name=\"PC104RXrate\"&gt;              5               &lt;/param&gt;\n    &lt;/group&gt;\n\n&lt;/params&gt;\n</code></pre></p> <p>hardware/electronics/knee-eb10-j0-eln.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE params PUBLIC \"-//YARP//DTD yarprobotinterface 3.0//EN\" \"http://www.yarp.it/DTD/yarprobotinterfaceV3.0.dtd\"&gt;\n\n&lt;params xmlns:xi=\"http://www.w3.org/2001/XInclude\" robot=\"single-ETH-2FOC-motor\" build=\"1\"&gt;\n\n    &lt;xi:include href=\"./pc104.xml\" /&gt;\n\n    &lt;group name=\"ETH_BOARD\"&gt;\n\n        &lt;group name=\"ETH_BOARD_PROPERTIES\"&gt;\n            &lt;param name=\"IpAddress\"&gt;                10.0.2.1              &lt;/param&gt;\n            &lt;param name=\"IpPort\"&gt;                   12345                   &lt;/param&gt;\n            &lt;param name=\"Type\"&gt;                     mc4plus                    &lt;/param&gt;\n            &lt;param name=\"maxSizeRXpacket\"&gt;          768                     &lt;/param&gt;\n            &lt;param name=\"maxSizeROP\"&gt;               384                     &lt;/param&gt;\n        &lt;/group&gt;\n\n        &lt;group name=\"ETH_BOARD_SETTINGS\"&gt;\n            &lt;param name=\"Name\"&gt;                     \"knee-eb10-j0\"    &lt;/param&gt; \n            &lt;group name=\"RUNNINGMODE\"&gt;\n                &lt;param name=\"period\"&gt;                   1000                &lt;/param&gt;\n                &lt;param name=\"maxTimeOfRXactivity\"&gt;      400                 &lt;/param&gt;\n                &lt;param name=\"maxTimeOfDOactivity\"&gt;      300                 &lt;/param&gt;   \n                &lt;param name=\"maxTimeOfTXactivity\"&gt;      300                 &lt;/param&gt;                \n                &lt;param name=\"TXrateOfRegularROPs\"&gt;      5                   &lt;/param&gt; \n            &lt;/group&gt;              \n        &lt;/group&gt;                 \n\n        &lt;group name=\"ETH_BOARD_ACTIONS\"&gt;\n            &lt;group name=\"MONITOR_ITS_PRESENCE\"&gt;\n                &lt;param name=\"enabled\"&gt;                  true                &lt;/param&gt; \n                &lt;param name=\"timeout\"&gt;                  0.020               &lt;/param&gt; \n                &lt;param name=\"periodOfMissingReport\"&gt;    60.0                &lt;/param&gt; \n            &lt;/group&gt;\n        &lt;/group&gt;\n\n    &lt;/group&gt;  \n\n&lt;/params&gt;\n</code></pre></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#run-yarprobotinterace","title":"Run yarprobotinterace","text":"<p>Finally, if all the operations above came off, you're then able to run <code>yarprobotinterface</code> using the new subnet <code>10.0.2.X</code>.</p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#test","title":"Test","text":"<p>The software has been compiled also on the Linux machine running <code>yarprobotinterface</code> and it works.</p> <p>See below an example of <code>yarprobotinterface</code> running with a gateway set to <code>10.0.2.104</code> connected to an <code>ems4</code> board with address <code>10.0.2.1</code> and an <code>F/T</code> sensor (<code>strain2</code>) connected to it.</p> <p></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#strain2-dedicated-cli-options","title":"Strain2 dedicated CLI Options","text":"<p>The <code>CLI</code> options implemented for the strain2 (F/T sensors) are : </p> <ul> <li><code>-z</code> or <code>--load-dat-file</code> : Loads the calibration .dat file into  STRAIN2 eeprom (pass the file.dat with -l or --file option) <pre><code>example : FirmwareUpdater -g -e ETH -i eth1 -t 10.0.1.1 -c 1 -n 13 -z -l calibrationDataSN003.dat\n</code></pre></li> <li><code>-w</code> or <code>--set-strain-sn &lt;sn&gt;</code> : Sets the passed serialNumber (i.e. SN001) on STRAIN2 <pre><code>example : FirmwareUpdater -g -e ETH -i eth1 -t 10.0.1.1 -c 1 -n 13 -w SN001\n</code></pre></li> <li><code>-j</code> or <code>--set-strain-gains</code> :  Sets on STRAIN2 default gains to (8,24,24,10,10,24) , adjust the offset and check if some channel saturates <pre><code>example : FirmwareUpdater -g -e ETH -i eth1 -t 10.0.1.1 -c 1 -n 13 -j\n</code></pre></li> <li><code>-b</code> or <code>--get-canboard-version &lt;saveFile&gt;</code> :  Gets Bootloader or Application version ( must be y or n to save or        not a file containing fw info) <pre><code>example : FirmwareUpdater -g -e ETH -i eth1 -t 10.0.1.1 -c 1 -n 13 -b y\n</code></pre> <li><code>-u</code> or <code>--save-dat-file</code> : Saves the calibration .dat file from STRAIN2 EEPROM <pre><code>example : FirmwareUpdater -g -e ETH -i eth1 -t 10.0.1.1 -c 1 -n 13 -u\n</code></pre></li> <p>Info</p> <p>All the example are running on a setup with an <code>EMS4</code> board with <code>IP=10.0.1.1</code> and a <code>STRAIN2</code> board attached to it in the <code>CAN1</code> line with <code>ID=13</code></p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#troubleshooting","title":"Troubleshooting","text":""},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#loss-of-application-firmware","title":"Loss of Application Firmware","text":"<p>The application update of several ETH boards launched simultaneously may sometimes give rise to errors that can lead to the loss of the application firmware. This may happen either by using the GUI or via CLI by relying on scripted operations. </p> <p>Two error conditions are given:</p> <ol> <li>The board stays in <code>eUpdater</code>.</li> <li>The board \"disappears\", meaning it is no longer displayed in the <code>FirmwareUpdater</code> as it does not complete the bootloader part \u2013 which takes about 5\u00f710 seconds \u2013 and so it is not in either <code>eApplication</code> or <code>eUpdater</code>.</li> </ol> <p>Here's below the steps to recover the board in both cases:</p> <ol> <li>For Case 1:<ul> <li>Start <code>FirmwareUpdater -a</code>.</li> <li>Reload the application firmware.</li> <li>Select the board and click on <code>Set Def Boot eApplication</code> and soon afterwards on <code>Force ETH Application</code>.</li> </ul> </li> <li>For Case 2:<ul> <li>Start <code>FirmwareUpdater -a</code>.</li> <li>Power-cycle the motors.</li> <li>Run the <code>discover</code> of the ETH boards within 5\u00f710 seconds from the boot. You will see all the ETH boards in <code>eUpdater</code>, including those that disappeared.</li> <li>Apply the steps above for Case 1 to reload the application firmware.</li> </ul> </li> </ol> <p>Note</p> <p>A similar procedure applies to <code>CAN</code> boards.</p>"},{"location":"icub_firmware/firmwareupdater/firmwareupdater/#useful-resources","title":"Useful Resources","text":"<p>Below a list of useful links:</p> <ul> <li>Firmware binaries docs</li> <li>Firmware binaries</li> <li>Low-level boards programming (using degugger/programmer)</li> </ul>"},{"location":"icub_firmware/fw_toolchain/","title":"Firmware Toolchain Documentation","text":"<p>Here you can find information on how to install and run the firmware toolchain</p> <p>Installing Keil</p> <p>Installing MPLAB</p>"},{"location":"icub_firmware/fw_toolchain/installing_keil/","title":"Configuring Firmware Toolchain","text":"<p>This page will describe the steps necessary to install the MDK-ARM Keil software for  compiling the firmware, and the necessary steps to configure your firmware repository</p>"},{"location":"icub_firmware/fw_toolchain/installing_keil/#installing-keil","title":"Installing Keil","text":"<p>Here we will guide you through the installation of Keil. This installation requires Marco Accame to configure your license, so contact him in advance before proceeding with the installation!</p>"},{"location":"icub_firmware/fw_toolchain/installing_keil/#download-keil","title":"Download Keil","text":"<p>You can download Keil at the following address:  Keil MDK Community.  This will require a registration, after which you will be provided with the download link:</p> <p></p>"},{"location":"icub_firmware/fw_toolchain/installing_keil/#installing-keil_1","title":"Installing Keil","text":"<p>Run the installer that you downloaded on the previous step. </p>"},{"location":"icub_firmware/fw_toolchain/installing_keil/#configuring-your-license","title":"Configuring your license","text":"<p>To be able to use MDK-Community, you need a valid license. Go to https://keil.arm.com/mdk-community to activate a Community (non-commercial) license.</p> <p>Note</p> <p>Use in commercial applications of the Community (non-commercial) license is not permitted</p>"},{"location":"icub_firmware/fw_toolchain/installing_keil/#configuring-icub-firmware","title":"Configuring iCub-firmware","text":"<p>Now that Keil is installed and running, you need to setup the firmware and its shared repositories, which can be cloned from the follow link:</p> <ul> <li>robotology/icub-firmware</li> <li>robotology/icub-firmware-shared</li> </ul> <p>You can clone these repositories anywhere in your computer as long as they  are both in the same directory. Once you clone the two repositories, you  will need an extra library that is available on IITs intranet in the following path:</p> <pre><code>\\\\storage05.icub.iit.local\\repository\\software\\ipal-extra\n</code></pre> <p>Unzip this new library file into the following path (replace <code>${YOUR_DIRECTORY}</code> with the path where you cloned the two repositories): </p> <pre><code>${YOUR_DIRECTORY}\\icub-firmware\\emBODY\\eBcode\\arch-arm\\libs\\highlevel\\abslayer\\ipal\\\n</code></pre> <p>To properly configure this library, open Keil, go to the <code>Project-&gt;Open Project</code>  menu, navigate to the path above and select the <code>ipal.uvprojx</code> project file. Now you should be able to visualize all the files from this project on the left  workspace of Keil:</p> <p></p> <p>The final step to configure the library is to press the <code>Build</code> button highlighted by the red box on the image. </p>"},{"location":"icub_firmware/fw_toolchain/installing_keil/#testing-your-toolchain","title":"Testing your toolchain","text":"<p>Congratulations! You just built your first project using Keil!</p> <p>In order to verify that everything is configured properly, you can try building the project for the mc4 board located in the following path:</p> <pre><code>${YOUR_DIRECTORY}\\icub-firmware\\emBODY\\eBcode\\arch-arm\\board\\mc4plus\\appl\\v2\\proj\\\n</code></pre> <p>Select the <code>mc4plus.diagnostic2ready.uvprojx</code> project, and press the <code>Build</code> button just like for the <code>ipal</code> library. You should see on the output workspace (bottom of Keil window) a similar output (with 0 errors):</p> <p></p>"},{"location":"icub_firmware/fw_toolchain/installing_mplab/","title":"Installing and configuring MPLAB","text":"<p>Here we will guide you through the installation and configuration steps necessary to have MPLAB running on your machine</p> <p>Note: This tutorial assumes you have already downloaded the repositories for icub firmware, if you have not, please clone the following repositories into the  under the same directory: - robotology/icub-firmware - robotology/icub-firmware-shared</p>"},{"location":"icub_firmware/fw_toolchain/installing_mplab/#installing-the-mplab-x-ide","title":"Installing the MPLAB X IDE","text":"<ul> <li>Goto https://www.microchip.com/mplab/mplab-x-ide and browse down to \"Downloads\"  section and download the latest version of MPLAB\u00ae X IDE driver for Windows  (currently v5.40).</li> <li>follow the instructions and default options</li> </ul>"},{"location":"icub_firmware/fw_toolchain/installing_mplab/#installing-the-mplab-xc-compilers","title":"Installing the MPLAB XC Compilers","text":"<p>All the compilers and related dependencies can be downloaded from  https://www.microchip.com/mplab/compilers, in the last section, in the tab  \"Compiler Downloads\". </p> <ul> <li>After the install of the MPLAB X IDE is complete, follow the suggestion to download  the \"MPLAB XC compiler 16 bits\" for dsPICs, and download the \"MPLAB XC16 Compiler   vX.XX\" compiler for Windows, in \"Compiler Downloads\" tab (as shown above),   \"Compilers\" subsection.</li> <li>Launch the compiler installation: select the \"free\" option, and select the default  options in the steps that follow.</li> <li>Download Install the \"MPLAB XC16 Compiler Part-Support Patch vX.XX\" from the  subsection \"Latest Part Support Patch Files\". This is a priori for supporting new  parts, but actually the dsPIC used in our setup, version 33FJ128MC802, appears  in the \"supported parts in the update\" section of the  release notes of the patch.</li> <li>Download Install the \"Current Peripheral Libraries\" -&gt; \"16-bit dsPIC33, PIC24E,  PIC24H MCUs: Legacy Peripheral Libraries\" from the subsection \"Peripheral Libraries  (PLIBS)\" (latest version of \"PIC24/dsPIC Peripheral Libraries v2.00 - Windows\"  here).</li> </ul>"},{"location":"icub_firmware/fw_toolchain/installing_mplab/#note-on-the-mplab-xc16-compiler-vxxx-compiler","title":"Note on the \"MPLAB XC16 Compiler vX.XX\" compiler","text":"<p>The compiler \"MPLAB XC16 Compiler v1.50\" alone is missing some dependencies like the include <code>&lt;pwm12.h&gt;</code>. If you build the project without the mentioned additional patches, you'll get the error: <pre><code>CLEAN SUCCESSFUL (total time: 8ms)\nmake -f nbproject/Makefile-default.mk SUBPROJECTS= .build-conf\nmake[1]: Entering directory 'C:/Users/icub/git/icub-firmware/emBODY/eBcode/arch-dspic/board/2foc/appl/2FOC-V3/2FOC-V3.X'\nmake  -f nbproject/Makefile-default.mk dist/default/production/2FOC-V3.X.production.hex\nmake[2]: Entering directory 'C:/Users/icub/git/icub-firmware/emBODY/eBcode/arch-dspic/board/2foc/appl/2FOC-V3/2FOC-V3.X'\n\"C:\\Program Files\\Microchip\\xc16\\v1.50\\bin\\xc16-gcc.exe\"   ../src/2FOC.c  -o build/default/production/_ext/1360937237/2FOC.o  -c -mcpu=33FJ128MC802  -MMD -MF \"build/default/production/_ext/1360937237/2FOC.o.d\"        -omf=elf -DXPRJ_default=default  -legacy-libc    -ffunction-sections -mlarge-data -O3 -I\"../include\" -msmart-io=1 -Wall -msfr-warn=off    -mdfp=\"C:/Program Files (x86)/Microchip/MPLABX/v5.40/packs/Microchip/dsPIC33F-GP-MC_DFP/1.2.35/xc16\"\n\"C:\\Program Files\\Microchip\\xc16\\v1.50\\bin\\xc16-gcc.exe\"   ../src/DHES.c  -o build/default/production/_ext/1360937237/DHES.o  -c -mcpu=33FJ128MC802  -MMD -MF \"build/default/production/_ext/1360937237/DHES.o.d\"        -omf=elf -DXPRJ_default=default  -legacy-libc    -ffunction-sections -mlarge-data -O3 -I\"../include\" -msmart-io=1 -Wall -msfr-warn=off    -mdfp=\"C:/Program Files (x86)/Microchip/MPLABX/v5.40/packs/Microchip/dsPIC33F-GP-MC_DFP/1.2.35/xc16\"\n\"C:\\Program Files\\Microchip\\xc16\\v1.50\\bin\\xc16-gcc.exe\"   ../asm/MeasCurr.s  -o build/default/production/_ext/1360919980/MeasCurr.o  -c -mcpu=33FJ128MC802  -omf=elf -DXPRJ_default=default  -legacy-libc  -I\"../asm\" -Wa,-MD,\"build/default/production/_ext/1360919980/MeasCurr.o.d\",--defsym=__MPLAB_BUILD=1,--no-relax  -mdfp=\"C:/Program Files (x86)/Microchip/MPLABX/v5.40/packs/Microchip/dsPIC33F-GP-MC_DFP/1.2.35/xc16\"\n\"C:\\Program Files\\Microchip\\xc16\\v1.50\\bin\\xc16-gcc.exe\"   ../src/Faults.c  -o build/default/production/_ext/1360937237/Faults.o  -c -mcpu=33FJ128MC802  -MMD -MF \"build/default/production/_ext/1360937237/Faults.o.d\"        -omf=elf -DXPRJ_default=default  -legacy-libc    -ffunction-sections -mlarge-data -O3 -I\"../include\" -msmart-io=1 -Wall -msfr-warn=off    -mdfp=\"C:/Program Files (x86)/Microchip/MPLABX/v5.40/packs/Microchip/dsPIC33F-GP-MC_DFP/1.2.35/xc16\"\n\"C:\\Program Files\\Microchip\\xc16\\v1.50\\bin\\xc16-gcc.exe\"   ../src/PWM.c  -o build/default/production/_ext/1360937237/PWM.o  -c -mcpu=33FJ128MC802  -MMD -MF \"build/default/production/_ext/1360937237/PWM.o.d\"        -omf=elf -DXPRJ_default=default  -legacy-libc    -ffunction-sections -mlarge-data -O3 -I\"../include\" -msmart-io=1 -Wall -msfr-warn=off    -mdfp=\"C:/Program Files (x86)/Microchip/MPLABX/v5.40/packs/Microchip/dsPIC33F-GP-MC_DFP/1.2.35/xc16\"\n\"C:\\Program Files\\Microchip\\xc16\\v1.50\\bin\\xc16-gcc.exe\"   ../src/ADC.c  -o build/default/production/_ext/1360937237/ADC.o  -c -mcpu=33FJ128MC802  -MMD -MF \"build/default/production/_ext/1360937237/ADC.o.d\"        -omf=elf -DXPRJ_default=default  -legacy-libc    -ffunction-sections -mlarge-data -O3 -I\"../include\" -msmart-io=1 -Wall -msfr-warn=off    -mdfp=\"C:/Program Files (x86)/Microchip/MPLABX/v5.40/packs/Microchip/dsPIC33F-GP-MC_DFP/1.2.35/xc16\"\n\"C:\\Program Files\\Microchip\\xc16\\v1.50\\bin\\xc16-gcc.exe\"   ../src/System.c  -o build/default/production/_ext/1360937237/System.o  -c -mcpu=33FJ128MC802  -MMD -MF \"build/default/production/_ext/1360937237/System.o.d\"        -omf=elf -DXPRJ_default=default  -legacy-libc    -ffunction-sections -mlarge-data -O3 -I\"../include\" -msmart-io=1 -Wall -msfr-warn=off    -mdfp=\"C:/Program Files (x86)/Microchip/MPLABX/v5.40/packs/Microchip/dsPIC33F-GP-MC_DFP/1.2.35/xc16\"\n\"C:\\Program Files\\Microchip\\xc16\\v1.50\\bin\\xc16-gcc.exe\"   ../src/DCLink.c  -o build/default/production/_ext/1360937237/DCLink.o  -c -mcpu=33FJ128MC802  -MMD -MF \"build/default/production/_ext/1360937237/DCLink.o.d\"        -omf=elf -DXPRJ_default=default  -legacy-libc    -ffunction-sections -mlarge-data -O3 -I\"../include\" -msmart-io=1 -Wall -msfr-warn=off    -mdfp=\"C:/Program Files (x86)/Microchip/MPLABX/v5.40/packs/Microchip/dsPIC33F-GP-MC_DFP/1.2.35/xc16\"\n\"C:\\Program Files\\Microchip\\xc16\\v1.50\\bin\\xc16-gcc.exe\"   ../src/can_icubProto.c  -o build/default/production/_ext/1360937237/can_icubProto.o  -c -mcpu=33FJ128MC802  -MMD -MF \"build/default/production/_ext/1360937237/can_icubProto.o.d\"        -omf=elf -DXPRJ_default=default  -legacy-libc    -ffunction-sections -mlarge-data -O3 -I\"../include\" -msmart-io=1 -Wall -msfr-warn=off    -mdfp=\"C:/Program Files (x86)/Microchip/MPLABX/v5.40/packs/Microchip/dsPIC33F-GP-MC_DFP/1.2.35/xc16\"\nOptions have been disabled due to restricted license\nVisit https://www.microchip.com/compilers to purchase a new key.\nIn file included from ../src/Faults.c:5:0:\n../include/PWM.h:10:19: fatal error: pwm12.h: No such file or directory\ncompilation terminated.\n</code></pre> This is a known issue with the latest drivers released after version v1.24. The fast workaround in the previous setup was to revert the driver back to version 1.24. That version should be available at https://www.microchip.com/development-tools/pic-and-dspic-downloads-archive, but does not clearly appear in the section \"MPLAB C Compiler for PIC24 and dsPIC DSCs\" and seems to be available only as \"Source Archives\". The real cause of the issue is actually explained in the v1.25 release notes: <pre><code>The peripheral libraries are no longer shipped with the compiler package. These may be downloaded separately from the MPLAB XC download page.\n</code></pre> So, the proper fix is to download the additional Legacy Peripheral Libraries as explained in the previous section.</p>"},{"location":"icub_firmware/fw_toolchain/installing_mplab/#running-the-mplab-x-ide-wip","title":"Running the MPLAB X IDE [WIP]","text":"<ul> <li>Run app MPLAB X IDE v5.40.</li> <li>Open the project 2FOC-V3.X (shortcut CTRL+SHIFT+O on windows).</li> <li>You should see in the lower left pane:</li> </ul> <p>The 2FOC device is the dsPIC33FJ128MC802.</p> <ul> <li>Then, click on Packs - dsPIC33F-GP</li> <li>You should see a popup window with the project properties:</li> </ul> <p></p> <p>Just click \"OK\".</p> <ul> <li>Clean and Build the project as shown below:</li> </ul> <p></p>"},{"location":"icub_force_control/icub-force-control/","title":"Force Control on iCub","text":"<p>iCub is not equipped with joint-level torque sensors, but only with four 6-axis F/T sensors mounted on the arms and on the legs. iCub thus exploits a model-based approach based on a modified Newton-Euler algorithm (Ref: iDyn library ) in order to estimate joint-level torques from the four proximal sensors. The controller is thus distributed in three different levels:</p> <ul> <li> <p><code>wholeBodyDynamics</code> (application level): the modules takes the measurements from the 3DOF orientation tracker placed inside iCub's head and from the four F/T sensors of the robot limbs to make a model-based estimation of joint torques, with the hypothesis that external forces are applied only on the end-effector (wrist/ankle joints). For further information refer also to the wholeBodyDynamics documentation</p> </li> <li> <p><code>yarprobotinterface</code> (middleware): it sends (through yarp ports) the 6-axis F/T sensors measurements to the wholeBodyDynamics module and receives from it the computed joint torques. The estimated joint torque measurements are sent to the boards which perform the control.</p> </li> <li> <p><code>motor control boards</code> (firmware level): The control boards receive the computed estimation of the joint torques from iCubInterface and implement different PID control algorithms in order to track the desired position/torque commands. The type of control (i.e. position/torque/impedance control etc.) of a specific joint can be changed runtime by sending an appropriate command to the control board.</p> </li> </ul>"},{"location":"icub_force_control/icub-force-control/#ports-and-connections","title":"Ports and connections","text":"<p>wholeBodyDynamics and <code>yarprobotinterface</code> communicate through yarp ports:</p> <p>iCub ports are:</p> <ul> <li><code>/icub/inertial</code> provides 3DOF orientation tracker measurements</li> <li><code>/icub/&lt;part&gt;/analog:o</code> provides calibrated F/T measurements (an offset is present, due to the stresses of mounting)</li> <li><code>/icub/joint_vsens/&lt;part&gt;:i</code> acquires joint torque estimation from wholeBodyDynamics module</li> </ul> <p>wholeBodyDynamics ports are:</p> <ul> <li><code>/wholeBodyDynamics/inertial:i</code> receive inertial data</li> <li><code>/wholeBodyDynamics/&lt;part&gt;/FT:i</code> reads F/T data from the analog ports</li> <li><code>/wholeBodyDynamics/&lt;part&gt;/Torques:o</code> provides joint torque measurements</li> </ul> <p>The port connections required to run force control are thus:</p> <ul> <li><code>/icub/inertial</code>-&gt; <code>/wholeBodyDynamics/inertial:i</code></li> <li><code>/icub/&lt;part&gt;/analog:o</code> -&gt; <code>/wholeBodyDynamics/&lt;part&gt;/FT:i</code></li> <li><code>/icub/joint_vsens/&lt;part&gt;:i</code> -&gt; <code>/wholeBodyDynamics/&lt;part&gt;/Torques:o</code></li> </ul> <p>Connecting all these ports for all the robot parts (left_arm, right_arm, left_leg, right_leg) is a laborious process and it's easy to make mistakes while typing the port names. For this reason, it's not recommended to make the connections manually, using the yarp connect command. Instead you can easily make all the necessary connections using the provided automated scripts.</p> <p>The key concept to comprehend how force control works and how to use it is the concept of control mode. The control mode represents the current control algorithm that is running on the firmware of the control boards to control a specific joint. For example, the position control modes implements a PID control that tracks the commanded trajectories, while the impedance control realizes a compliant position control by computing the reference torque that an inner torque control loop has to track, given an equilibrium position and the stiffness of a simulated spring. The control mode of a joint can be changed online, during the execution of your application, using the apposite yarp interfaces. In this way you can assign different control modes to different joints in order to obtain the desired behaviour (e.g. you can set some joints in position control mode to obtain a 'stiff' behaviour and other joint in impedance control mode to obtain a compliant behaviour).</p> <p>Five different control modes are currently implemented in the firmware of the control boards:</p>"},{"location":"icub_force_control/icub-force-control/#position-control-mode","title":"Position control mode","text":"<p>Typical Inputs</p> <p>desired position, trajectory velocity</p> <p>Position control is the standard control mode. In this control mode, the motors PWM is computed using a PID controller the receives in input the desired joint position and the current measurement from the joint encoders:</p> \\[ PWM = PID\\left(q-q_d\\right)+PWM_{offset} \\] <p>Note that when you command a new joint position, you are not instantaneously assigning the reference qd in the above formula. Instead, a mimum jerk trajectory generator takes in input your commanded position and the desired velocity, and produces a smooth movement creating a sequence of position references qd tracked by the PID controller.</p>"},{"location":"icub_force_control/icub-force-control/#velocity-control-mode","title":"Velocity control mode","text":"<p>Typical Inputs</p> <p>desired velocity, acceleration</p> <p>Velocity control mode allows you to control the robot by assigning a desired volocity/acceleration to a joint. The control law is the same of position control, but in this case qd is not directly controlled by the user, but it is obtained from the integration of the commanded user velocity. Also in this case a minimum jerk profile generator is used.</p>"},{"location":"icub_force_control/icub-force-control/#torque-control-mode","title":"Torque control mode","text":"<p>Typical Inputs</p> <p>reference torque</p> <p>Torque control mode allows you to directly control the robot joints torque: Pid trq.jpg In this case the motors PWM is computed using a PID controller the receives in input the desired joint torque and the current measured joint torque. Additionally, a PWM offset can be added to the output of the control algorithm. If both the commanded reference torque and the PWM offset is set to zero, the robot joint will be free to be moved in the space (eventually it will move down as an effect of the gravity acting on that joint).</p> \\[ PWM=PID\\left(\\tau-\\tau_d\\right)+PWM_{offset} \\]"},{"location":"icub_force_control/icub-force-control/#openloop-control-mode","title":"Openloop control mode","text":"<p>Typical Inputs</p> <p>motor PWM</p> <p>Openloop control mode allows you to directly control the joint motor, assigning directly the PWM (bypassing the PID controller)</p>"},{"location":"icub_force_control/icub-force-control/#impedance-position-control-mode","title":"Impedance Position control mode","text":"<p>Typical Inputs</p> <p>desired position, trajectory velocity + desired joint stiffness and damping</p> <p>Impedance control mode allows you to control the joint position and its compliance. In particular, you can control the equilibrium position of a virtual spring (using the standard yarp::dev::IPositionControl interface) and its stiffness/damping (using the yarp::dev::IImpedanceControl interface). The control is implemented in the DSP firmware as follows: Pid imp.jpg Firstly, a reference torque is computed, accordingly to the input position and the commanded stiffness/damping parameters (Hooke's law). Secondly, the reference torque is tracked by a PID algorithm (same gains used by the torque control mode). By tuning the stiffness parameters, you can thus make the robot joint feeling like a hard or soft spring, while maintaining control on the desired joint position (note that the same mimum-jerk trajectory generator used by the position control is also used when position impedance control is running).</p> \\[ \\begin{align} \\tau_d &amp;= -K_{stiffness} \\cdot \\left(q-q_d\\right)-K_{damping} \\cdot \\dot{q}+\\tau_{offset} \\\\ PWM &amp;= PID\\left(\\tau-\\tau_d\\right)+PWM_{offset} \\end{align} \\]"},{"location":"icub_force_control/icub-force-control/#impedance-velocity-control-mode","title":"Impedance Velocity control mode","text":"<p>Typical Inputs</p> <p>desired velocity, acceleration + desired joint stiffness and damping</p> <p>The impedance velocity control mode is the corresponding impedance mode using velocity control. The control law is the same of the impedance position control, but in this case qd is not directly controlled by the user, but it is obtained from the integration of the commanded user velocity (also in this case minimum jerk profile generator is used).</p>"},{"location":"icub_force_control/icub-force-control/#idle","title":"Idle","text":"<p>Typical Inputs</p> <p>none</p> <p>This is not a real control mode, but represents the status of a joint in which the control is currently disabled (both because PWM has been deliberately turned off by the user or because a fault (e.g. overcurrent) occurred).</p> <p>NOTE 1: The control mode of a joint can be set using the yarp::dev::iControlMode interface.</p> <p>NOTE 2: When you send movement commands (i.e. position/velocity commands) to a joint, the obtained behaviour will change depending on the current control mode of the joint (e.g. a position command in position control mode will generate the standard stiff trajectory, while the same command executed in impedance control mode will change the equilibrium point of the simulated spring).</p>"},{"location":"icub_force_control/icub-force-control/#start-force-control","title":"Start Force Control","text":""},{"location":"icub_force_control/icub-force-control/#run-wholebodydynamics-on-the-robot","title":"Run <code>wholebodydynamics</code> on the robot","text":"<p>The first step to achieve joint level torque control / playing with torque &amp; impedance interfaces / running the <code>demoForceControl</code> module is to start the <code>wholeBodyDynamics</code> module and connect the corresponding ports. Note that if this module is not running and the ports are not properly connected, any attempt to change the control mode of the joints to force/impedance control mode will result in a protection fault (motor going in idle state).</p>"},{"location":"icub_force_control/icub-force-control/#run-gravitycompensator-on-the-robot","title":"Run <code>gravityCompensator</code> on the robot","text":"<p>The <code>gravityCompensator</code> is included in the same script used to launch the <code>wholeBodyDynamics</code> module (i.e. wholeBodyDynamics.xml). The module estimates the gravitational term acting on joints due to links weight and generates a feed-forward term which can be used to compensate the gravity when the joint is torque/impedance control mode. This module is particular useful if you want to control the robot in impedance position mode with low stiffness values. In this case, in fact, the accuracy of position control loop will be poor, because the gravity will act on the low-stiffness joint preventing it to reach the commanded position. On the contrary, if the gravity compensation module is running, the feed-forward term will help the joint to reach the commanded position even with low stiffness values.</p>"},{"location":"icub_force_control/icub-force-control/#additional-notes","title":"Additional notes","text":"<p>The torques estimation is perfomed by the iDyn library which includes a mechanical model of the iCub robot based on the CAD parameters. This means that a small drift can be present, due to the fact that the model obtained from the CAD slightly differs from the real iCub (consider the weight of the power cables, the additional skin etc.) If the joint stiffness is zero and <code>gravityCompensator</code> is off, the gravity will make the joint to fall down regardless the commanded position. In this case, running the <code>gravityCompensator</code> is the only way to track to commanded position. Be particular careful in this situation: consider a joint in impedance position control mode, with the gravity compensator turned off and low joint stiffness (e.g 0.01Nm/deg). In this case the position tracking error will be high: for example if you command a position of 30degrees, due to the gravity effect and the very low stiffness, the joint could able to reach only the position at 10 degrees (so the tracking error is 20 degrees). In this condition the impedance control loop is computing a command torque T=0.01*(30-10)=0.2Nm. Now, if you suddenly increase (with a step) the joint stiffness to a high value (for example i.e. 0.6Nm.deg) you obtain a command torque of T=0.5*(30-10)=12Nm which is a huge torque. The joint will move very fast (and joint tendons may be also damaged). In this case the solution is to increase the stiffness gradually, in order to make the position tracking error decrease before setting the joint in high-stiffness mode or turning on the gravity compensator. With the gravity compensator enabled the position error will be limited to few degrees even with low stiffness values.</p> <p></p>"},{"location":"icub_force_control/icub-force-control/#demo-force-control","title":"Demo Force control","text":""},{"location":"icub_force_control/icub-force-control/#run-modules-using-yarpmanager","title":"Run modules Using yarpmanager","text":"<p>On the server run <code>yarpmanager</code> and run : </p> <p></p> <p></p> <p>Open the <code>iCubStarup</code> application amd run <code>yarprobointerface</code> , <code>yarplogger</code> (optional to log messages) <code>wholeBodyDynamics</code> and <code>gravityCompensator</code> modules</p>"},{"location":"icub_force_control/icub-force-control/#run-the-demo","title":"Run the demo","text":"<ul> <li> <p>First of all check if torque sensors are correctly reading data; to do that (with the robot in the calibrated position) run this command on the laptop server:</p> <p>yarp read ... /icub/left_arm/analog:o</p> </li> <li> <p>You\u2019ll see a data dumping in the shell, try to move the part by hand and see if numbers are changing. Repeat the command above for all parts having a sensor (typically left_arm, right_arm, left_leg, right_leg, left_foot, right_foot)</p> </li> <li> <p>In the yarpmanager, double click on iCubStartup</p> </li> <li>Select <code>wholeBodyDynamics</code> and <code>gravityCompensator</code> modules, right click and run</li> </ul> <p></p> <p>\u26a0\ufe0f If you have problems opening the WholeBodyDynamics module, double check that in the file icub_all.xml there is:</p> <pre><code> portprefix ='icub'\n</code></pre> <p>after the RobotName, in the first lines.</p> <ul> <li>Open yarpmotorgui and check the torque value reading for affected joints, typically they should read as follows:</li> </ul> Part Joint 0 Joint 1 Joint 2 Joint 3 Joint 4 Arms -1.5 +1.2 -0.2 +0.6 0 Legs +0.2 +0.1 0 +0.1 / <p>If values are not close to the table above, stop running and check sensors.</p> <ul> <li>Now run <code>demoForceControl</code><pre><code>icub@icubsrv:~$ demoForceControl\n</code></pre> </li> </ul> <p>\ud83d\udd34 Do not apply force to the torso (experimental)!</p> <p></p> <p>For each part to test, first select soft spring, move it by hand checking a right force response. Then repeat with medium and hard spring.</p> <p>\u26a0\ufe0f Be sure to move the part applying the force by hand respecting the following :</p> Part Point where to apply the force Arms Forearm/wrist Legs Ankle"},{"location":"icub_force_control/icub-force-control/#wholebodydynamics-yarp-device","title":"<code>wholebodydynamics</code> YARP device","text":"<p>The <code>wholebodydynamics</code> YARP device (contained in the C++ class <code>yarp::dev::WholeBodyDynamicsDevice</code>) is reading measurements of the embedded force-torque sensors, of the joint position and low-level estimates of joint velocity and accelerations and of  one IMU mounted in the robot, and from this reading is estimating the external force-torques and internal joint torques of the robot. </p>"},{"location":"icub_force_control/icub-force-control/#differences-with-respect-to-the-wholebodydynamics-yarp-module","title":"Differences with respect to the wholeBodyDynamics YARP module","text":"<p>From the user perpective, the main differences w.r.t. to the wholeBodyDynamics YARP module are:  * The estimation is performed using the iDynTree library, replacing the use of the iDyn library. * The model of the robot and of the sensor is loaded from a URDF model, as documented in https://github.com/robotology/idyntree/blob/master/doc/model_loading.md.    This permits running the estimation algorithm on arbitrary robots without modifying the code, as in the case of the iCubHeidelberg01 that w.r.t. to normal iCub is missing the head and the arms.  * The RPC interface is implemented using YARP Thrift.   This means that the <code>0</code> shorthand for performing the calibration of the force-torque offset is not supported anymore. The <code>calib</code> command however is compatible between the wholeBodyDynamics    YARP module and the <code>wholebodydynamics</code> YARP device, so please use that one in your code to be compatible with both interfaces.  * The functionality of the gravityCompensator module are now integrated in the <code>wholebodydynamics</code> device, and can be enabled/disabled using the parameters in the <code>GRAVITY_COMPENSATION</code> group.    Furthermore, the gravity compensation torque offset is not sent anymore to the board if the axis control mode is set to <code>VOCAB_CM_TORQUE</code> . </p>"},{"location":"icub_force_control/icub-force-control/#run-the-wholebodydynamics-yarp-device","title":"Run the <code>wholebodydynamics</code> YARP device","text":"<p>Being a YARP device, it can run on the robot main PC in the robot's yarprobotinterface, or on an external pc using a separate yarprobotinterface. The <code>wholebodydynamics</code> device requires robot-specific configuration files, and currently this configuration files are provided for the following robots:</p> <code>YARP_ROBOT_NAME</code> Number of F/T sensors Internal electronics architecture Support for running wholebodydynamics on the robot's yarprobotinterface <code>icubGazeboSim</code> 6 N/A NO <code>iCubDarmstadt01</code> 6 ETH YES <code>iCubGenova02</code> 6 ETH YES <code>iCubGenova04</code> 6 ETH YES <code>iCubNancy01</code> 6 ETH YES <code>iCubHeidelberg01</code> 4 ETH YES <code>iCubGenova01</code> 6 CAN NO <code>iCubGenova03</code> 6 CAN NO <code>iCubParis01</code> 6 CAN NO <code>iCubParis02</code> 6 CAN NO <p>Note however that  over time the configuration of this robots can change, and the configuration files contained in this repository may not be updated. Please check the status of the configuration files with the maintainer of this repository before using this configuration files.</p>"},{"location":"icub_force_control/icub-force-control/#run-wholebodydynamics-on-an-external-pc","title":"Run <code>wholebodydynamics</code> on an external PC","text":"<p>This is the recommended procedure in general. To launch the <code>wholebodydynamics</code> on an external PC running a *nix based OS, just run: <pre><code>YARP_ROBOT_NAME=&lt;yarp_robot_name&gt; yarprobotinterface --config launch-wholebodydynamics.xml  \n</code></pre> where <code>&lt;yarp_robot_name&gt;</code> is the robot for which you are launching the estimator.</p> <p>For example, if you want to run the <code>wholebodydynamics</code> for the Gazebo simulation, you will need to run: <pre><code>YARP_ROBOT_NAME=icubGazeboSim yarprobotinterface --config launch-wholebodydynamics.xml\n</code></pre></p> <p>Note that you can avoid preprending the <code>YARP_ROBOT_NAME=icubGazeboSim</code> environmental variable.  </p>"},{"location":"icub_kinematics/","title":"iCub kinematics documentation","text":"<p>Here you can find informations about iCub's kinematics.</p> <p>iCub Joints</p> <p>iCub Joints Limits</p> <p>Range of Motion of the iCub Shoulders</p> <p>Vergence, Version and Disparity</p> <p>Robot Configuration</p> <p>iCub Model naming conventions</p> <p>iCub Forward Kinematics</p>"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-arms/","title":"iCub Foward Kinematics - Arms","text":""},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-arms/#left","title":"Left","text":"<p>Here's described how to construct the matrix T_RoLa whose definition is given in ICubForwardKinematics. The matrix is constructed in two steps i.e. T_RoLa = T_Ro0 * T_0n. The first matrix T_Ro0 describes the rigid roto-translation from the root reference frame to points in the 0<sup>th</sup> reference frame as defined by the Denavit-Hartenberg convention. In this case T_Ro0 is just a rigid rotation which aligns the z-axis with the first joint of the waist. The second matrix T_0n corresponds to the Denavit-Hartenberg description of the forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the nth reference frame being n the number of degrees of freedom. The forward kinematic in this case includes the waist and the left arm forward kinematics.</p> <p>The matrix T_0n is itself the composition of n matrices as defined by the DH convention: <code>T_0n = T_01 T_12 ... T_(n-1)n</code>. Here is the updated matlab code for computing the forward kinematics with the Denavit Hartenberg notation.</p> <p>The hand reference frame is located in the palm as shown in the CAD figure. The '''x''' axis is in '''red'''. The '''y''' axis is in '''green'''. The '''z''' axis is in blue. </p> <p>Here is the matrix T_Ro0:</p> 0 -1 0 0 0 0 -1 0 1 0 0 0 0 0 0 1 <p>Here is the table of the actual DH parameters for left arm v1.</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 23.3647 -143.3 -pi/2 105 + (-59 -&gt; 59) i = 3 0 107.74 -pi/2 90 + (5 -&gt; -95) i = 4 0 0 pi/2 -90 + (0 -&gt; 160.8) i = 5 15 152.28 -pi/2 75 + (-37 -&gt; 100) i = 6 -15 0 pi/2 5.5 -&gt; 106 i = 7 0 137.3 pi/2 -90 + (-50 -&gt; 50) i = 8 0 0 pi/2 90 + (10 -&gt; -65) i = 9 62.5 -16 0 (-25 -&gt; 25) <p>Here is the table of the actual DH parameters for left arm v1.7.</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 23.3647 -143.3 -pi/2 105 + (-59 -&gt; 59) i = 3 0 107.74 -pi/2 90 + (5 -&gt; -95) i = 4 0 0 pi/2 -90 + (0 -&gt; 160.8) i = 5 15 152.28 -pi/2 75 + (-37 -&gt; 100) i = 6 -15 0 pi/2 5.5 -&gt; 106 i = 7 0 141.3 pi/2 -90 + (-50 -&gt; 50) i = 8 0 0 pi/2 90 + (10 -&gt; -65) i = 9 62.5 -16 0 (-25 -&gt; 25) <p>Here is the table of the actual DH parameters for left arm v2.</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 23.3647 -143.3 -pi/2 105 + (-59 -&gt; 59) i = 3 0 107.74 -pi/2 90 + (5 -&gt; -95) i = 4 0 0 pi/2 -90 + (0 -&gt; 160.8) i = 5 15 152.28 -pi/2 75 + (-37 -&gt; 100) i = 6 -15 0 pi/2 5.5 -&gt; 106 i = 7 0 141.3 pi/2 -90 + (-50 -&gt; 50) i = 8 0 0 pi/2 90 + (10 -&gt; -65) i = 9 62.5 -25.98 0 (-25 -&gt; 25)"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-arms/#right","title":"Right","text":"<p>Here's described how to construct the matrix T_RoRa whose definition is given in ICubForwardKinematics. The matrix is constructed in two steps i.e. T_RoRa = T_Ro0 * T_0n. The first matrix T_Ro0 describes the rigid roto-translation from the root reference frame to points in the 0<sup>th</sup> reference frame as defined by the Denavit-Hartenberg convention. In this case T_Ro0 is just a rigid rotation which aligns the z-axis with the first joint of the waist. The second matrix T_0n corresponds to the Denavit-Hartenberg description of the forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the nth reference frame being n the number of degrees of freedom. The forward kinematic in this case includes the waist and the right arm forward kinematics.</p> <p>The matrix T_0n is itself the composition of n matrices as defined by the DH convention: <code>T_0n = T_01 T_12 ... T_(n-1)n</code>.  Here is the updated matlab code for computing the forward kinematics with the Denavit Hartenberg notation.</p> <p>The hand reference frame is located in the palm as shown in the CAD figure. The '''x''' axis is in '''red'''. The '''y''' axis is in '''green'''. The '''z''' axis is in blue. </p> <p>Here is the matrix T_Ro0:</p> 0 -1 0 0 0 0 -1 0 1 0 0 0 0 0 0 1 <p>Here is the table of the actual DH parameters for right arm v1.</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 -23.3647 -143.3 pi/2 -105 + (-59 -&gt; 59) i = 3 0 -107.74 pi/2 -90 + (5 -&gt; -95) i = 4 0 0 -pi/2 -90 +(0 -&gt; 160.8) i = 5 -15.0 -152.28 -pi/2 -105 + (-37 -&gt; 100) i = 6 15.0 0 pi/2 5.5 -&gt; 106 i = 7 0 -137.3 pi/2 -90 + (-50 -&gt; 50) i = 8 0 0 pi/2 90 + (10 -&gt; -65) i = 9 62.5 16 0 (-25 -&gt; 25) + 180 <p>Here is the table of the actual DH parameters for right arm v1.7.</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 -23.3647 -143.3 pi/2 -105 + (-59 -&gt; 59) i = 3 0 -107.74 pi/2 -90 + (5 -&gt; -95) i = 4 0 0 -pi/2 -90 +(0 -&gt; 160.8) i = 5 -15.0 -152.28 -pi/2 -105 + (-37 -&gt; 100) i = 6 15.0 0 pi/2 5.5 -&gt; 106 i = 7 0 -141.3 pi/2 -90 + (-50 -&gt; 50) i = 8 0 0 pi/2 90 + (10 -&gt; -65) i = 9 62.5 16 0 (-25 -&gt; 25) + 180 <p>Here is the table of the actual DH parameters for right arm v2.</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 -23.3647 -143.3 pi/2 -105 + (-59 -&gt; 59) i = 3 0 -107.74 pi/2 -90 + (5 -&gt; -95) i = 4 0 0 -pi/2 -90 +(0 -&gt; 160.8) i = 5 -15.0 -152.28 -pi/2 -105 + (-37 -&gt; 100) i = 6 15.0 0 pi/2 5.5 -&gt; 106 i = 7 0 -141.3 pi/2 -90 + (-50 -&gt; 50) i = 8 0 0 pi/2 90 + (10 -&gt; -65) i = 9 62.5 25.98 0 (-25 -&gt; 25) + 180"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-fingers/","title":"iCub Foward Kinematics - Fingers","text":""},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-fingers/#left","title":"Left","text":"<p>This page provides the forward kinematics of the thumb, the index and the middle fingers of the left hand. It describes how to construct all the finger matrices T_RoLt (thumb), T_RoLi (index) and T_RoLm (middle). Each matrix is constructed in two steps i.e. T_RoLfin = T_Ro0fin * T_0nfin (where fin is t for the thumb, i for the index and m for the middle). The first matrix T_Ro0 describes the rigid roto-translation from the end effector reference frame (described in ICubFowardKinematics) to points in the 0<sup>th</sup> reference frame as defined by the Denavit-Hartenberg convention. The second matrix T_0n corresponds to the Denavit-Hartenberg description of the forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the nth reference frame being n the number of degrees of freedom.</p> <p>The matrix T_0n is itself the composition of n matrices as defined by the DH convention: <code>T_0n = T_01 T_12 ... T_(n-1)n</code>.</p> <p>The frames are oriented as in the Figure. The '''x''' axis is in '''red'''. The '''y''' axis is in '''green'''. The '''z''' axis is in blue. </p> <p></p>"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-fingers/#thumb","title":"THUMB","text":"<p>Here is the matrix T_Ro0t for the thumb version a (lengths are in mm):</p> 0.121132 0.043736 0.991672 -25.391770 -0.958978 0.263104 0.105535 -11.783901 0.256297 -0.963776 0.073812 1.7018 0 0 0 1 <p>Here is the matrix T_Ro0t for the thumb version b (lengths are in mm):</p> 0.478469 0.063689 0.875792 -24.029759 -0.878095 0.039246 0.476873 -11.93433 0.004 -0.997198 0.074703 1.68926 0 0 0 1 <p>Here is the table of the actual DH parameters for thumb.</p> Link i / H \u2013 D Ai (mm) di (mm) alpha i (rad) theta_i (deg) i = 0 0 0 pi/2 10 -&gt; 90 i = 1 21.0 -5.6 0 0 (dummy link) i = 2 26.0 0 0 0 -&gt; 90 i = 3 22.0 0 0 0 -&gt; 90 i = 4 16.8 0 -pi/2 0 -&gt; 90"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-fingers/#index","title":"INDEX","text":"<p>Here is the matrix T_Ro0i for the index (lengths are in mm):</p> 0.898138 0.439714 0.0 2.45549 -0.43804 0.89472 -0.087156 -25.320433 -0.038324 0.078278 0.996195 10.973325 0 0 0 1 <p>Here is the table of the actual DH parameters for index.</p> Link i / H \u2013 D Ai (mm) di (mm) alpha i (rad) theta_i (deg) i = 0 14.8 0 -pi/2 0 -&gt; 20 i = 1 25.9 0 0 0 -&gt; 90 i = 2 22.0 0 0 0 -&gt; 90 i = 3 16.8 0 -pi/2 0 -&gt; 90"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-fingers/#middle","title":"MIDDLE","text":"<p>Here is the matrix T_Ro0m for the middle (lengths are in mm):</p> 1.0 0.0 0.0 17.8 0.0 0.0 1.0 -8.30233 0.0 -1.0 0.0 11.8 0 0 0 1 <p>Here is the table of the actual DH parameters for middle.</p> Link i / H \u2013 D Ai (mm) di (mm) alpha i (rad) theta_i (deg) i = 0 28.5 0 0 0 -&gt; 90 i = 1 24.0 0 0 0 -&gt; 90 i = 2 16.8 0 -pi/2 0 -&gt; 90"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-fingers/#right","title":"Right","text":"<p>This page provides the forward kinematics of the thumb, the index and the middle fingers of the right hand. It describes how to construct all the finger matrices T_RoRt (thumb), T_RoRi (index) and T_RoRm (middle). Each matrix is constructed in two steps i.e. T_RoRfin = T_Ro0fin * T_0nfin (where fin is t for the thumb, i for the index and m for the middle). The first matrix T_Ro0 describes the rigid roto-translation from the end effector reference frame (described in ICubFowardKinematics) to points in the 0<sup>th</sup> reference frame as defined by the Denavit-Hartenberg convention. The second matrix T_0n corresponds to the Denavit-Hartenberg description of the forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the nth reference frame being n the number of degrees of freedom.</p> <p>The matrix T_0n is itself the composition of n matrices as defined by the DH convention: <code>T_0n = T_01 T_12 ... T_(n-1)n</code>.</p> <p>The frames are oriented as in the Figure. The '''x''' axis is in '''red'''. The '''y''' axis is in '''green'''. The '''z''' axis is in blue. .</p> <p></p>"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-fingers/#thumb_1","title":"THUMB","text":"<p>Here is the matrix T_Ro0t for the thumb version a (lengths are in mm):</p> 0.121132 0.043736 -0.991672 -25.391770 -0.958978 0.263104 -0.105535 -11.783901 0.256297 0.963776 0.073812 -1.7018 0 0 0 1 <p>Here is the matrix T_Ro0t for the thumb version b (lengths are in mm):</p> 0.478469 0.063689 -0.875792 -24.029759 -0.878095 0.039246 -0.476873 -11.93433 0.004 0.997198 0.074703 -1.68926 0 0 0 1 <p>Here is the table of the actual DH parameters for thumb.</p> Link i / H \u2013 D Ai (mm) di (mm) alpha i (rad) theta_i (deg) i = 0 0 0 -pi/2 10 -&gt; 90 i = 1 21.0 5.6 0 0 (dummy link) i = 2 26.0 0 0 0 -&gt; 90 i = 3 22.0 0 0 0 -&gt; 90 i = 4 16.8 0 -pi/2 0 -&gt; 90"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-fingers/#index_1","title":"INDEX","text":"<p>Here is the matrix T_Ro0i for the index (lengths are in mm):</p> 0.898138 0.439714 0.0 2.45549 -0.43804 0.89472 0.087156 -25.320433 0.038324 -0.078278 0.996195 -10.973325 0 0 0 1 <p>Here is the table of the actual DH parameters for index.</p> Link i / H \u2013 D Ai (mm) di (mm) alpha i (rad) theta_i (deg) i = 0 14.8 0 pi/2 0 -&gt; 20 i = 1 25.9 0 0 0 -&gt; 90 i = 2 22.0 0 0 0 -&gt; 90 i = 3 16.8 0 -pi/2 0 -&gt; 90"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-fingers/#middle_1","title":"MIDDLE","text":"<p>Here is the matrix T_Ro0m for the middle (lengths are in mm):</p> 1.0 0.0 0.0 17.8 0.0 0.0 -1.0 -8.30233 0.0 1.0 0.0 -11.8 0 0 0 1 <p>Here is the table of the actual DH parameters for middle.</p> Link i / H \u2013 D Ai (mm) di (mm) alpha i (rad) theta_i (deg) i = 0 28.5 0 0 0 -&gt; 90 i = 1 24.0 0 0 0 -&gt; 90 i = 2 16.8 0 -pi/2 0 -&gt; 90"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-head/","title":"iCub Forward Kinematics - Head","text":""},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-head/#v1","title":"V1","text":"<p>Here's described how to construct the matrices \\(T_{RoLe}\\) and \\(T_{RoRe}\\) whose definition is given in ICubForwardKinematics. The matrices are constructed in two steps i.e. \\(T_{RoRe} = T_{Ro0} * T_{0n}\\) and \\(T_{RoLe} = T_{Ro0} * T'_{0n}\\). The first matrix \\(T_{Ro0}\\) describes the rigid roto-translation from the root reference frame to points in the 0<sup>th</sup> reference frame as defined by the Denavit-Hartenberg convention. In this case \\(T_{Ro0}\\) is just a rigid rotation which aligns the z-axis with the first joint of the waist. The second matrices $T_{0n} and \\(T'_{0n}\\) correspond to the Denavit-Hartenberg description of the right and left eye forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the nth reference frame being n the number of degrees of freedom. The forward kinematic \\(T_{0n}\\) in this case includes the waist and the right eye forward kinematics. The forward kinematic \\(T'_{0n}\\) in this case includes the waist and the left eye forward kinematics.</p> <p>The matrices \\(T_{0n}\\) and \\(T'_{0n}\\) are themselves the composition of n matrices as defined by the DH convention: \\(T_0n = T_{01} T_{12} ... T_{(n-1)n}\\) and \\(T'_{0n} = T'_{01} T'_{12} ... T'_{(n-1)n}\\). Here is the updated matlab code for computing the forward kinematics with the Denavit Hartenberg notation.</p> <p>The eyes reference frames are located in the palm as shown in the CAD figure.  The \\(X\\) axis is in red. The \\(Y\\) axis is in green. The \\(Z\\) axis is in blue. </p> <p>Here is the matrix <code>T\\_Ro0</code>:</p> 0 -1 0 0 0 0 -1 0 1 0 0 0 0 0 0 1 <p>Here is the table of the actual DH parameters which describe \\(T_{01}\\) ,\\(T_{12}\\), ... \\(T_{(n-1)n}\\).</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 2.31 -193.3 -pi/2 -90 + (-59 -&gt; 59) i = 3 33 0 pi/2 90 + (-40 -&gt; 30) i = 4 0 1 -pi/2 -90 + (-70 -&gt; 60) i = 5 -54 82.5 -pi/2 90 + (-55 -&gt; 55) i = 6 0 34 -pi/2 -35 -&gt; 15 i = 7 0 0 pi/2 -90 + (-50 -&gt; 50) <p>Here is the table of the actual DH parameters which describe \\(T'_{01}, T'_{12}, ... T'_{(n-1)n}\\).</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 2.31 -193.3 -pi/2 -90 + (-59 -&gt; 59) i = 3 33 0 pi/2 90 + (-40 -&gt; 30) i = 4 0 1 -pi/2 -90 + (-70 -&gt; 60) i = 5 -54 82.5 -pi/2 90 + (-55 -&gt; 55) i = 6 0 -34 -pi/2 -35 -&gt; 15 i = 7 0 0 pi/2 -90 + (-50 -&gt; 50) <pre><code>Joint Poses (x y z, roll, pitch, yaw) w.r.t. root:\nEyes tilt (G\\_sl6) = -62.81 0 340.8 1.57079 0 0\nRight Eye (G\\_sl7) = -62.81 34 340.8 -3.14159 0 0\nLeft Eye (Gp\\_sl7) = -62.81 -34 340.8 -3.14159 0 0\nRight Eye (G\\_sl8) = -62.81 34 340.8 0 1.57079 0\nLeft Eye (Gp\\_sl8) = -62.81 -34 340.8 0 1.57079 0\n</code></pre>"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-head/#v2","title":"V2","text":"<p>Here's described how to construct the matrices \\(T_{RoLe}\\) and \\(T_{RoRe}\\) whose definition is given in ICubForwardKinematics. The matrices are constructed in three steps i.e. \\(T_{RoRe} = T_{Ro0} * T_{0n} * T_{nE}\\) and \\(T_{RoLe} = T_{Ro0} * T'_{0n} * T_{nE}\\). The first matrix \\(T_{Ro0}\\) describes the rigid roto-translation from the root reference frame to points in the 0<sup>th</sup> reference frame as defined by the Denavit-Hartenberg convention. In this case \\(T_{Ro0}\\) is just a rigid rotation which aligns the z-axis with the first joint of the waist. The second matrices \\(T_{0n}\\) and \\(T'_{0n}\\) correspond to the Denavit-Hartenberg description of the right and left eye forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the nth reference frame being n the number of degrees of freedom. The forward kinematic \\(T_{0n}\\) in this case includes the waist and the right eye forward kinematics. The forward kinematic \\(T'_{0n}\\) in this case includes the waist and the left eye forward kinematics. The last matrix  \\(T_{nE}\\) represents the roto-translation from the nth reference frame to the one placed on the camera sensor.</p> <p>The matrices \\(T_{0n}\\) and \\(T'_{0n}\\) are themselves the composition of n matrices as defined by the DH convention: \\(T_{0n} = T_{01} T_{12} ... T_{(n-1)n}\\)  and  $ T'{0n} = T' T'{12} ... T'$. Here is the updated matlab code for computing the forward kinematics with the Denavit Hartenberg notation.</p> <p>The eyes reference frames are located in the palm as shown in the CAD figure.  The \\(X\\) axis is in red. The  \\(Y\\) axis is in green. The  \\(Z\\) axis is in blue.</p> <p>Here is the matrix \\(T_{Ro0}\\) :</p> \\[ \\begin{equation} T_{Ro0} =  \\begin{bmatrix} 0 &amp; -1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; -1 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ \\end{bmatrix} \\end{equation} \\] <p>Here is the table of the actual DH parameters which describe \\(T_{01},T_{12}, \\dots T_{(n-1)n}\\) :</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 0 -223.3 -pi/2 -90 + (-40 -&gt; 22) i = 3 9.5 0 pi/2 90 + (-20 -&gt; 20) i = 4 0 0 -pi/2 -90 + (-50 -&gt; 50) i = 5 -50.9 82.05 -pi/2 90 + (-30 -&gt; 30) i = 6 0 34 -pi/2 -15 -&gt; 15 i = 7 0 0 pi/2 -90 + (-30 -&gt; 30) <p>Here is the table of the actual DH parameters which describe \\(T'_{01},T'_{12}, \\dots T'_{(n-1)n}\\) :</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 0 -223.3 -pi/2 -90 + (-40 -&gt; 22) i = 3 9.5 0 pi/2 90 + (-20 -&gt; 20) i = 4 0 0 -pi/2 -90 + (-50 -&gt; 50) i = 5 -50.9 82.05 -pi/2 90 + (-30 -&gt; 30) i = 6 0 -34 -pi/2 -15 -&gt; 15 i = 7 0 0 pi/2 -90 + (-30 -&gt; 30) <p>For both left and right eye, the end-effector matrix \\(T_{nE}\\) from the last link to the camera sensor is:</p> \\[ \\begin{equation} T_{nE} =  \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; -2.15mm \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ \\end{bmatrix} \\end{equation} \\]"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-imu/","title":"iCub Forward Kinematics - IMU","text":""},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-imu/#v1","title":"V1","text":"<p>Here's described how to construct the matrix T_RoIs whose definition is given in ICubForwardKinematics. The matrix is constructed in three steps i.e. <code>T_RoIs = T_Ro0 * T_0n * T_nIs</code>. The first matrix T_Ro0 describes the rigid roto-translation from the root reference frame to points in the 0<sup>th</sup> reference frame as defined by the Denavit-Hartenberg convention. In this case T_Ro0 is just a rigid rotation which aligns the z-axis with the first joint of the waist. The second matrix T_0n correspond to the Denavit-Hartenberg description of the waist and neck forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the nth reference frame being n the number of degrees of freedom. The forward kinematic T_0n in this case includes the waist and the neck forward kinematics.</p> <p>The matrix T_0n is itself the composition of n matrices as defined by the DH convention: <code>T_0n = T_01 T_12 ... T_(n-1)n</code>.  Here is the updated matlab code for computing the forward kinematics with the Denavit Hartenberg notation.</p> <p>The sensor reference frame is located in the palm as shown in the CAD figure.  The '''x''' axis is in '''red'''. The '''y''' axis is in '''green'''. The '''z''' axis is in blue. </p> <p>Here is the matrix <code>T\\_Ro0</code>:</p> 0 -1 0 0 0 0 -1 0 1 0 0 0 0 0 0 1 <p>Here is the table of the actual DH parameters which describe <code>T\\_01,T\\_12, ... T\\_(n-1)n</code>.</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 2.31 -193.3 -pi/2 -90 + (-59 -&gt; 59) i = 3 33 0 pi/2 90 + (-40 -&gt; 30) i = 4 0 1 -pi/2 -90 + (-70 -&gt; 60) i = 5 22.5 100.5 -pi/2 90 + (-55 -&gt; 55) <p>Here is the matrix <code>T\\_nIs</code>:</p> 1 0 0 0 0 0 -1 0 0 1 0 6.6 0 0 0 1 <p>In some circumstances it might be convenient to think of coding T_nls as a further virtual link located at the end of the chain and with its joint constantly kept at 0 value. The DH parameters of this virtual link are:</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 6 0 6.6 pi/2 0"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-imu/#v2","title":"V2","text":"<p>Here's described how to construct the matrix T_RoIs whose definition is given in ICubForwardKinematics. The matrix is constructed in three steps i.e. <code>T_RoIs = T_Ro0 * T_0n * T_nIs</code>. The first matrix T_Ro0 describes the rigid roto-translation from the root reference frame to points in the 0<sup>th</sup> reference frame as defined by the Denavit-Hartenberg convention. In this case T_Ro0 is just a rigid rotation which aligns the z-axis with the first joint of the waist. The second matrix T_0n correspond to the Denavit-Hartenberg description of the waist and neck forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the nth reference frame being n the number of degrees of freedom. The forward kinematic T_0n in this case includes the waist and the neck forward kinematics.</p> <p>The matrix T_0n is itself the composition of n matrices as defined by the DH convention: <code>T_0n = T_01 T_12 ... T_(n-1)n</code>.  Here is the updated matlab code for computing the forward kinematics with the Denavit Hartenberg notation.</p> <p>The sensor reference frame is located in the palm as shown in the CAD figure.  The '''x''' axis is in '''red'''. The '''y''' axis is in '''green'''. The '''z''' axis is in blue. </p> <p>Here is the matrix <code>T\\_Ro0</code>:</p> 0 -1 0 0 0 0 -1 0 1 0 0 0 0 0 0 1 <p>Here is the table of the actual DH parameters which describe <code>T\\_01,T\\_12, ... T\\_(n-1)n</code>.</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 32 0 pi/2 -22 -&gt; 84 i = 1 0 -5.5 pi/2 -90 + (-39 -&gt; 39) i = 2 0 -223.3 -pi/2 -90 + (-59 -&gt; 59) i = 3 9.5 0 pi/2 90 + (-40 -&gt; 30) i = 4 0 0 -pi/2 -90 + (-70 -&gt; 60) i = 5 18.5 110.8 -pi/2 90 + (-55 -&gt; 55) <p>Here is the matrix <code>T\\_nIs</code>:</p> 1 0 0 0 0 0 -1 0 0 1 0 6.6 0 0 0 1 <p>In some circumstances it might be convenient to think of coding T_nls as a further virtual link located at the end of the chain and with its joint constantly kept at 0 value. The DH parameters of this virtual link are:</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 6 0 6.6 pi/2 0"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-legs/","title":"iCub Forward Kinematics - Legs","text":""},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-legs/#left-v1","title":"Left-V1","text":"<p>Here's described how to construct the matrix T_RoLf whose definition is given in ICubForwardKinematics. The matrix is constructed in two steps i.e. T_RoLf = T_Ro0 * T_0n. The first matrix T_Ro0 describes the rigid roto-translation from the root reference frame to points in the 0<sup>th</sup> reference frame as defined by the Denavit-Hartenberg convention. In this case T_Ro0 is just a rigid rotation which aligns the z-axis with the first joint of the waist. The second matrix T_0n corresponds to the Denavit-Hartenberg description of the forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the nth reference frame being n the number of degrees of freedom.</p> <p>The matrix T_0n is itself the composition of n matrices as defined by the DH convention: <code>T_0n = T_01 T_12 ... T_(n-1)n</code>. Here is the updated matlab code for computing the forward kinematics with the Denavit Hartenberg notation.</p> <p>The foot reference frame is located in the palm as shown in the CAD figure. The '''x''' axis is in '''red'''. The '''y''' axis is in '''green'''. The '''z''' axis is in blue. </p> <p>Here is the matrix T_Ro0:</p> 1 0 0 0 0 0 1 -68.1 0 -1 0 -119.9 0 0 0 1 <p>Here is the table of the actual DH parameters which describe T_01, T_12, ... T_(n-1)n.</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 0 0 -pi/2 90 + (-44 -&gt; +132) i = 1 0 0 -pi/2 90 + (-119 - &gt; +17) i = 2 0 -223.6 pi/2 -90 + (-79 -&gt; +79) i = 3 -213 0 pi 90 + (-125 -&gt; +0) i = 4 0 0 -pi/2 -42 -&gt; +21 i = 5 -41 0 0 -24 -&gt; +24"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-legs/#left-v2_5","title":"Left-V2_5","text":"<p>This page describes how to construct the matrix T_RoLf whose definition is given in ICubForwardKinematics. The matrix is constructed in two steps i.e. T_RoLf = T_Ro0 * T_0n. The first matrix T_Ro0 describes the rigid roto-translation from the root reference frame to points in the 0*th* reference frame as defined by the Denavit-Hartenberg convention. In this case T_Ro0 is just a rigid rotation which aligns the z-axis with the first joint of the waist. The second matrix T_0n corresponds to the Denavit-Hartenberg description of the forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the n*th* reference frame being n the number of degrees of freedom.</p> <p>The matrix T_0n is itself the composition of n matrices as defined by the DH convention: <code>T\\_0n = T\\_01 T\\_12 ... T\\_(n-1)n</code>.  Here is the updated matlab code for computing the forward kinematics with the Denavit Hartenberg notation.</p> <p>The foot reference frame is located at its sole as shown in the CAD figure. The x axis is in red. The y axis is in green. The z axis is in blue.</p> <p></p> <p>Here is the matrix T_Ro0:</p> 1 0 0 0 0 0 1 -68.1 0 -1 0 -119.9 0 0 0 1 <p>Here is the table of the actual DH parameters which describe T_01, T_12, ... T_(n-1)n.</p> Link i / H \u2013 D a_i (mm) d_i (mm) alpha_i (rad) theta_{i} + (ang. range) (deg) i = 0 0 0 -pi/2 90 + (-44 -&gt; +132) i = 1 0 0 -pi/2 90 + (-119 - &gt; +17) i = 2 -0.9175 -234.545 pi/2 -90 + (-79 -&gt; +79) i = 3 -200.5 0 pi 90 + (-125 -&gt; +0) i = 4 0 0 -pi/2 0 + (-42 -&gt; +21) i = 5 -68.05 -3.5 0 0 + (-24 -&gt; +24)"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-legs/#icubwaistrightlegkinematics","title":"ICubWaistRightLegKinematics","text":""},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-legs/#right-v1","title":"Right-V1","text":"<p>This page describes how to construct the matrix T_RoRf whose definition is given in ICubForwardKinematics. The matrix is constructed in two steps i.e. T_RoRf = T_Ro0 * T_0n. The first matrix T_Ro0 describes the rigid roto-translation from the root reference frame to points in the 0<sup>th</sup> reference frame as defined by the Denavit-Hartenberg convention. In this case T_Ro0 is just a rigid rotation which aligns the z-axis with the first joint of the waist. The second matrix T_0n corresponds to the Denavit-Hartenberg description of the forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the nth reference frame being n the number of degrees of freedom.</p> <p>The matrix T_0n is itself the composition of n matrices as defined by the DH convention: <code>T_0n = T_01 T_12 ... T_(n-1)n</code>. Here is the updated matlab code for computing the forward kinematics with the Denavit Hartenberg notation.</p> <p>The foot reference frame is located in the palm as shown in the CAD figure. The x axis is in red. The y axis is in green. The z axis is in blue.</p> <p>Here is the matrix T_Ro0:</p> 1 0 0 0 0 0 1 68.1 0 -1 0 -119.9 0 0 0 1 <p>Here is the table of the actual DH parameters which describe T_01, T_12, ... T_(n-1)n.</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i (deg) i = 0 0 0 pi/2 90 + (-44 -&gt; +132) i = 1 0 0 pi/2 90 + (-119 - &gt; +17) i = 2 0 223.6 -pi/2 -90 + (-79 -&gt; +79) i = 3 -213 0 pi 90 + (-125 -&gt; +0) i = 4 0 0 pi/2 -42 -&gt; +21 i = 5 -41 0 pi (-24 -&gt; +24)"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics-legs/#right-v2_5","title":"Right-V2_5","text":"<p>This page describes how to construct the matrix T_RoLf whose definition is given in ICubForwardKinematics. The matrix is constructed in two steps i.e. T_RoLf = T_Ro0 * T_0n. The first matrix T_Ro0 describes the rigid roto-translation from the root reference frame to points in the  0''th'' reference frame as defined by theDenavit-Hartenberg convention.  In this case T_Ro0 is just a rigid rotation which aligns the z-axis with the first joint of the waist. The second matrix T_0n corresponds to the Denavit-Hartenberg description of the forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the n''th'' reference frame being n the number of degrees of freedom.</p> <p>The matrix T_0n is itself the composition of n matrices as defined by the DH convention: <code>T_0n = T_01 T_12 ... T_(n-1)n</code>.  Here is the updated matlab code for computing the forward kinematics with the Denavit Hartenberg notation.</p> <p>The foot reference frame is located at its sole as shown in the CAD figure. The '''x''' axis is in '''red'''. The '''y''' axis is in '''green'''. The '''z''' axis is in blue. </p> <p></p> <p>Here is the matrix T_Ro0:</p> 1 0 0 0 0 0 1 68.1 0 -1 0 -119.9 0 0 0 1 <p>Here is the table of the actual DH parameters which describe T_01, T_12, ... T_(n-1)n.</p> Link i / H \u2013 D Ai (mm) d_i (mm) alpha_i (rad) theta_i + (ang. range) (deg) i = 0 0 0 pi/2 90 + (-44 -&gt; +132) i = 1 0 0 pi/2 90 + (-119 -&gt; +17) i = 2 -0.9175 234.545 -pi/2 -90 + (-79 -&gt; +79) i = 3 -200.5 0 pi 90 + (-125 -&gt; +0) i = 4 0 0 pi/2 0 + (-42 -&gt; +21) i = 5 -68.05 3.5 pi 0 + (-24 -&gt; +24)"},{"location":"icub_kinematics/icub-forward-kinematics/icub-forward-kinematics/","title":"iCub Forward Kinematics","text":"<p>The iCub forward kinematics are described with respect to a (root) reference frame which is positioned at the level of the waist in the center of the robot as represented in the following pic (colored cylinders: the x axis is in red, the y axis is in green, the z axis is in blue).</p> <p>The origin of the root reference frame is a point on the axis of rotation of the torso pitch. Among all points in this axis, the origin is located in the middle of the robot in between the two legs.</p> <ol> <li>The z axis of the root reference frame is parallel to gravity but pointing upwards.</li> <li>The x axis of the root reference frame points behind the robot.</li> <li>The y axis of the root reference frame points laterally and is chosen according to the right hand rule.</li> </ol> <p>For simpler visualization the root reference frame of the forward kinematics is depicted in the picture below (light blue) (for the exact position refer the CAD pictures above):</p> <p></p> <p>Seven additional reference frames are defined with respect to this common root reference frame. The reference frames are located as shown in the CAD figure. The x axis is in red. The y axis is in green. The z axis is in blue.</p> <ul> <li>Left hand reference frame (see the CAD picture)</li> <li>Right hand reference frame (see the CAD picture)</li> <li>Left Fingers reference frame (see the CAD picture)</li> <li>Right Fingers reference frame (see the CAD picture)</li> <li>Left foot reference frame (see the CAD picture)</li> <li>Right foot reference frame (see the CAD picture)</li> <li>Left eye reference frame (see the CAD picture)</li> <li>Right eye reference frame (see the CAD picture)</li> <li>Inertia sensor reference frame (see the CAD picture)</li> </ul> <p>The roto-translation which converts a point in one of these reference frames to the root reference frame are given by the following SE(3) matrices:</p> End effector Reference frame SE(3) Matrix Description Matlab files All -&gt; Root - Whole body (all reference frames) ICubFwdKinNew.zip Left arm -&gt; Root T_RoLa iCub Left Arm Forward Kinematics ICubFwdKinNew.zip Right arm -&gt; Root T_RoRa  iCub Right Arm Forward Kinematics ICubFwdKinNew.zip Left hand -&gt; Root T_RoLt, T_RoLi, T_RoLm  iCub Left Fingers Forward Kinematics - Right hand -&gt; Root T_RoRt, T_RoRi, T_RoRm  iCub Right Fingers Forward Kinematics - Left foot V1 -&gt; Root T_RoLf  iCub Left Leg Forward Kinematics V1 ICubFwdKinNew.zip Left foot V2.5 -&gt; Root T_RoLf  iCub Left Leg Forward Kinematics V2.5 ICubFwdKinNewV2.5.zip Right foot V1 -&gt; Root T_RoRf  iCub Right Leg Forward Kinematics V1 ICubFwdKinNew.zip Right foot V2.5 -&gt; Root T_RoRf  iCub Right Leg Forward Kinematics V2.5 ICubFwdKinNewV2.5.zip Left eye V1 -&gt; Root T_RoLe  iCub Head Forward Kinematics (left eye) V1 ICubFwdKinNew.zip Left eye V2 -&gt; Root T_RoLe  iCub Head Forward Kinematics (left eye) V2 ICubFwdKinNewV2.zip Right eye V1 -&gt; Root T_RoRe  iCub Head Forward Kinematics (right eye) V1 ICubFwdKinNew.zip Right eye V2 -&gt; Root T_RoRe  iCub Head Forward Kinematics (right eye) V2 ICubFwdKinNewV2.zip Inertia sensor V1 -&gt; Root T_RoIs  iCub Inertial Sensor Forward Kinematics V1 ICubFwdKinNew.zip Inertia sensor V2 -&gt; Root T_RoIs  iCub Inertial Sensor Forward Kinematics V2 ICubFwdKinNewV2.zip <p>Each of these matrices is constructed with two steps. The first consists in a rigid roto-translation from the points in the root reference frame to points in the 0<sup>th</sup> reference frame as defined by the Denavit-Hartenberg convention. The second step corresponds to the Denavit-Hartenberg description of the forward kinematic, i.e. the roto-translation from the 0<sup>th</sup> reference frame to the nth reference frame being n the number of degrees of freedom.</p> <p>Finally, the following image shows the root reference frame and all other coordinate systems at each joint of the robot (no hands included), along with the fixed transformation matrices from limbs to base reference frames. The Upper/Lower Torso division has been made according to the iDyn library convention (which is different the one found in iKin).</p> <p></p>"},{"location":"icub_kinematics/icub-joints/icub-joints/","title":"iCub Joints","text":""},{"location":"icub_kinematics/icub-joints/icub-joints/#naming-convention","title":"Naming Convention","text":"<p>The iCub joints are organized into six sub-systems: the <code>head</code>, <code>left arm</code>, <code>right arm</code>, <code>torso</code>, <code>left leg</code>, and <code>right leg</code>.</p> <p>The joints are numbered to give a natural open kinematic chain, with the base reference frame on the torso. 0 is the most proximal joint, N_max the most distal joint. The key reference point on the body is the base of the neck.</p> <p>The joint numbers are used when calling methods of the motor control device interfaces. A mechanism will be available for mapping from joint identifiers to numbers. Joint identifiers are unique across the body, except for bilateral symmetry - left or right is specified separately.</p>"},{"location":"icub_kinematics/icub-joints/icub-joints/#head-10","title":"Head 1.0","text":"Joint number Can Address Identifier Description Notes 0 3 neck_pitch Neck pitch Assuming the standard definition of roll, pitch and yaw with respect to a gravity oriented reference frame aligned with the torso main dimensions 1 3 neck_roll Neck roll -- 2 3 neck_yaw Neck yaw -- 3 1 eyes_tilt Eyes tilt Common tilt of the eyes 4 1 eyes_version Eyes version Common version, the eyes move together, synchronized in the DSP controller (see also Vergence Version) 5 1 eyes_vergence Eyes vergence Vergence control, the eyes move together, synchronized in the DSP controller (see also Vergence Version)"},{"location":"icub_kinematics/icub-joints/icub-joints/#head-20","title":"Head 2.0","text":"<p>The head has 6 joints in the standard configuration (without the facial features).</p> Joint number Can Address Motors Identifier Description Notes 0 1 0M0-0M1 neck_pitch Neck pitch Assuming the standard definition of roll, pitch and yaw with respect to a gravity oriented reference frame aligned with the torso main dimensions 1 1 0M0-0M1 neck_roll Neck roll -- 2 3 1M0 neck_yaw Neck yaw -- 3 3 1M1 eyes_tilt Eyes tilt Common tilt of the eyes 4 4 1M2-1M3 eyes_version Eyes version Common version, the eyes move together, synchronized in the DSP controller (see also Vergence Version) 5 4 1M2-1M3 eyes_vergence Eyes vergence Vergence control, the eyes move together, synchronized in the DSP controller (see also Vergence Version)"},{"location":"icub_kinematics/icub-joints/icub-joints/#left-arm","title":"Left Arm","text":"<p>The arm includes the hand for a total of 16 controlled degrees of freedom.</p> Joint Number Can Address Motor Identifier Description Notes 0 x 1B0M0 l_shoulder_pitch Shoulder pitch Front-back movement when the arm is aligned with gravity (post decoupling in firmware) 1 x 1B0M1 l_shoulder_roll Shoulder roll Adduction-abduction movement of the arm (post decoupling in firmware) 2 x 1B1M0 l_shoulder_yaw Shoulder yaw Yaw movement when the arm principal axis is aligned with gravity (post decoupling in firmware) 3 x 1B1M1 l_elbow Elbow -- 4 x 1B2M0 l_wrist_prosup Wrist pronosupination Forearm rotation along the arm principal axis 5 x 1B2M1-1B2M2 l_wrist_pitch Wrist pitch when hand-wrist aligned with the arm principal axis: i.e. this is relative to the forearm (not necessarily to gravity). Decoupling made in firmware 6 x 1B2M1-1B2M2 l_wrist_yaw Wrist yaw Decoupling made in firmware 7 x 1B2M3 l_hand_finger Hand finger adduction/abduction -- 8 x 1B3M0 l_thumb_oppose Thumb opposition -- 9 x 1B3M1 l_thumb_proximal Thumb proximal flexion/extension Single tendon looped 10 x 1B3M2 l_thumb_distal Thumb distal flexion Single tendon + return spring for extension spanning two physical joints 11 x 1B3M3 l_index_proximal Index proximal flexion/extension Single tendon looped 12 x 1B4M0 l_index_distal Index distal flexion Single tendon + return spring for extension spanning two physical joints 13 x 1B4M1 l_middle_proximal Middle proximal flexion/extension Single tendon looped 14 x 1B4M2 l_middle_distal Middle distal flexion Single tendon + return spring for extension spanning two physical joints 15 x 1B4M3 l_pinky Ring and little finger flexion Single tendon + return spring spanning six joints on two fingers"},{"location":"icub_kinematics/icub-joints/icub-joints/#right-arm","title":"Right arm","text":"<p>The arm includes the hand for a total of 16 controlled degrees of freedom.</p> <p>to  Markdown (GitHub-flavored)</p> Joint Number Can Address Motor Identifier Description Notes 0 x 2B0M0 r_shoulder_pitch Shoulder pitch Front-back movement when the arm is aligned with gravity (post decoupling in firmware) 1 x 2B0M1 r_shoulder_roll Shoulder roll Adduction-abduction movement of the arm (post decoupling in firmware) 2 x 2B1M0 r_shoulder_yaw Shoulder yaw Yaw movement when the arm principal axis is aligned with gravity (post decoupling in firmware) 3 x 2B1M1 r_elbow Elbow -- 4 x 2B2M0 r_wrist_prosup Wrist pronosupination Forearm rotation along the arm principal axis 5 x 2B2M1-2B2M2 r_wrist_pitch Wrist pitch when hand-wrist aligned with the arm principal axis: i.e. this is relative to the forearm (not necessarily to gravity). Decoupling made in firmware 6 x 2B2M1-2B2M2 r_wrist_yaw Wrist yaw Decoupling made in firmware 7 x 2B2M3 r_hand_finger Hand finger adduction/abduction -- 8 x 2B3M0 r_thumb_oppose Thumb opposition -- 9 x 2B3M1 r_thumb_proximal Thumb proximal flexion/extension Single tendon looped 10 x 2B3M2 r_thumb_distal Thumb distal flexion Single tendon + return spring for extension spanning two physical joints 11 x 2B3M3 r_index_proximal Index proximal flexion/extension Single tendon looped 12 x 2B4M0 r_index_distal Index distal flexion Single tendon + return spring for extension spanning two physical joints 13 x 2B4M1 r_middle_proximal Middle proximal flexion/extension Single tendon looped 14 x 2B4M2 r_middle_distal Middle distal flexion Single tendon + return spring for extension spanning two physical joints 15 x 2B4M3 r_pinky Ring and little finger flexion Single tendon + return spring spanning six joints on two fingers"},{"location":"icub_kinematics/icub-joints/icub-joints/#torso","title":"Torso","text":"Joint number Motors Identifier Description Notes 0 0B4M0 torso_yaw Torso yaw With respect to gravity 1 0B3M0-0B3M1 torso_roll Torso roll Lateral movement (after decoupling in firmware - differential joint) 2 0B3M0-0B3M1 torso_pitch Torso pitch Front-back movement (after decoupling in firmware - differential joint)"},{"location":"icub_kinematics/icub-joints/icub-joints/#left-leg","title":"Left leg","text":"Joint number Motors Identifier Description Notes 0 3B6M0 l_hip_pitch Hip pitch When the leg principal axis is aligned with gravity (front-back movement) 1 3B6M1 l_hip_roll Hip roll Lateral movement (when leg aligned with gravity) 2 3B5M0 l_hip_yaw Hip yaw Rotation along the leg/tight principal axis 3 3B5M1 l_knee Knee -- 4 3B7M0 l_ankle_pitch Ankle pitch When the calf is aligned with gravity 5 3B7M1 l_ankle_roll Ankle roll When the calf is aligned with gravity"},{"location":"icub_kinematics/icub-joints/icub-joints/#right-leg","title":"Right leg","text":"Joint number Motors Identifier Description Notes 0 3B9M0 r_hip_pitch Hip pitch When the leg principal axis is aligned with gravity (front-back movement) 1 3B9M1 r_hip_roll Hip roll Lateral movement (when leg aligned with gravity) 2 3B8M0 r_hip_yaw Hip yaw Rotation along the leg/tight principal axis 3 3B8M1 r_knee Knee -- 4 3B10M0 r_ankle_pitch Ankle pitch When the calf is aligned with gravity 5 3B10M1 r_ankle_roll Ankle roll When the calf is aligned with gravity"},{"location":"icub_kinematics/icub-joints/icub-joints/#device-and-port-view","title":"Device and Port view","text":"<p>The iCub user will be able to control all joints as they wish, if they wish. For each sub-system, the programmer will be able to retrieve the control interfaces they need.</p> <p>We expect that these control interfaces will normally be accessed remotely, for all but the tightest control loops. There will be three ports per control group. For example, the head group will have three ports named as follows:</p> port name purpose /icub/head/rpc:i commands that require replies /icub/head/command:i streaming commands /icub/head/state:o motor state information <p>A user can see the commands that the <code>rpc:i</code> port supports by using <code>yarp rpc</code> to send it the message <code>help</code>, or browsing to it via the address reported by <code>yarp where</code> and clicking <code>help</code>. For example, typing:</p> <p><pre><code>yarp rpc /icub/head/rpc:i\n</code></pre> followed by: <pre><code>[set] [pos] 0 45\n</code></pre> will command axis 0 of the head (neck_pitch) to 45 degrees. If no motion is seen, it may be necessary to <code>enable</code> the axis: <pre><code> [set] [aen] 0\n</code></pre>  where <code>aen</code> means <code>axis enable</code>. The braces are optional. Of course, there are APIs for all such operations.</p> <p>Here are the identifiers used in port names for the different control groups:</p> Part Side Identifier head -- head arm left left_arm arm right right_arm torso -- torso leg left left_leg leg right right_leg"},{"location":"icub_kinematics/icub-joints/icub-joints/#units","title":"Units","text":"<p>All angles are given in DEGREES.</p>"},{"location":"icub_kinematics/icub-joints-limits/icub-joints-limits/","title":"iCub Joints Limits","text":""},{"location":"icub_kinematics/icub-joints-limits/icub-joints-limits/#range-of-motion-and-joints-limits","title":"Range of motion and joints limits","text":"<p>Mechanical joints are characterized by a Range of Motion (RoM) which defines the admissible displacements. As an example, for rotational joints, the RoM defines the maximum angular displacement, while for prismatic joint, defines the maximum linear displacement. Generally, the RoM is enforced by \"joints limits\". In particular, once the joint \"zero\" (or nominal) configuration has been defined, the RoM can be described by 2 values: an upper limit and a lower limit.</p> <p>In the case of iCub, the kinematic chains are constituted only by rotational joints, for which 3 different RoMs have been defined. Depending on the application, the user can implement a different RoM by modifying the values of the joints limits parameters in the hardware configuration files of motor control device. For more details about how to change the iCub hardware configuration files, please refer to this guide.</p> <ul> <li>CAD RoM - \"JOINT LEVEL\": these limits define the range of motion of each joint considering only the mechanical hardware stops.<ul> <li>USE: manual hard-stop calibration (*).</li> <li>DON'T USE: to run the robot.</li> </ul> </li> <li>Hardware RoM - \"KINEMATIC CHAIN LEVEL\": these limits define the range of motion of each joint considering the entire kinematic chain of the iCub subassemblies (e.g. leg, arm). In particular, the \"Hardware RoM\" avoids self collisions and cover collisions between parent and child links, and prevents damages to the electrical wires.<ul> <li>USE: applications that require a large RoM for selected joints.</li> <li>DON'T USE: when the robot is on the pole.</li> </ul> </li> <li>Software RoM - \"CONTROL LEVEL\": these limits define the safest range of motion for each joint.<ul> <li>USE: daily use of the robot.</li> <li>DON'T USE: -</li> <li>(*) Refer to the Notes section at the end of the page for further details.</li> </ul> </li> </ul>"},{"location":"icub_kinematics/icub-joints-limits/icub-joints-limits/#icub-joints-limits-table","title":"iCub joints limits table","text":""},{"location":"icub_kinematics/icub-joints-limits/icub-joints-limits/#icub-25","title":"iCub 2.5","text":"Joint name CAD Limits Hardware Limits Software Limits Neck pitch [-30, 22] [-30, 22] Neck roll [-20, 20] [-20, 20] Neck yaw [-45, 45] [-45, 45] Torso yaw [-50, 50] [-50, 50] Torso roll [-30, 30] [-30, 30] Torso pitch [-20, 70] [-20, 70] Shoulder pitch [-95.5, 8] [-95.5, 8] Shoulder roll [0, 160] [0, 160] Shoulder yaw [-32, 80] [-32, 80] Elbow [15, 106] [15, 106] Hip pitch [-46.5, 135.5] [-30, 92] [-30, 85] Hip roll [-21, 121] [-15, 92] [0, 85] Hip yaw [-81, 81] [-72, 72] [-70, 70] Knee [-125, 4] [-100, 0] [-100, 0] Ankle pitch [-35, 35] [-30, 30] [-30, 30] Ankle roll [-26, 26] [-20, 20] [-20, 20]"},{"location":"icub_kinematics/icub-joints-limits/icub-joints-limits/#notes","title":"Notes","text":"<ul> <li>The knee joints of the iCub 2.5 can not reach the CAD 'lower limit' because of the electrical wires.</li> </ul> <ul> <li>The hip_roll joints of the iCub 2.5 can reach the CAD 'upper limit' only by moving the pitch and the yaw close to their CAD 'lower limits'.</li> </ul> <ul> <li>The hip_roll joints of the iCub 2.5 can not reach the CAD 'lower limit' because of a mechanic collision between the parent and child link.</li> </ul>"},{"location":"icub_kinematics/icub-model-naming-conventions/icub-model-naming-conventions/","title":"iCub Model naming conventions","text":"<p>For sharing models of the iCub kinematics and dynamics structure (for example in URDF and SDF format) we try to agree on a a set of names for links, joints, degrees of freedom and frames. At the moment this convention does not handle the eyes and the hands, because this degrees of freedom are not currently modeled in the URDF/SDF models of the iCub.</p> <p>For more info on the process used to generated URDF and SDF models of the iCub, please check this page</p>"},{"location":"icub_kinematics/icub-model-naming-conventions/icub-model-naming-conventions/#joints","title":"Joints","text":""},{"location":"icub_kinematics/icub-model-naming-conventions/icub-model-naming-conventions/#1-dof-joints","title":"1-DOF Joints","text":"<p>Note: it could be useful to distinguish between the two different concepts of degree of freedom and joint. For simplicity we decide to ignore for the time being this difference, that is relevant for multi-DOF joints and closed kinematic structures.</p> <p>The joints are mechanism that connect two different links (as defined in the following section) of the robot. 1-DOF joints allow motion only along one direction between the two connected links.</p> <p>For joints an existing convention is introduced here .  For the models we adopt this existing convention, disregarding eyes and hands.</p> Yarp ControlBoard name Joint name left_leg l_hip_pitch left_leg l_hip_roll left_leg l_hip_yaw left_leg l_knee left_leg l_ankle_pitch left_leg l_ankle_roll right_leg r_hip_pitch right_leg r_hip_roll right_leg r_hip_yaw right_leg r_knee right_leg r_ankle_pitch right_leg r_ankle_roll torso torso_pitch torso torso_roll torso torso_yaw head neck_pitch head neck_roll head neck_yaw left_arm l_shoulder_pitch left_arm l_shoulder_roll left_arm l_shoulder_yaw left_arm l_elbow left_arm l_wrist_prosup left_arm l_wrist_pitch left_arm l_wrist_yaw right_arm r_shoulder_pitch right_arm r_shoulder_roll right_arm r_shoulder_yaw right_arm r_elbow right_arm r_wrist_prosup right_arm r_wrist_pitch right_arm r_wrist_yaw"},{"location":"icub_kinematics/icub-model-naming-conventions/icub-model-naming-conventions/#fixed-0-dofs-joints","title":"Fixed (0-DOFs) Joints","text":"<p>When dealing with 6-axis FT sensors, it is convenient to model them as joints that do not allow any motion between the two connected links.</p> <p>In the iCub can be mounted up to 6 6-axis ft sensors.</p> Yarp AnalogSensor name Fixed joint name left_arm l_arm_ft_sensor right_arm r_arm_ft_sensor left_leg l_leg_ft_sensor left_foot l_foot_ft_sensor right_leg r_leg_ft_sensor right_foot r_foot_ft_sensor"},{"location":"icub_kinematics/icub-model-naming-conventions/icub-model-naming-conventions/#links","title":"Links","text":"<p>The links are the physical rigid bodies that constitute the robot. Each link is characterised by a mass (represented in models by the inertial parameters) and a physical shape (represented in models by meshes).</p> <p>For defining the links we are representing the robot as a directed tree, where the <code>root_link</code> is the body that can be attached to the pole, and the meaning of the other links can be deduced by their parent joint, as defined in the previous section.</p> <p>The main idea behind this naming scheme is that \u201cbig\u201d links (roughly speaking, the one that can reasonably interact with the user) are named with intuitive names such as <code>upper_arm</code>, <code>forearm</code>, <code>upper_leg</code>, <code>lower_leg</code>, <code>chest</code>, <code>head</code>, <code>foot</code>, <code>hand</code>. All the little links that instead are part of more complex linkages, take their name from the articulation, such as <code>torso_1</code>, <code>torso_2</code>.</p> Link Name Parent Joint Parent Link root_link l_hip_1 l_hip_pitch root_link l_hip_2 l_hip_roll l_hip_1 l_hip_3 l_leg_ft_sensor l_hip_2 l_upper_leg l_hip_yaw l_hip_3 l_lower_leg l_knee l_upper_leg l_ankle_1 l_ankle_pitch l_lower_leg l_ankle_2 l_ankle_roll l_ankle_1 l_foot l_foot_ft_sensor l_ankle_2 r_hip_1 r_hip_pitch root_link r_hip_2 r_hip_roll r_hip_1 r_hip_3 r_leg_ft_sensor r_hip_2 r_upper_leg r_hip_yaw r_hip_3 r_lower_leg r_knee r_upper_leg r_ankle_1 r_ankle_pitch r_lower_leg r_ankle_2 r_ankle_roll r_ankle_1 r_foot r_foot_ft_sensor r_ankle_2 torso_1 torso_pitch root_link torso_2 torso_roll torso_1 chest torso_yaw torso_2 l_shoulder_1 l_shoulder_pitch chest l_shoulder_2 l_shoulder_roll l_shoulder_1 l_shoulder_3 l_shoulder_yaw l_shoulder_2 l_upper_arm l_arm_ft_sensor l_shoulder_3 l_elbow_1 l_elbow l_upper_arm l_forearm l_wrist_prosup l_elbow_1 l_wrist_1 l_wrist_pitch l_forearm l_hand l_wrist_yaw l_wrist_1 r_shoulder_1 r_shoulder_pitch chest r_shoulder_2 r_shoulder_roll r_shoulder_1 r_shoulder_3 r_shoulder_yaw r_shoulder_2 r_upper_arm r_arm_ft_sensor r_shoulder_3 r_elbow_1 r_elbow r_arm r_forearm r_wrist_prosup r_elbow_1 r_wrist_1 r_wrist_pitch r_forearm r_hand r_wrist_yaw r_wrist_1"},{"location":"icub_kinematics/icub-model-naming-conventions/icub-model-naming-conventions/#joint-additional-information","title":"Joint additional information","text":"<p>For some tasks (e.g. model building), it may be necessary to have additional joint information, such as the joint axis direction and the range of motion of the axis. To identify the axes' directions, however, a particular robot joint configuration must be set, since the positions of these axes depend upon the joint angles. To this purpose, we assume joint angles equal to zero (i.e. legs and arms straight down), implicitly assuming that the fine calibration has been carried on so that these zeros are properly defined iCub Calibration. Then, in this configuration, the joint axis is expressed with respect to the iCub's root frame, as defined in ICubForwardKinematics. One shall observe that the arm joint axes with joint angles equal to zero do not coincide perfectly with any of the root frame axes. Yet, the directions listed below help the user understand the arm axis directions. The range of motion can be extracted from the configuration files of the iCubGenovaXX robot.</p> <p>P.S. The parenthesis around some of the numbers in the table below are only for formatting concerns, and should be ignored.</p> Joint name Joint type Axis (x) Axis (y) Axis (z) Min Max l_hip_pitch Revolute 0 1 0 l_hip_roll Revolute (-1) 0 0 l_leg_ft_sensor Fixed * * * * * l_hip_yaw Revolute 0 0 1 l_knee Revolute 0 1 0 l_ankle_pitch Revolute 0 (-1) 0 l_ankle_roll Revolute (-1) 0 0 l_foot_ft_sensor Fixed * * * * * r_hip_pitch Revolute 0 1 0 r_hip_roll Revolute 1 0 0 r_leg_ft_sensor Fixed * * * * * r_hip_yaw Revolute 0 0 (-1) r_knee Revolute 0 1 0 r_ankle_pitch Revolute 0 (-1) 0 r_ankle_roll Revolute 1 0 0 r_foot_ft_sensor Fixed * * * * * torso_pitch Revolute 0 (-1) 0 torso_roll Revolute \\(1\\) 0 0 torso_yaw Revolute 0 0 (-1) l_shoulder_pitch Revolute 0 (-1) 0 l_shoulder_roll Revolute (-1) 0 0 l_shoulder_yaw Revolute 0 0 (-1) l_arm_ft_sensor Fixed * * * * * l_elbow Revolute 0 1 0 l_wrist_prosup Revolute 0 0 (-1) l_wrist_pitch Revolute 1 0 0 l_wrist_yaw Revolute 0 (-1) 0 r_shoulder_pitch Revolute 0 (-1) 0 r_shoulder_roll Revolute 1 0 0 r_shoulder_yaw Revolute 0 0 1 r_arm_ft_sensor Fixed * * * * * r_elbow Revolute 0 1 0 r_wrist_prosup Revolute 0 0 1 r_wrist_pitch Revolute (-1) 0 0 r_wrist_yaw Revolute 0 (-1) 0 neck_pitch Revolute 0 \\(1\\) 0 neck_roll Revolute (-1) 0 0 neck_yaw Revolute 0 0 \\(1\\)"},{"location":"icub_kinematics/icub-model-naming-conventions/icub-model-naming-conventions/#sensors","title":"Sensors","text":"<p>The names of the sensors mounted on <code>iCub</code> follows this convention:</p> <p><code>&lt;link&gt;_&lt;type&gt;_&lt;nr&gt;</code></p> <p>Where <code>link</code> is the name of the link the sensor is attached to (e.g., <code>head</code>), <code>type</code> is the type of sensor (e.g., <code>imu</code>), and <code>nr</code> is a number starting from 0.</p>"},{"location":"icub_kinematics/icub-model-naming-conventions/icub-model-naming-conventions/#frames","title":"Frames","text":"<p>In literature and in robotics software, the links and frames concepts are often confused, because every link is usually associated with a frame rigidly attached to it. However this link frame definition is dependent on the formalism that one uses for describing the robot. For example, if the Denavit Hartenberg convention is used the link frame origin is required to be placed on the axis of the child joint, while if the Modified Denavit Hartenberg convention or the URDF format the link frame origin is required to be place on the axis of the parent joint. To avoid inconsistency, we clearly separate frame and link concepts.</p>"},{"location":"icub_kinematics/icub-model-naming-conventions/icub-model-naming-conventions/#ikin-frames","title":"iKin Frames","text":"<p>For the iCub, it could be useful to explicitly state the frame used for defining the kinematic chains used in the iKin library. In particular a useful set of frames could be:</p> Frame Name Link Explanation root_frame root_link Root reference frame, as defined in ICubForwardKinematics imu_frame head Inertial sensor (XSens MTx) reference frame, as defined in ICubForwardKinematics l_hand_dh_frame l_hand Left hand frame, as defined in ICubForwardKinematics r_hand_dh_frame r_hand Right hand frame, as defined in ICubForwardKinematics l_foot_dh_frame l_foot Left foot frame, as defined in ICubForwardKinematics r_foot_dh_frame r_foot Right foot frame, as defined in ICubForwardKinematics l_eye_frame \u2014 (missing at the moment) Left eye frame, as defined in ICubForwardKinematics r_eye_frame \u2014 (missing at the moment) Right eye frame, as defined in ICubForwardKinematics l_arm_ft_frame l_upper_arm,l_arm Left Arm FT sensor frame, as defined in FT_sesors r_arm_ft_frame r_upper_arm,r_arm Right Arm FT sensor frame, as defined in FT_sesors l_leg_ft_frame l_hip_2,l_hip_3 Left Leg FT sensor frame, as defined in FT_sesors l_foot_ft_frame l_upper_foot,l_foot Left Foot FT sensor frame, as defined in FT_sesors r_leg_ft_frame r_hip_2,r_hip_3 Right Leg FT sensor frame, as defined in FT_sesors r_foot_ft_frame r_upper_foot,r_foot Right Foot FT sensor frame, as defined in FT_sesors"},{"location":"icub_kinematics/icub-model-naming-conventions/icub-model-naming-conventions/#skin-frames","title":"Skin Frames","text":"<p>An interesting set of frame is the frame defined by the iKin convention ( ICubForwardKinematics ). This reference frames are used by the skin system to express contact points, force and torques (in skinDynLib data structures) and taxel positions. The one currently used by the skin system are:</p> Frame Name Link Explanation l_foot_dh_frame l_foot Frame of <code>LEFT_FOOT</code> SkinPart r_foot_dh_frame r_foot Frame of <code>RIGHT_FOOT</code> SkinPart l_upper_arm_dh_frame l_upper_arm Frame of <code>SKIN_LEFT_UPPER_ARM</code> SkinPart l_forearm_dh_frame l_forearm Frame of <code>SKIN_LEFT_FOREARM</code> SkinPart l_hand_dh_frame l_hand Frame of <code>SKIN_LEFT_HAND</code> SkinPart r_upper_arm_dh_frame r_upper_arm Frame of <code>SKIN_RIGHT_UPPER_ARM</code> SkinPart r_forearm_dh_frame r_forearm Frame of <code>SKIN_RIGHT_FOREARM</code> SkinPart r_hand_dh_frame r_hand Frame of <code>SKIN_RIGHT_HAND</code> SkinPart"},{"location":"icub_kinematics/icub-model-naming-conventions/icub-model-naming-conventions/#urdf-frames","title":"URDF frames","text":"<p>Some frames are defined to be compatible with certain convention used for URDF files, for example http://www.ros.org/reps/rep-0120.html .</p> Frame Name Link Explanation l_sole l_foot Frame oriented with X front, Y left, Z up. Origin placed on the intersection of the projection of l_ankle_roll and l_ankle_pitch axis on the plane of the lower side of metal sole (not the skin) of the foot. r_sole r_foot Frame oriented with X front, Y left, Z up. Origin placed on the intersection of the projection of r_ankle_roll and r_ankle_pitch axis on the plane of the lower side of metal sole (not the skin) of the foot. l_upper_leg_back_contact l_upper_leg Frame oriented with Z front, Y left, X down. Origin placed on the back of the upper leg link. Useful to express the contact force between the leg and the chair for the `sitting configuration`. r_upper_leg_back_contact r_upper_leg Frame oriented with Z front, Y left, X down. Origin placed on the back of the upper leg link. Useful to express the contact force between the leg and the chair for the `sitting configuration`."},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/","title":"Robot configuration","text":"<p>The aim of this page is to explain the configuration of a Ethernet based robot and how it is structured in various files. It can be useful both who approaches robot configuration for the first time and for expert user: the first finds here explanation of the structure of configuration data set and which are the parameter he/she can change, while the second find rules how to filling configuration files of a new robot.</p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#introduction","title":"Introduction","text":"<p>yarprobotinterface application starts all devices and modules required by a robot to work properly. Any device needs a configuration data set that could differs from robot to robot, so each robot has own configuration, saved in xml files contained in a folder called with robot's name in the repository robots-configuration.</p> <p>Each robot has a main configuration file, usually named icub_all.xml, that contains the list of all devices and other modules, like Calibrators and Cartesian, that [yarprobotinterface](https://yarp.it/latest/group__yarprobotinterface.html starts.</p> <p>(Note: here \"device\" means DeviceDriver of Yarp. The reader is supposed to have knowledge about a driver and a wrapper of yarp. If not, please see YARP documentation.)</p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#structure-of-robot-configuration-data-set","title":"Structure of robot configuration data set","text":"<p>The data set contains configuration for software modules, robot hardware and wrappers.</p> <p>The hardware configuration structure depends on the mechanical-electronic architecture of the robot heavily. Each device represents a sensor or a motor controller of group of joints. A device refers to an ethernet board mounted on the robot, but an ethernet board can be referred to by more devices: for example if a board controls 4 motors and reads the FT sensor, then both the motor control device and FT device have a reference to the board in question.</p> <p>Each robot configuration folder has following structure:</p> <p>RobotNameFolder:</p> <ul> <li>Calibrators: each robot body part has a calibration file bodyPart_calib.xml with calibration data, that are robot dependent.</li> <li>Camera: configuration about cameras mounted on robot</li> <li>Cartesian: configuration about the cartesian module</li> <li>Hardware: here there are descriptions of all devices available on robot<ul> <li>Mais: description of analog mais devices</li> <li>FT: description of Force-Torque devices</li> <li>Inertials : description of inertials devices</li> <li>Skin: description of skin devices</li> <li>Motorcontrol: description of motor control devices</li> <li>Electronics: description of embedded Ethernet boards mounted on robot.</li> <li>Mechanicals: description of mechanical features involved in motion control</li> </ul> </li> <li>Wrappers: configuration of yarp wrappers of devices</li> <li>Some .ini files. Among .ini files, there is yarprobotinterface.ini that specifies which is the file containing list of devices to start, usually its name is icub_all.xml.</li> <li>general.xml: contains some flags that change behavior of yarprobotinterface.</li> </ul> <p>In the following snippet there is typical main configuration file: it shows the configuration of left arm only. If you desire to have look at the entire file, see icub_all.xml in a robot folder.</p> <p>IMPORTANT==&gt; It is important to notice that names of each files follow specific rules. It is very important following the naming convention because the file name can give you some information about the device or wrapper. Please see the section Naming convention <pre><code>    &lt;!-- LEFT ARM --&gt;\n    &lt;devices file=\"hardware/motorControl/left_arm-eb1-j0_3-mc.xml\" /&gt;         &lt;!-- motion control device that controls joints numbered from 0 to 3 --&gt;\n    &lt;devices file=\"hardware/motorControl/left_arm-eb24-j4_7-mc.xml\" /&gt;        &lt;!-- motion control device that controls joints numbered from 4 to 7 --&gt;\n    &lt;devices file=\"hardware/motorControl/left_arm-eb25-j8_11-mc.xml\" /&gt;       &lt;!-- motion control device that controls joints numbered from 8 to 11 --&gt;\n    &lt;devices file=\"hardware/motorControl/left_arm-eb26-j12_15-mc.xml\" /&gt;      &lt;!-- motion control device that controls joints numbered from 12 to 15 --&gt;\n    &lt;devices file=\"wrappers/motorControl/left_arm-mc_wrapper.xml\" /&gt;          &lt;!-- wrapper of motion control devices --&gt;\n\n    &lt;!-- LEFT ARM MAIS:device and its wrapper --&gt;\n    &lt;devices file=\"hardware/MAIS/left_arm-eb26-j12_15-mais.xml\" /&gt;\n    &lt;devices file=\"wrappers/MAIS/left_arm-mais_wrapper.xml\" /&gt; \n\n    &lt;!-- LEFT ARM SKIN :device and its wrapper--&gt; \n    &lt;devices file=\"hardware/skin/left_arm-eb24-j4_7-skin.xml\" /&gt;\n    &lt;devices file=\"wrappers/skin/left_arm-skin_wrapper.xml\" /&gt;\n\n    &lt;!-- LEFT ARM FT device and its wrapper --&gt;\n    &lt;devices file=\"wrappers/FT/left_arm-FT_wrapper.xml\" /&gt; \n    &lt;devices file=\"hardware/FT/left_arm-eb1-j0_3-strain.xml\" /&gt;\n\n    &lt;!--  CALIBRATOR --&gt;\n    &lt;devices file=\"calibrators/left_arm-calib.xml\" /&gt;\n</code></pre></p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#naming-convention","title":"Naming convention","text":"<p>To help maintenance of configuration files, it is necessary to include the following information in the names of each single file:</p> <ul> <li>robot body parts;</li> <li>type of device or type of information contained in the file, like mechanicals or electronic or motor control data;</li> <li>the electronics board number: in case of configuration file of device, it is useful to know which is the electronic board to refer to.</li> <li>number of joints connected to the board.</li> </ul>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#rules-for-naming-devices","title":"Rules for naming devices","text":"<p>This is the pattern of name of each device and its configuration file: body_part-ebX-jA_B-type_of_device. In details, each name is make up of 4 parts:</p> <ul> <li>body_part: head, face, left_arm, right_arm, torso, left_leg, right_leg;</li> <li>ebX: where X is the number of electronic board written on schematics document. Usually, but not always, X is also the last number of board\u2019s ip address;</li> <li>jA_B: this indicates that the board ebX controls joints from A to B. This information let you know if board is in upper or lower part.</li> <li>type_of_device: skin, mais, strain, mc, intertials.</li> </ul> <p>For example, the configuration file of motor control device of joint 0 and 1 of head is named head-eb20-j0_1-mc.xml and inside it there is the name of device head-eb20-j0_1-mc: <pre><code>&lt;devices robot=\"robotName\" build=\"1\"&gt;\n    &lt;device name=\"head-eb20-j0_1-mc\" type=\"embObjMotionControl\"&gt;\n        &lt;params ....... /&gt;\n    \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026.\n        \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026.\n    &lt;/device&gt;\n&lt;/devices&gt;\n</code></pre></p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#rules-for-naming-wrapper-file","title":"Rules for naming wrapper file","text":"<p>The wrapper name and its configuration files should have the same name and its pattern is : body_part-type_of_device_wrapper.xml. In details, each file name is make up of 2 parts:</p> <ul> <li>body_part: head, face, left_arm, right_arm, torso, left_leg, right_leg, left_foot, right_foot;</li> <li>type_of_device_wrapper: skin_wrapper, mais_wrapper, FT_wrapper, VFT_wrapper, mc_wrapper.</li> </ul>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#rules-for-naming-joints","title":"Rules for naming joints","text":"<p>Each joint has a name that follows the naming convention explained here.</p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#configuration-of-devices","title":"Configuration of devices","text":"<p>To configure a device it is necessary some specific data depending on device type and information of electronic board it refers to. So, more devices can refer to the same electronic board: for example a motion control device and a skin device could share the same electronic board, this mean that the board can controller some joints and can read skin values at the same time. In following sections, you can find an overview of configuration of each device type, while the meaning of each parameter is describes in respective template file in folder iCubTemplates/iCubTemplateVx_y in this repository. Currently the most recent version is iCubTemplateV5_0.</p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#motor-control-device","title":"Motor control device","text":"<p>Configuration of a motor control device is composed by the wiring, mechanicals and obviously by motor control specification related to joints it manages. In Ethernet robots, a motor control device corresponds to a motor control electronic board that manages from one up to twelve joints.</p> <p>The entry point of motor control device configuration is the file named body_part-ebX-jA_B-mc.xml, that is included in icub_all.xml. This file contains all parameters that the robot's user can modify, for example PID and joints limits, and links other 4 files that only maintainers should modify. These other four files are:</p> <ul> <li>general.xml: contains some flags that change behavior of the device</li> <li>body_part-ebX-jA_B-eln.xml: contains description of electronic board , such as ip address, and specific parameters of communication protocol used by firmware and yarp devices.</li> <li>body_part-ebX-jA_B-mec.xml: contains specific information about mechanics. Usually this file should be equal for all robots of same version.</li> <li>body_part-ebX-jA_B-mc_service.xml: contains all the information necessary for the firmware to initialize the motion control service: it needs to know for each joint which is its pwm port, which is its encoder and where is connected.</li> </ul> <p>It is important to notice that each parameter inside mechanicals, motion-control and motion-control-service files needs to have the same number of values of number of joints to configure.</p> <p>One of the major changes started from version 3.0 and consists of introduction of CONTROLS tag: it allows the user to save in file different PID configurations and he/she can choose which configuration he/she wants to use depending on the experiment he/she wants to run on the robot. To do this, the user writes one or more sections of PID within the file and indicates the selected PID in the \"CONTROLS\" group. Below there is just a snippet of an example of a head movement control device configuration file: the example only refers to the configuration of the control PID in the position mode, but the same concept can be extended to other modalities.</p> <p><pre><code>&lt;group name=\"CONTROLS\"&gt;\n   &lt;param name=\"positionControl\"&gt;      JOINT_PID_EXPERIM_1    JOINT_PID_EXPERIM_1      &lt;/param&gt; \n   &lt;param name=\"velocityControl\"&gt;      none                   none                     &lt;/param&gt; \n   &lt;param name=\"torqueControl\"&gt;        none                   none                     &lt;/param&gt;\n    &lt;param name=\"currentPid\"&gt;          none                   none                     &lt;/param&gt; \n&lt;/group&gt;\n\n\n&lt;group name=\"JOINT_PID_EXPERIM_1\"&gt;\n    &lt;param name=\"controlLaw\"&gt;    Pid_inPos_outPwm   &lt;/param&gt; \n    &lt;param name=\"controlUnits\"&gt;  metric_units       &lt;/param&gt; \n    &lt;param name=\"pos_kp\"&gt;               1100.00             -1000                       &lt;/param&gt;       \n    &lt;param name=\"pos_kd\"&gt;                  0.0                  0.0                     &lt;/param&gt;     \n    &lt;param name=\"pos_ki\"&gt;                  0.0               -100                       &lt;/param&gt;          \n    &lt;param name=\"pos_maxOutput\"&gt;        3360                 3360                       &lt;/param&gt;  \n    &lt;param name=\"pos_maxInt\"&gt;           3360                 3360                       &lt;/param&gt; \n    &lt;param name=\"pos_shift\"&gt;               0                    0                       &lt;/param&gt;       \n    &lt;param name=\"pos_ko\"&gt;                  0                    0                       &lt;/param&gt;  \n    &lt;param name=\"pos_stictionUp\"&gt;          0                    0                       &lt;/param&gt; \n    &lt;param name=\"pos_stictionDwn\"&gt;         0                    0                       &lt;/param&gt; \n    &lt;param name=\"pos_kff\"&gt;                 0                    0                       &lt;/param&gt; \n&lt;/group&gt;\n\n&lt;group name=\"JOINT_PID_EXPERIM_2\"&gt;\n    &lt;param name=\"controlLaw\"&gt;   Pid_inPos_outPwm  &lt;/param&gt; \n    &lt;param name=\"controlUnits\"&gt; metric_units      &lt;/param&gt; \n    &lt;param name=\"pos_kp\"&gt;                800.00               -600                       &lt;/param&gt;\n    &lt;param name=\"pos_kd\"&gt;                  0.0                   0.0                     &lt;/param&gt;\n    &lt;param name=\"pos_ki\"&gt;                  0.0                -100                       &lt;/param&gt;\n    &lt;param name=\"pos_maxOutput\"&gt;        1000                  1000                       &lt;/param&gt;  \n    &lt;param name=\"pos_maxInt\"&gt;            500                   500                       &lt;/param&gt; \n    &lt;param name=\"pos_shift\"&gt;               0                     0                       &lt;/param&gt;       \n    &lt;param name=\"pos_ko\"&gt;                  0                     0                       &lt;/param&gt;  \n    &lt;param name=\"pos_stictionUp\"&gt;          0                     0                       &lt;/param&gt; \n    &lt;param name=\"pos_stictionDwn\"&gt;         0                     0                       &lt;/param&gt; \n    &lt;param name=\"pos_kff\"&gt;                 0                     0                       &lt;/param&gt;\n&lt;/group&gt;\n</code></pre> In this configuration, the user has selected PID with tag \"JOINT_PID_EXPERIM_1\". If he/she want use a different setup, he/she needs to set \"JOINT_PID_EXPERIM_2\" in \"CONTROL\" group instead of \"JOINT_PID_EXPERIM_1\". Moreover, it is possible to select \"JOINT_PID_EXPERIM_1\" for some joints and \"JOINT_PID_EXPERIM_2\" for the others, but the user should be sure that \"JOINT_PID_EXPERIM_1\" and \"JOINT_PID_EXPERIM_2\" has the same value of controlLaw parameter.</p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#ft-sensor-device","title":"FT sensor device","text":"<p>This device represents a Force-Torque sensor mounted on robot, so in its configuration there are information about its CAN address, to which Ethernet board it is connected, etc. See the template file for more details.</p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#mais-device","title":"Mais device","text":"<p>This device represents a mais sensor mounted on robot, so in its configuration there are information about its CAN address, to which Ethernet board it is connected, etc. See the template file for more details.</p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#skin-device","title":"Skin device","text":"<p>A skin device represents a part of skin of robot; usually the part corresponds to a body part of robot. To configure this device, its is necessary the list of mtb boards that belong to this part and some data to configure each tactile point. Since almost all tactile points uses the same configuration values, there is a parameter called \u201cDefaultCfg\u201d, that is the default configuration, but there is also a \u201cSpecialCfg\u201d parameter by which the user can specified different configuration value for some tactile points.</p> <p>The configuration of this device is in two files: the entry point is body_part-ebX-skin.xml, where there are information about the location of mtb board and it includes body_part-ebX-skinSpec.xml, that contains tactile points configuration.</p> <p>Please, see template file for more details.</p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#inertial-device","title":"Inertial device","text":"<p>This device represents inertial sensors mounted on mtb boards connected to a Ethernet board. See template for more details.</p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#configuration-of-calibrator-module","title":"Configuration of calibrator module","text":"<p>The calibrator module for Ethernet robots is parametricCalibratorEth; it uses the parameters written in body_part-calib.xml file. Please follow the link to get the meaning of each parameter.</p> <p>Here is reported a brief description of calibrator module and the role of some parameters are involved in calibration and parking procedures.</p> <p>The calibrator in the startup phase launches the calibration procedure: after a motor control devices has been configured, it tries to calibrate its joints. The calibration procedure is composed by three steps:</p> <ul> <li>Sets a safe pwm limit: uses value of parameter \u201cstartupMaxPwm\u201d, like the maximum pwm applicable to the motor;</li> <li>If the parameter \u201cskipCalibration\u201d in general.xml is false, it sends the calibrate command to each joint with the parameters written in the calibration file, else skips following steps leaving joints in not configured state and exits. If you are interested in details information about calibration and its parameter see here. (The link will be available asap, sorry for the incovenience).</li> <li>If the joint completes the calibration sucessfully, then it tries to move it to the \u201cstartupPosition\u201d using \u201cstartupVelocity\u201d specified in calibration file. If an error occurred in calibration phase, the joint is in fault error.</li> <li>If the \u201cstartupPosition\u201d is reached, then the joint is ready, else is in fault error.</li> </ul> <p>When the user shuts down yarprobotinterface, the calibrator moves all joints to the park position, that is the position specified in \u201cpositionHome\u201d parameter using \u201cvelocityHome\u201d.</p>"},{"location":"icub_kinematics/icub-robot-configuration/icub-robot-configuration/#note-for-robots-in-icub-tech-iit-genoa-italy","title":"Note for robots in iCub Tech (IIT Genoa, Italy)","text":"<p>Usually the robots in iCub Facility run developing software, that is, they use the same software modules, but on the development branch instead of the stable one (master).</p> <p>For these robots, the most recent configuration is available on development branch of robots configuration repository in the folder iCubTemplates/iCubTemplateV6_0.</p> <p>This mean that in the newest version may be available new parameters or there are some changes that are not described in the last stable version.</p> <p>If you are interesting in the meaning of this changes, please check iCubTemplates/iCubTemplateV6_0.</p>"},{"location":"icub_kinematics/icub-shoulders-range-of-motion/icub-shoulders-range-of-motion/","title":"Range of Motion of the iCub Shoulders","text":"<p>The range of motion of the shoulders of iCub 2.x is constrained by the length of the tendons. Unfortunately, these constraints cannot be written in the form \\(\\left[\\theta_{\\text{min}}, \\; \\theta_{\\text{max}}\\right]\\), which are the constraints currently implemented in the firmware.</p> <p>Warning</p> <p>Therefore, care must be taken when controlling the arm in the Joint Space to avoid reaching configurations that may break the tendons.</p> <p>Note</p> <p>By contrast, when controlling the arm in the Cartesian Space by means of the Cartesian Controller, the software will always find solutions for the reaching task that comply with the cable length constraints. </p>"},{"location":"icub_kinematics/icub-shoulders-range-of-motion/icub-shoulders-range-of-motion/#correct-limits","title":"Correct Limits","text":"<p>The length of the tendons imposes the following constraints on the shoulder's joints:</p> \\[ \\begin{equation} \\mathbf{A} \\cdot \\mathbf{q} + \\mathbf{b} &gt; 0, \\end{equation} \\] <p>where \\(\\mathbf{q}\\) is the vector of the 3 shoulder's joints expressed in radians, whereas:</p> \\[ \\begin{equation} \\mathbf{A} =  \\begin{pmatrix}      c &amp; -c &amp;  0 \\\\     -1 &amp;  1 &amp;  0 \\\\     -c &amp;  c &amp;  0 \\\\      1 &amp; -1 &amp;  0 \\\\      0 &amp; -1 &amp;  0 \\\\      0 &amp;  1 &amp;  0 \\\\      0 &amp;  1 &amp;  0 \\\\      0 &amp; -1 &amp;  0 \\\\      c &amp; -c &amp; -c \\\\     -1 &amp;  1 &amp;  1 \\\\     -c &amp;  c &amp;  c \\\\      1 &amp; -1 &amp; -1 \\\\      0 &amp;  1 &amp;  1 \\\\      0 &amp; -1 &amp; -1 \\end{pmatrix} \\quad  \\mathbf{b} = \\frac{\\pi}{180} \\cdot \\begin{pmatrix}      404   \\\\       54.3 \\\\       46   \\\\      305.7 \\\\      215.7 \\\\      150   \\\\       54.3 \\\\      210   \\\\      431   \\\\      101.7 \\\\      109   \\\\      258.3 \\\\       71.7 \\\\      228.3 \\end{pmatrix}, \\end{equation} \\] <p>with \\(c = 1.71\\).</p> <p>Remarkably, this set of constraints can be reduced by solving a linear programming problem whose outcome is:</p> \\[ \\begin{equation} \\mathbf{A^*} =  \\begin{pmatrix}      c &amp; -c &amp;  0 \\\\      c &amp; -c &amp; -c \\\\      0 &amp;  1 &amp;  1 \\\\     -c &amp;  c &amp;  c \\\\      0 &amp; -1 &amp; -1 \\end{pmatrix} \\quad  \\mathbf{b^*} = \\frac{\\pi}{180} \\cdot \\begin{pmatrix}      347    \\\\      366.57 \\\\       66.6  \\\\      112.42 \\\\      213.3 \\end{pmatrix} \\end{equation} \\] <p>Note</p> <p>The Cartesian Controller software component implements the couple \\(\\left( \\mathbf{A^*}, \\; \\mathbf{b^*}\\right)\\). </p>"},{"location":"icub_kinematics/icub-vergence-version/icub-vergence-version/","title":"Vergence, Version and Disparity","text":""},{"location":"icub_kinematics/icub-vergence-version/icub-vergence-version/#vergence-angle","title":"VERGENCE ANGLE","text":"<p><code>Vg = L - R</code></p> <p>where L is the angle of the left camera with respect to the homed optical axis (which is the cameras z-axis) as in the figure above; R is the angle of the right camera with respect to the homed optical axis.</p>"},{"location":"icub_kinematics/icub-vergence-version/icub-vergence-version/#version-angle","title":"VERSION ANGLE","text":"<p>The version angle is the angle between the axis orthogonal to the baseline and passing through the baseline's midpoint and a line connecting this midpoint and the vergence point. The version angle satisfies the following nonlinear relation:</p> <p><code>tan(Vs) = (tan(L) + tan(R)) / 2</code></p> <p>However, the Firmware sends as version the following value:</p> <p><code>Vs = (L + R) / 2</code></p> <p>which holds for small angles (where <code>tan(x)\u2248x</code>), so that even though there is no lack of information since <code>L</code> and <code>R</code> angles can be accurately retrieved (see hereafter), the version <code>Vs</code> has physical meaning only for small values of <code>Vs</code>, L and R.</p>"},{"location":"icub_kinematics/icub-vergence-version/icub-vergence-version/#converting-vergenceversion-to-decoupled-lr","title":"CONVERTING [VERGENCE|VERSION] TO [DECOUPLED L|R]","text":"<p>Combining the above equations yields:</p> <p><code>L = Vs + Vg/2</code></p> <p><code>R = Vs - Vg/2</code></p>"},{"location":"icub_kinematics/icub-vergence-version/icub-vergence-version/#disparity","title":"DISPARITY","text":"<p>Disparity is defined as:</p> <p><code>d = xl - xr</code></p> <p>where <code>xl</code> is the left image normalized coordinate and xr is the right image normalized coordinate. Object closer to the cameras than the current point of fixation, will elicit a positive disparity value.</p>"},{"location":"icub_microphones/icub_microphones/","title":"iCub Microphones","text":"<p>This page gives info about recording and playing back sound troght the <code>icub-head</code> microphones.</p>"},{"location":"icub_microphones/icub_microphones/#dependencies","title":"Dependencies","text":"<p>For using the head microphones we must install the <code>PortAudio</code> on the head and local computer. </p> <ul> <li>Install portaudio (in Ubuntu <code>sudo apt install portaudio19-dev</code>)</li> <li>In the cmake configurations, we should turn on four options by running ccmake . in the <code>yarp</code> folder:   <pre><code>ENABLE_yarpmod_AudioPlayerWrapper ON\nENABLE_yarpmod_AudioRecorderWrapper ON\nENABLE_yarpmod_portaudio ON\nENABLE_yarpmod_portaudioPlayer ON\nENABLE_yarpmod_portaudioRecorder ON\n</code></pre></li> <li>Run <code>make</code></li> </ul> <p>If you rely on <code>robotology-superbuild</code>, the configuration and the building process will automatically take care of the <code>portaudio</code>related options.</p>"},{"location":"icub_microphones/icub_microphones/#recording-and-playback","title":"Recording and Playback","text":"<p>Recording and playback is supported in yarp via <code>libportaudio</code>, which wraps on the top of the linux device drivers.  These yarp devices are <code>portaudioPlayer</code> and <code>portaudioRecorder</code>, we need to enable them from ccmake when we compile yarp on the laptop (the option is avilable only if libportaudio needs to be installed). On icub, these devices are already enabled by default.</p> <p>Then, yarp has two network wrappers to send received audio data to/from the network. These devices are <code>AudioPlayerWrapper</code> and <code>AudioRecorderWrapper</code>. Again, we need to check our yarp ccmake configuration to enable and compile them.</p> <p>Deprecation Notice</p> <p>From YARP-3.9.0, <code>AudioRecorderWrapper</code> has been deprecated in favor of the NWS/NWC network wrappers.</p> <p>We can record audio from a microphone and stream it over the network with the command:</p> <pre><code>yarpdev --device AudioRecorderWrapper --subdevice  portaudioRecorder --start\n</code></pre> <p>On the other side, we can played some sound received from the network with:</p> <pre><code>yarpdev --device AudioPlayerWrapper --subdevice  portaudioPlayer --start\n</code></pre> <p>We can connect the two modules with the command:</p> <pre><code>yarp connect /audioRecorderWrapper/audio:o /audioPlayerWrapper/audio:i fast_tcp\n</code></pre> <p>The option --start will automatically enable the devices on startup; otherwise, we can start/stop the recording/playback by sending the command on the corresponding RPC ports.</p> <p>All these devices/subdevices require some specific (and complex) options to work properly. These options are documented in the YARP doc pages linked above.</p> <p>The parameters required by portaudioRecorder/portaudioPlayer are specific to the sound format (e.g. frequency, sample format etc).</p> <p>The parameters required by AudioRecorderWrapper/AudioPlayerWrapper define the fragmentation of the sound packets over the network and the buffering options. We recommend using the default options. Please note that buffering introduces some inevitable delay (five seconds by default), and that realtime audio playback is not currently supported (so we might hear some clicks, when a buffer underrun occurs).</p>"},{"location":"icub_microphones/icub_microphones/#use-cases","title":"Use cases","text":""},{"location":"icub_microphones/icub_microphones/#processing-audio-in-a-application","title":"Processing audio in a application","text":"<p>A different use case is processing audio in a application. To do this:</p> <ul> <li>read the audio data directly from the <code>/audioPlayerRecorder/audio:o</code>  port</li> <li>open an AudioPlayerWrapper in your module, using the standard polydriver.</li> </ul> <p>Using the second option, the audio packets should be already assembled by the wrapper.</p> <p>Finally, we also have some test devices:</p> <pre><code>yarp_fakeMicrophone\nyarp_fakeSpeaker\nyarp_audioToFileDevice\nyarp_audioFromFileDevice\n</code></pre> <p>which can be used for testing/development purpose without the need of the real hardware.</p>"},{"location":"icub_microphones/icub_microphones/#grabbing-audio-from-the-microphones","title":"Grabbing audio from the microphones","text":"<p>If you launch the following on the icub-head:</p> <pre><code>yarpdev --device AudioRecorderWrapper --subdevice portaudioRecorder --start\n</code></pre> <p>you'll get audio from icub microphones.</p>"},{"location":"icub_microphones/icub_microphones/#simulate-a-microphone","title":"Simulate a microphone","text":"<p>If you want to simulate a microphone, i.e. play a file from disk, type:</p> <pre><code>yarpdev --device AudioRecorderWrapper --subdevice audioFromFileDevice --file_name myfile.wav --start\n</code></pre> <p>In both cases, the port opened by default by AudioRecorderWrapper is `/audioRecorderWrapper/audio:o``. You can check the options described in AudioRecorderWrapper.h if you want to choose a custom port name.</p>"},{"location":"icub_microphones/icub_microphones/#references","title":"References","text":"<ul> <li>http://www.portaudio.com</li> </ul>"},{"location":"icub_operating_systems/","title":"Introduction","text":"<p>This manual describes how to install and customize the linux operating systems required to run on machines in the iCub enviroment. You can also find here the correct procedure required to statup all machines that belongs to an iCub Setup enviroment.</p>"},{"location":"icub_operating_systems/#the-icub-operative-systems","title":"The iCub Operative Systems","text":""},{"location":"icub_operating_systems/#robot-os","title":"Robot OS","text":"<p>There are two versions of the customized OS running on the machine inside the iCub head:</p> <ul> <li>The iCub LIVE for PC104 - based on Debian LIVE environment, it is for old iCub version with a PC104 board (without onboard Hard Drive) and it is distribuited usign a pre-built image.</li> <li>The iCub OS - based on Ubuntu Server, it is for iCub versions with a COM-Express board (with onboard Hard Drive) and can be installed starting from a pre-built image or we provide instructions to install and customize a standard Ubuntu server installation.</li> </ul> <p>iCub version 2.9 or greater mounts also on the head a NVIDIA Jetson board, that has as OS The NVIDIA JetPack.</p> <p>Note</p> <p>For further details, please refer to the iCub CPU boards.</p>"},{"location":"icub_operating_systems/#os-for-other-machines-in-the-icub-environment","title":"OS for other machines in the iCub environment","text":"<p>Here you can find instruction needed to customize a generic machine, such as a laptop or a desktop, making all the changes required to add it to the iCub environment, starting from a default Ubuntu or Debian installation.</p> <p>Once you customized your machine, you can proceed with further setup for special machines, such as:</p> <ul> <li>The iCub Dedicated Server - the machine that works as network infrastructure server (for Network gateway, NTP, NFS, DHCP and DNS services) only, this machine is not supposed to be used to run your software (i.e. you can't install YARP here), but acts as backend server for all networking services</li> <li>The iCub Console Server - in the minimal iCub setup configuration there is only the robot and a single machine, usually a laptop, acting both as (limited) network infrastructure server (for Network Gateway, ntp and NFS services) as well as robot console where you can run your software (i.e. YARP is installed here)</li> <li>CUDA workstation - a GPU-equipped machine with CUDA software installed, usually a workstation</li> </ul>"},{"location":"icub_operating_systems/#the-icub-setup-startup-procedure","title":"The iCub setup startup procedure","text":"<p>Here you can find the correct procedure required to startup the whole iCub setup (robot, server, laptop and workstations), so all machines and services can operate correctly.</p>"},{"location":"icub_operating_systems/download/","title":"OS images download","text":"<p>You can Download pre-build OS images to install latest version of OS icub-customized version of Linux operating system by following the link in the Download Table below</p>"},{"location":"icub_operating_systems/download/#download-table","title":"Download table","text":"Image name Target machine Version Release Date Based on Download Link Installation details iCubLive PC104 (diskless board - iCub platform from version 1.2 on) 7.10 (latest) 27-Apr-2021 Debian 10 \"Buster\" 1.7 GB The iCub Live installation from image pc104-image-oc PC104 (diskless board - iCub platform up to version 1.1) 1.8 (legacy) 17-Jun-2016 Debian 4 \"Etch\" 220 MB The iCub Live installation from image iCubOS icub-head (HD equipped board) 8.0 04-Jun-2021 Ubuntu 20.04 \"Focal Fossa\" 2.3 GB The iCub OS installation from image iCubServerOS icub-server (DELL Wyse 5070) 20.04 12-Jul-2021 Ubuntu 20.04 \"Focal Fossa\" server 1.6 GB The iCub Server installation from image"},{"location":"icub_operating_systems/startup-procedure/","title":"iCub Setup startup procedure","text":"<p>This section describes how to properly connect (by the network poit of view) and startup all the machines in a iCub setup</p>"},{"location":"icub_operating_systems/startup-procedure/#network-configuration-and-connections","title":"Network configuration and connections","text":""},{"location":"icub_operating_systems/startup-procedure/#network-schema","title":"Network schema","text":"<p>See iCubOS Networking section for further details</p>"},{"location":"icub_operating_systems/startup-procedure/#network-configuration","title":"Network configuration","text":"<p>By the networking point of view, the iCub setup is based on the following components:</p> <ul> <li><code>icub-server</code> : this machine acts as a network gateway for the whole setup and implements several different network services such as DHCP, DNS, NTP and NFS</li> <li><code>icub-switch</code> : this is the ethernet switch that connects all the setup components</li> <li><code>icub-wifi</code> : this is the WiFi access point that creates the WiFi infrastructure that can be used (optionally) by the robot.</li> <li><code>icub-head</code> : the PC inside the robot's head</li> <li><code>other machines</code> : all  other PCs you can add to the setup, where you can run your software (in this case <code>icub-laptop</code> and <code>icub-cuda</code>)</li> </ul> <p>See also https://icub-tech-iit.github.io/documentation/icub_operating_systems/icubos/networking/</p>"},{"location":"icub_operating_systems/startup-procedure/#network-connections","title":"Network connections","text":"<p>Before turning on the iCub setup, you should setup network connections properly as follows:</p> <ol> <li>if you want to provide internet access to the setup, you have to connect a network cable to the Ethernet port marked as EXT (external) on the <code>icub-server</code></li> <li>connect the Ethernet port marked as INT (internal) on the <code>icub-server</code> to an Ethernet port on the <code>icub-switch</code> with an ethernet cable</li> <li>connect an Ethernet port on the <code>icub-wifi</code> (do not use any port marked as <code>INTERNET</code> or <code>WAN</code>) to an Ethernet port on the <code>icub-switch</code> with an Ethernet cable</li> <li>connect the Ethernet port on the back of the robot to an Ethernet port on the <code>icub-switch</code> with an Ethernet cable</li> <li>connect Ethernet ports on the remaining PCs of the setup to Ethernet ports on the <code>icub-switch</code> with Ethernet cables</li> </ol>"},{"location":"icub_operating_systems/startup-procedure/#icub-setup-startup-procedure_1","title":"iCub setup startup procedure","text":"<p>The iCub setup relies on several different network protocols and services, so it's mandatory to startup the machines with the correct sequence to allow the setup to operate correcly, if you do not follow it you can face problems or unexpected behaviours.</p>"},{"location":"icub_operating_systems/startup-procedure/#startup-sequence","title":"Startup sequence","text":"<p>This is the correct startup procedure to follow every time you need to turn the whole system up:</p> <ol> <li>Connect all the network cables as explained above (see Network connections above).</li> <li>Connect the all the other needed power cables except the one from the icub-switch; do not turn on any appliance yet.</li> <li>Connect the power cable of the <code>icub-switch</code> so it turns on, then wait for the POST procedure to complete; as the switch powers on, it begins the POST, a series of tests that runs automatically to ensure that the switch functions properly. LEDs can blink during the test. When the switch begins POST, the SYST, STAT, and SPEED LEDs turn green. The SYST LED blinks green, and the other LEDs remain solid green.When the switch completes POST successfully, the SYST LED remains green. The other LEDs turn off and then reflect the switch operating status. If a switch fails POST, the SYST LED turns amber. POST procedure lasts approximately between 3 and 5 minutes.</li> <li>Turn the <code>icub-server</code> ON and wait at least 2 minutes while it completes the boot procedure.</li> <li>(optional) Switch the <code>icub-wifi</code> ON and wait at for the POST procedure to complete, the POWER LED blinks while the POST procedure is on and turns solid white when it's over and the AP is ready. This step takes about 2 minutes to complete.</li> <li>Turn the laptops on and login.</li> <li>Now you can power the robot CPU ON (the <code>icub-head</code> takes about one minute to boot up) and then start playing with your software, have fun!</li> </ol>"},{"location":"icub_operating_systems/icubos/bios/","title":"The OS on icub-head - BIOS tweaks","text":"<p>Some tweaks to the BIOS are necessary to setup the icub-head board (Kontron COMe-cKL6). They are directly realted to icubOS installation and it's necessary to perform the tweaks below only once, regadless if the operating systems is reinstalled.</p>"},{"location":"icub_operating_systems/icubos/bios/#how-to-access-bios","title":"How to access BIOS","text":"<p>In Order to modify BIOS parameters it is ncessary to connect a monitor (with Display Port connector) and an USB keyboard to the icub-head board. Then, power on the board and press a key (it is different on each model of the icub-head board, usually F2 or DEL) to enter BIOS settings.</p>"},{"location":"icub_operating_systems/icubos/bios/#how-to-set-the-max-power-tdp-of-the-processor","title":"How to set the max power (TDP) of the processor","text":"<p>Set the TDP to 10000 (10w). See page 65 of the user manual of the board for more details, which you can download from https://www.kontron.com/en/products/come-ckl6/p146491.</p>"},{"location":"icub_operating_systems/icubos/bios/#usb-legacy-support","title":"USB Legacy support","text":"<p>On boot tab, please disable the <code>USB legacy support</code> (where available).</p>"},{"location":"icub_operating_systems/icubos/bios/#save-settings","title":"Save Settings!","text":"<p>Before leaving the BIOS and rebooting, please remember to save your update setting with the option <code>SAVE SETTINGS AND EXIT</code>.</p>"},{"location":"icub_operating_systems/icubos/bluetooth/","title":"The OS on icub-head - Configure the Bluetooth","text":""},{"location":"icub_operating_systems/icubos/bluetooth/#introduction","title":"Introduction","text":"<p>The Bluetooth connection is used on icub-head to communicate with the battery pack (so we can check the battery in our software); it can be also used to connect a joypad to the robot. The icub-head board has an onboard BT controller and antenna, so no external dongle is required.</p> <p>The BT configuration relies on hardware address, so it is to be done on each robot after you installed iCubOS.</p>"},{"location":"icub_operating_systems/icubos/bluetooth/#generic-bluetooth-device-configuration","title":"Generic Bluetooth device configuration","text":"<p>This procedure shows how to pair a bluetooth device on icub-head.</p> <ol> <li> <p>Install the following packages   <pre><code>bluetooth bluez bluez-tools\n</code></pre></p> </li> <li> <p>Open Bluetooth control and search for the device   <pre><code>bluetoothctl\n  scan on\n</code></pre></p> </li> <li> <p>Wait that the device address to show up, note it, then stop scanning   <pre><code>scan off\n</code></pre></p> </li> <li> <p>Trust the device using its address (replace ADDRESS with the addres you noted on point 3. )   <pre><code>trust ADDRESS\n</code></pre></p> </li> <li> <p>Pair the device using its address (replace ADDRESS with the addres you noted on point 3. ). It may prompt to enter <code>yes</code> to verify that the passcode is correct   <pre><code>pair ADDRESS\n</code></pre></p> </li> <li> <p>Connect the device using its address (replace ADDRESS with the addres you noted on point 3. ).   <pre><code>connect ADDRESS\n</code></pre></p> </li> <li> <p>Check status   <pre><code>devices\n</code></pre></p> </li> <li> <p>If everything is ok, the above command shows the device as PAIRED AND CONNECTED, then quit Bluetooth control   <pre><code>quit\n</code></pre></p> </li> </ol> <p>The configuration is now saved into the system and the device will be connected automatically.</p>"},{"location":"icub_operating_systems/icubos/bluetooth/#battery-device-configuration","title":"Battery device configuration","text":"<p>This procedure shows how to pair the bluetooth on icub-head with the BCB board to retrieve the battery status. The BCB board is not a standard Bluetooth device, so some additional passages are necessary.</p> <ol> <li> <p>Scan for available devices and search for the battery device. It should have the prefix <code>RNBT</code>.   <pre><code>hcitool scan | grep RNBT\n</code></pre></p> </li> <li> <p>After a while, you should see the BT address of the battery (it look very similar to a MAC address), please take note of it. Usually, the range of these devices is large, hence the BCB board of other robots may also be visible.</p> </li> <li> <p>Follow the instructions from point 2 to 4 of the above section. If you attempt also point 5, you will get the following error: <pre><code>Failed to connect: org.bluez.Error.NotAvailable\n</code></pre> In fact, it is not possible to connect since the board is not compatible with <code>BlueZ</code>.</p> </li> <li> <p>If the pairing went ok, the battery device should be PAIRED but not connected. Quit Bluetooth control   <pre><code>quit\n</code></pre></p> </li> </ol> <p>In order to use it as a serial device, it is possible to use <code>rfcomm</code>. In order to check if the connection to the BCB board works, run the following command: <pre><code>sudo rfcomm -r connect 0 RNBT_ADDRESS\n</code></pre> This connects to the Bluetooth and creates a serial device named <code>/dev/rfcomm0</code> in <code>raw</code> mode. If this test is working, the terminal should be blocked, displaying a message like <pre><code>Waiting for connection on channel 0\nConnection from RNBT to /dev/rfcomm0\nPress CTRL-C for hangup\n</code></pre> On the robot side, whenever we connect to the BCB board, a blue LED should light up between the \"Motors\" and \"CPU\" button. By pressing <code>CTRL+C</code>, the connection is interrupted.</p> <p>The problem with <code>rfcomm connect</code> is that it keeps the connection with the Bluetooth board even when not necessary, and it is blocking for the terminal that called it. Alternatively, it is possible to use <pre><code>sudo rfcomm bind 0 RNBT\nsudo stty -F /dev/rfcomm0 raw\n</code></pre> This connects to the Bluetooth only when the port <code>/dev/rfcomm0</code> is opened. The second command makes sure that the port is interpreted as a raw serial port and not as TTY. After launching those commands, the <code>/dev/rfcomm0</code> should be visible.</p> <p>The connections made via <code>rfcomm</code> get reset when shutting down. In order to have them working at startup follow the next section.</p>"},{"location":"icub_operating_systems/icubos/bluetooth/#connect-to-the-bcb-board-automatically","title":"Connect to the BCB board automatically","text":"<p>The connections made via <code>rfcomm</code> get reset when shutting down. In order to have them working at startup, create a system service as follows. First create the file <code>bt-battery.service</code> in the folder <code>/etc/systemd/system/</code> as here</p> <p>This service runs once the <code>bt-battery_connect.sh</code> script at startup after running the <code>bluetooth</code> service. You can find the script here, and it needs to be saved in the <code>/etc/rc.iCub.d</code> system folder. \u26a0\ufe0f You need to change RNBT_ADDRESS with the address you noted, keeping the <code>\"</code>.</p> <p>The scripts first tries to connect using <code>rfcomm connect</code>. If it works (hence <code>rfcomm connect</code> is still alive), releases the connection. Then it tries running <code>rfcomm bind</code> and <code>stty</code> checking the outputs in case of errors. If there is any error, it tries again at most 10 times.</p> <p>You can try to run this script with the command <pre><code>sudo bash ~/bt-battery_connect.sh\n</code></pre></p> <p>If the connections was successfull, you should see <code>stty successfull</code> and the <code>/dev/rfcomm0</code> should be available.</p> <p>This service can be enabled at startup with <pre><code>sudo systemctl enable bt-battery.service\n</code></pre> and started with <pre><code>sudo systemctl start bt-battery.service\n</code></pre> In case there were errors starting the service, it is possible to inspect the output of the script with <pre><code>systemctl status bt-battery.service\n</code></pre> This script can also be run after startup in case the connection is not working, with <pre><code>sudo bash ~/bt-bluetooth_connect.sh\n</code></pre></p>"},{"location":"icub_operating_systems/icubos/further-tasks/","title":"The OS on icub-head - Further tasks","text":"<p>Once you configured the iCubOS there are other task to complete in order to prepare the robot to run your software.</p>"},{"location":"icub_operating_systems/icubos/further-tasks/#note","title":"Note","text":"<p>If you installed your system starting from an image (see the iCubOS - Installation from image chapter), the below steps have been already done for you.</p>"},{"location":"icub_operating_systems/icubos/further-tasks/#remove-cloud-init-package","title":"Remove Cloud Init package","text":"<p>Uninstall the cloud init packages as follows <pre><code>sudo apt purge cloud-guest-utils cloud-init cloud-initramfs-copymods cloud-initramfs-dyn-netconf\n</code></pre></p>"},{"location":"icub_operating_systems/icubos/further-tasks/#disable-unattended-upgrades","title":"Disable unattended-upgrades","text":"<p>In order to avoid automatic system updates you can edit the file <code>/etc/apt/apt.conf.d/20auto-upgrades by</code> changing the following lines <pre><code>APT::Periodic::Update-Package-Lists \"1\";\nAPT::Periodic::Unattended-Upgrade \"0\";\n</code></pre></p> <p>Alternatively you can uninstall the package <code>unattended-upgrades</code> as follows <pre><code>sudo apt remove unattended-upgrades\n</code></pre></p>"},{"location":"icub_operating_systems/icubos/further-tasks/#source-path","title":"Source Path","text":"<p>On the latest versions of iCub (the ones  with a COM-Express board) we store robot source code on the icub-head, instead of storing remotely on the icub-server and mounting via nfs. Usually, all required source code is stored in the following path <pre><code>/usr/local/src/robot\n</code></pre></p> <p>You can create it with the following command <pre><code>sudo mkdir -p /usr/local/src/robot\n</code></pre></p> <p>Then you must set the ownership of that folder to your default user (normally <code>icub</code>) as follows <pre><code>sudo chown icub:icub /usr/local/src/robot\n</code></pre></p> <p>Now, you can save here robot source code, compile it and start playing with your iCub.</p> <p>Have fun!</p>"},{"location":"icub_operating_systems/icubos/icubos/","title":"The OS on icub-head - Introduction","text":"<p>The iCubOS operating system is a customized version of Ubuntu GNU/Linux in the Server flavour.</p>"},{"location":"icub_operating_systems/icubos/icubos/#installation","title":"Installation","text":"<p>The simplest and quickest way to install the OS on <code>icub-head</code> is to get the latest pre-build iCubOS image from here and follow the instructions here.</p> <p>Otherwise, you can install it by yourself following the instructions written here</p>"},{"location":"icub_operating_systems/icubos/install-cmake/","title":"Install the latest CMake version (MANDATORY only for Ubuntu 20.04)","text":"<p>Info</p> <p>This procedure should be performed after the JetPack installation has been completed. </p> <p>The latest YARP v3.10.0 requires CMake &gt;= 3.19, but Ubuntu 20.04 only provides CMake 3.16, so it needs to be upgraded.</p> <p>To download the latest version, first remove CMake with:</p> <pre><code>sudo apt purge --auto-remove cmake\n</code></pre> <p>Get a copy of the signing key:</p> <pre><code>wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&gt;/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg &gt;/dev/null\n</code></pre> <p>Add the repository:</p> <pre><code>sudo apt-add-repository \"deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main\"\n</code></pre> <p>Update the repo index and install CMake:</p> <pre><code>sudo apt update\nsudo apt install cmake\n</code></pre>"},{"location":"icub_operating_systems/icubos/install-cuda-libraries/","title":"Install the CUDA libraries","text":"<p>Info</p> <p>This procedure should be performed after the JetPack installation has been completed. </p> <p>Usually the Jetpack flashing procedure takes care of installing the Cuda toolkit and libraries. If running the command <code>nvcc --version</code> returns <code>Command not found</code>, then you need to install them manually though <code>apt</code>.</p> <p>For example Jetpack 4.5.1, which uses Cuda 10.2 do:</p> <pre><code>sudo apt install cuda-libraries-dev-10-1 cuda-nvcc-10-2\n</code></pre> <p>Then, within the <code>.bashrc</code>:</p> <pre><code>export CUDA_HOME=/usr/local/cuda-10.2\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-10.2/lib64:/usr/local/cuda-10.2/extras/CUPTI/lib64\nexport PATH=$PATH:$CUDA_HOME/bin\n</code></pre>"},{"location":"icub_operating_systems/icubos/install-jtop/","title":"Install jtop","text":"<p>Info</p> <p>This procedure should be performed after the JetPack installation has been completed. </p> <p><code>jtop</code> (a.k.a jetson-stats) is a package for monitoring and control your NVIDIA Jetson boards.</p> <p></p> <p>For installing it:</p> <pre><code>sudo -H pip install -U jetson-stats\n</code></pre>"},{"location":"icub_operating_systems/icubos/install-librealsense/","title":"Install <code>librealsense</code> with Cuda support","text":"<p>Info</p> <p>This procedure should be performed after the JetPack installation has been completed. </p> <p><code>librealsense</code> is a cross-platform library provided by Intel that can be used to take advantage of the features of the Intel Realsense cameras. After installing the cuda libraries, we can make the Realsense camera use also the gpu resources for better performances, enabling the cuda support.</p> <p>The installation procedure depends on the Jetpack version installed on your board.</p>"},{"location":"icub_operating_systems/icubos/install-librealsense/#jetpack-5xx","title":"Jetpack 5.x.x","text":"<p>On Jetson board flashed with <code>Jetpack version 5.x.x</code>, you can follow the instructions to install <code>librealsense</code> with Debian packages.</p>"},{"location":"icub_operating_systems/icubos/install-librealsense/#jetpack-6xx","title":"Jetpack 6.x.x","text":"<p>For Jetson Orin with <code>Jetpack version \u2265 6.0.0</code>, the proper procedure is to install this library from source using the RSUSB backend, following the libuvc_installation.sh script.</p> <p>First of all, clone the <code>librealsense</code> official repository, and then navigate into the <code>scripts</code> folder:</p> <pre><code>git clone https://github.com/IntelRealSense/librealsense.git\ncd librealsense/scripts\n</code></pre> <p>For optimal performances, edit the script adding the following CMake options:</p> <pre><code>-DFORCE_RSUSB_BACKEND=ON -DBUILD_WITH_CUDA=ON\n</code></pre> <p>In the end, run the script:</p> <pre><code>./libuvc_installation.sh\n</code></pre> <p>For more information, refer to the official documentation provided in the repository.</p>"},{"location":"icub_operating_systems/icubos/installation-from-ansible-playbook/","title":"Installation from Ansible playbook","text":""},{"location":"icub_operating_systems/icubos/installation-from-ansible-playbook/#create-the-usb-installer","title":"Create the USB installer","text":"<p>The first step is to download the official Ubuntu 22.04 LTS Server install media from the release page. Search for <code>ubuntu-22.04.x-live-server-amd64.iso</code>.</p> <p>Then, please create the USB installer using a USB memory and a tool like Balena Etcher.</p> <p>Find further information about creating a bootable USB stick on Windows, Ubuntu or macOS.</p>"},{"location":"icub_operating_systems/icubos/installation-from-ansible-playbook/#install-ubuntu","title":"Install Ubuntu","text":"<p>Follow the below steps to install the Ubuntu server on icub-head.</p> <p>Please, note that the installation procedure can be slightly different in each release, you can see the Ubuntu server official install guide</p> <p>Warning</p> <p>The installation procedure will overwrite the disk of your icub-head, so all data will be deleted.</p>"},{"location":"icub_operating_systems/icubos/installation-from-ansible-playbook/#launch-the-playbook","title":"Launch the playbook","text":"<p>Once the basic OS has been installed it is time to download and launch our playbook:</p> <p>The Playbook covers the steps decribed in iCubOS installation from scratch, iCub user enviroment and further tasks.</p> <p>How to run:</p> <ul> <li>clone the repository </li> <li>Check the README file for further instructions</li> <li>launch as <code>sudo</code> the <code>start.sh</code> file <pre><code>git clone https://github.com/icub-tech-iit/icubos-playbook.git\n\ncd icubos-playbook/\n\nsudo ./start.sh\n</code></pre> A reboot is recommended in order to load the <code>Lowlatency</code> kernel instead of the <code>Generic</code>.</li> </ul> <p>Once the installation is completed  follow the Networking chapter of the guide to configure the network using netplan or your favorite network manager system.</p>"},{"location":"icub_operating_systems/icubos/installation-from-image/","title":"The OS on icub-head - Installation from pre-built image","text":"<p>Warning</p> <p>The instructions for installing a pre-built images are currently outdated. Please, refer to the other modes of installation.</p> <p>This method uses a pre-built disk image to install the icub-head, this image is a 1:1 copy of a working system: once the image is written on the icub-head disk (erasing any data currently on the disk!) you get a working system, with only a few customiztion required. If you prefer to install the system from scratch, please check the appropriate guide.</p>"},{"location":"icub_operating_systems/icubos/installation-from-image/#installation-procedure","title":"Installation procedure","text":"<p>This procedure involves the following steps:</p> <ol> <li>Create the bootable USB with the imaging tool (CloneZilla)</li> <li>Download the latest iCubOS image</li> <li>Connect the icub-head</li> <li>Boot the USB disk</li> <li>Write the image</li> <li>Reboot icub-head</li> <li>Customize the system</li> </ol>"},{"location":"icub_operating_systems/icubos/installation-from-image/#create-the-bootable-usb-with-the-imaging-tool-clonezilla","title":"Create the bootable USB with the imaging tool (CloneZilla)","text":"<p>The imaging tool used to create and restore icub-head disk images is CloneZilla LIVE.</p> <ol> <li>Download clonezilla from this link</li> <li>Get a USB 3 drive (at least 4 GB of size)</li> <li>Create the live USB following this guide</li> </ol>"},{"location":"icub_operating_systems/icubos/installation-from-image/#download-the-latest-icubos-image","title":"Download the latest iCubOS image","text":"<p>Get the lastest iCubOS image from this page and put it on an external USB drive (not the same where the CloneZilla LIVE is).</p> <p>The iCubOS archive contains a directory; just copy the directory itself (not its contents) on the external USB drive.  The USB drive can be formatted in any filesystem that can be natively read by Linux.</p>"},{"location":"icub_operating_systems/icubos/installation-from-image/#connect-the-icub-head","title":"Connect the icub-head","text":"<p>You need:</p> <ul> <li>USB 3 hub</li> <li>USB keyboard</li> <li>The Bootlabe USB with the imaging tool (see above)</li> <li>The external USB drive with the iCubOS disk image</li> <li>A monitor with DisplayPort input</li> </ul> <p>Connect the keyboard, the USB with clonezilla to the hub and the USB disk with the iCubOS disk image. Then connect the hub to a USB port in the iCub head. Connect the monitor to the DisplayPort socket in the iCub head.</p>"},{"location":"icub_operating_systems/icubos/installation-from-image/#boot-the-usb-disk","title":"Boot the USB disk","text":"<p>Power on the icub-head and enter BIOS, the select drive with CloneZilla as first in boot order, then boot from that drive.</p>"},{"location":"icub_operating_systems/icubos/installation-from-image/#write-the-image","title":"Write the image","text":"<p>Follow the steps below to write the image on the icub-head HD (detailed instruction about how to use CloneZilla can be found here ). Please, note that the instructions below refers to the lastest clonezilla release available at the time of writing (2.6.6)</p> <ol> <li>In boot menu, select the option <code>Clonezilla live (Defaut, To RAM)</code></li> <li>choose your language</li> <li>choose your keyboard layout</li> <li>select the <code>Start_clonezilla</code> option</li> <li>select the <code>device-image</code> option</li> <li>select the <code>local_dev</code> option</li> <li>do NOT remove the USB drive with Clonezilla live form the USB hub</li> <li>connect the USB with the disk image to the USB hub</li> <li>wait for the USB drive (as in step 8) is shown and press <code>CTRL-C</code></li> <li>select the correct drive and partition for the USB drive (as in step 8) (usually partition is n.1)</li> </ol>"},{"location":"icub_operating_systems/icubos/installation-from-image/#restart-icub-head","title":"Restart icub-head","text":"<p>Power down the icub-head and unplug the USB hub, then restart.</p>"},{"location":"icub_operating_systems/icubos/installation-from-image/#customize-and-update-the-system","title":"Customize and update the system","text":"<p>What you need now to do is to customize the installation with your hardware and enviroment; in particular, see the \"Required configuration\" section in Networking.</p> <p>After you correctly set up your network, it is necessary to update the system by entering in a terminal <code>sudo apt update</code> and <code>sudo apt upgrade</code>. This will update all packages and tools needed later to compile the superbuild.</p> <p>If you need to connect the icub-head to any Bluetooth device, please check the steps described in Bluetooth.</p> <p>Now you can proceed with installing the required YARP and iCub software by following the guide on Superbuild installation on icub-head.</p>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/","title":"The OS on icub-head - Installation from scratch","text":"<p>Since iCubOS is based on the Ubuntu server, we will install the latter from the default installer and then manually customize it.</p>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#latest-versions","title":"Latest versions","text":"<p>The latest version is based on Ubuntu Server 22.04</p>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#create-the-usb-installer","title":"Create the USB installer","text":"<p>The first step is to download the official Ubuntu 22.04 LTS Server install media from the release page. Search for <code>ubuntu-22.04.x-live-server-amd64.iso</code>.</p> <p>Then, please create the USB installer using a USB memory and a tool like Balena Etcher.</p> <p>Find further information about creating a bootable USB stick on Windows, Ubuntu or macOS.</p>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#install-ubuntu","title":"Install Ubuntu","text":"<p>Follow the below steps to install the Ubuntu server on icub-head.</p> <p>Please, note that the installation procedure can be slightly different in each release, you can see the Ubuntu server official install guide</p> <p>Warning</p> <p>The installation procedure will overwrite the disk of your icub-head, so all data will be deleted.</p>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#ubuntu-installer-configuration","title":"Ubuntu Installer configuration","text":"<p>Install the system by choosing the default options, except for the following steps:</p>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#keyboard-and-language","title":"Keyboard and language","text":"<ul> <li>Layout : <code>US</code></li> <li>Variant : <code>US</code></li> </ul>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#storage-configuration","title":"Storage configuration","text":"<ul> <li>Disable the following option : <code>Setup this disk as an LVM group</code></li> </ul>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#identity","title":"Identity","text":"<ul> <li>Your name : <code>icub</code></li> <li>Your Server's name : <code>icub-head</code></li> <li>Pick a username : <code>icub</code></li> <li>Choose a password : <code>icub</code></li> </ul>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#ssh","title":"SSH","text":"<ul> <li>Enable the following option : <code>Install SSH server</code></li> </ul>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#required-packages","title":"Required Packages","text":"<p>Install the following packages <pre><code>nfs-common python-tk libopencv-dev ntpdate vim ssh cmake-curses-gui iperf libportaudio2 portaudio19-dev linux-sound-base alsa-base alsa-utils gdb meld bmon libi2c-dev expect libgfortran-10-dev qml-module-qt-labs-folderlistmodel qml-module-qt-labs-settings\n</code></pre></p>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#low-latency-kernel","title":"Low Latency kernel","text":"<p>Install the following packages <pre><code>linux-image-lowlatency linux-headers-lowlatency\n</code></pre></p>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#disable-x-server-at-startup","title":"Disable X server at startup","text":"<p>The x server is started automatically at startup by GDM, so please disable GDM <pre><code>sudo systemctl disable gdm\n</code></pre></p>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#configuration-steps","title":"Configuration steps","text":""},{"location":"icub_operating_systems/icubos/installation-from-scratch/#ssh-configuration","title":"SSH configuration","text":"<ol> <li>Configure passwordless ssh: peruse these instructions.</li> <li>Disable reverse DNS lookup in SSH server: add the following line to the file <code>/etc/ssh/sshd_config</code> <pre><code>UseDNS no\n</code></pre></li> </ol>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#network-performances-tweaks","title":"Network performances tweaks","text":"<ol> <li> <p>Install the following packages   <pre><code>sudo apt install linux-image-lowlatency linux-headers-lowlatency\n</code></pre></p> </li> <li> <p>Modify the real-time priority of the process, add the file  <code>/etc/security/limits.d/icub.conf</code> as follows   <pre><code>icub    soft    rtprio    99\nicub    hard    rtprio    99\n</code></pre></p> </li> <li> <p>Set the max OS receive-buffer size for all types of connections, by adding the file <code>/etc/sysctl.d/20-net-rbuffer.conf</code> as follows   <pre><code># This sets the max OS receive-buffer size for all types of connections\nnet.core.rmem_max=8388608\n</code></pre></p> </li> </ol>"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#customize-the-system","title":"Customize the system","text":"<p>What now you need to do is to customize the installation with your hardware and environment (see the \"Required configuration\" paragraph in Networking, Bluetooth, User Environment chapters as well as Further Tasks chapter )</p>"},{"location":"icub_operating_systems/icubos/jetpack/","title":"The NVIDIA JetPack - Introduction","text":"<p>This guide is intended for developers who want to flash and set up the Nvidia Jetson boards. These units use a ConnectTech carrier board, so the preliminary instructions will be focused on that specific hardware. The table below shows as an example the tested setup for each Nvidia board currently in use.</p> Nvidia board OS JetPack ConnectTech carrier board BSP Xavier AGX Ubuntu 20.04 5.0.2 Rogue r35.0.1 Xavier NX Ubuntu 18.04 4.6.2 Quark r32.7.2 Orin NX Ubuntu 22.04 6.2 Boson for FRAMOS r36.4.3"},{"location":"icub_operating_systems/icubos/jetpack/#requirements","title":"Requirements","text":""},{"location":"icub_operating_systems/icubos/jetpack/#hardware","title":"Hardware","text":"<ul> <li>x86 PC/laptop for downloading Jetpack and flashing the OS</li> <li>USB-C to USB-A (or USB-C to USB-C) cable to connect the PC to the ConnectTech carrier</li> <li>Power supply cable</li> <li>Bench/System/ATE programmable DC power supply, capable of supplying 20V/2A</li> <li>(optional) Ethernet cable to connect the board to access it with SSH</li> </ul> <p>To use the Jetson board directly without SSHing into it: - HDMI cable to connect to an external display - USB mouse and keyboard</p>"},{"location":"icub_operating_systems/icubos/jetpack/#software","title":"Software","text":"<p>On the developer's host PC:</p> <ul> <li>Ubuntu 18.04-20.04 (depending on the version of the JetPack)</li> <li>Nvidia JetPack installed through SDK Manager (instructions below)</li> <li>Connecttech BSP specific for the <code>board_type</code> board (e.g. Xavier AGX, Orin NX) and JetPack <code>jetpack_ver</code> (e.g. 5.0.2, 5.1.2). (Not required if you already have the image ready to flash)</li> </ul>"},{"location":"icub_operating_systems/icubos/jetpack/#instructions","title":"Instructions","text":""},{"location":"icub_operating_systems/icubos/jetpack/#carrier-hardware-configuration","title":"Carrier hardware configuration","text":"<p>Each carrier board could be equipped with different switches that should be set at the startup. For example, for the <code>Rogue</code> carrier, make sure that the switches on the carrier are set like in the picture below, so that the unit can boot manually when pressing the power (PWR) button. DO NOT power on the unit until instructed.</p> <p></p>"},{"location":"icub_operating_systems/icubos/jetpack/#hardware-connection","title":"Hardware connection","text":"<ol> <li>Connect the carrier to the power supply through the provided cable, and set the power supply to 16V/2A.</li> <li>Keep the power supply OFF.</li> <li>Connect the HDMI cable, and the mouse/keyboard to the carrier.</li> <li>Use the USB-C cable to connect the PC to the OTG USB port on the carrier.</li> </ol>"},{"location":"icub_operating_systems/icubos/jetpack/#flash-a-new-image-from-scratch","title":"Flash a new image from scratch","text":"<p>If you need to install an new JetPack image from scratch please follow the following steps.</p>"},{"location":"icub_operating_systems/icubos/jetpack/#jetpack-setup-on-the-host","title":"Jetpack setup on the host","text":"<ol> <li>Download the Nvidia SDK manager from the official website by clicking Download Nvidia SDK Manager</li> <li>Run SDKManager and login with developer.nvidia.com credentials, and follow these steps:</li> <li>Set the following options:<ul> <li>Target Hardware: Jetson <code>board_type</code></li> <li>Target operating system: Linux Jetpack <code>jetpack_ver</code>.</li> </ul> </li> <li>Check that everything is selected and continue</li> <li>The SDKManager will ask the user password to download all the components and it will install them into a local folder on the host (~12Gb of free space required); remember: this is the password of the local Ubuntu host, not the Jetson one.</li> <li>After the installation, the SDK Manager will be ready to flash the OS image on the Nvidia board; Do not preceed further! Press SKIP to abort the operation and quit from the SDK Manager</li> <li>Download the ConnectTech board support package from the official website: under Downloads click on the BSP you need, it will be downloaded as <code>.tgz</code> archive.</li> <li>At this point the <code>SDKManager</code> should have created a folder tree in <code>~/nvidia</code> containing all the files needed for the flash. Copy the <code>.tgz</code> package downloaded from ConnectTech website into <code>~/nvidia/nvidia_sdk/JetPack_&lt;jetpack_ver&gt;_Linux_&lt;board_type&gt;/Linux_for_Tegra/</code></li> <li>Extract the BSP: <code>tar -xzf CTI-&lt;*&gt;.tgz</code></li> <li>Now, go into the CTI-L4T directory: <code>cd ./CTI-L4T</code></li> <li>Run the install script (as root or sudo) to automatically install the BSP files to the correct locations: <code>sudo ./install.sh</code></li> </ol> <p>Before flashing the image, we need first to put the board in recovery mode.</p>"},{"location":"icub_operating_systems/icubos/jetpack/#booting-the-nvidia-jetson-board-in-recovery-mode","title":"Booting the Nvidia Jetson board in Recovery mode","text":"<p>With the Nvidia Jetson Xavier AGX:</p> <ol> <li>Press the Force Recovery (FR) button on the carrier and keep it pressed</li> <li>Turn on the power supply (16V)</li> <li>Wait for several seconds, keeping the FR button pressed</li> <li>Press the power (PWR) button for at least one second. Wait for several seconds</li> <li>Release the FR button.</li> </ol> <p>Now the board is in programming mode.</p> <p>With a Nvidia Jetson Xavier NX, instead, keep the button RST/RECOVERY pressed for several seconds and then, when released, the board will be in recovery mode.</p> <p>With the Nvidia Jetson Orin NX, the procedure is quite the same. The recovery mode could be achieved by pressing the Force Recovery and the Reset buttons simultaneously, then release the reset and, after ~2 sec, release the FR button too. The fan should starts.</p> <p>In order to check that the board went in recovery mode, run on a terminal in the host</p> <pre><code>watch lsusb\n</code></pre> <p>The board is in recovery mode if it appears something like this</p> <p></p>"},{"location":"icub_operating_systems/icubos/jetpack/#flash-the-image","title":"Flash the image","text":"<p>At this point we are ready to flash.</p> <p>Warning</p> <p>If you want to configure your <code>Jetson Orin NX</code> to be used with <code>FRAMOS-IMX678</code> cameras, please refer to the specific procedure from hereinafter.</p> <ol> <li>From the previously folder, do <code>cd ..</code> to return to the Linux_for_Tegra directory</li> <li>Flash the image by running <code>sudo ./cti-flash.sh</code> script (otherwise you can use the manual flashing procedure).</li> </ol> <p>Note</p> <p>For the <code>Jetson Orin NX</code> board, since it is equipped with the nvme disk, the flashing script to be launched is: <code>sudo ./cti-nvme-flash.sh cti/orin-nx/boson/base</code></p> <p>Tip</p> <p>Check out the ConnectTech tutorial explaining the complete procedure.</p>"},{"location":"icub_operating_systems/icubos/jetpack/#verify-the-installation","title":"Verify the installation","text":"<p>After the reboot process, you should be greeted with the OS configuration wizard. After configuring the system, the Jetson board should boot normally and be ready to use.</p>"},{"location":"icub_operating_systems/icubos/jetpack/#post-flashing-operations","title":"Post-flashing operations","text":""},{"location":"icub_operating_systems/icubos/jetpack/#complete-the-oem-installation","title":"Complete the OEM installation","text":"<p>After booting into the OS, follow the OEM installation with the following options:</p> <ol> <li>Accept the license agreement</li> <li>Select English language</li> <li>Select the English (US) keyboard layout</li> <li>Select the preferred time zone</li> <li>Set the user name to <code>icub</code> with the hostname <code>icub-head-cam</code> or <code>ergocub</code> with hostname <code>ergocub-head</code>, depending on the robot the board will be mounted on</li> <li>Allow login without password</li> <li>Let the installation process finish</li> </ol> <p>After rebooting into the graphical OS, run the following commands in a terminal to update the system:</p> <pre><code>sudo apt install -f\nsudo apt update &amp;&amp; sudo apt upgrade\n</code></pre>"},{"location":"icub_operating_systems/icubos/jetpack/#post-flashing-operations_1","title":"Post-flashing operations","text":"<p>After successfully flashing your NVIDIA board by following the dedicated procedure, it is optional to perform a series of post-flashing operations to ensure the system is configured correctly and ready for use. The following steps will help finalize the setup.</p> <ul> <li>Install CUDA libraries</li> <li>Install librealsense</li> <li>Install jtop</li> <li>Install CMake (only for Ubuntu 20.04)</li> <li>Setup Orin NX for FRAMOS-IMX678 (only for <code>iCub head v2.10</code>)</li> <li>Setup ergoCub screen (only for <code>ergocub-head</code>)</li> </ul> <p>Moreover, if you are configuring a machine that is part of an iCub or ergoCub robot or it's used to simulate or communicate with them, you would need to install the software depending on the operating system. You can follow the robotology-superbuild installation guide.</p> <p>Warning</p> <p>If your machine has a CPU/GPU that relies on JetPack 5.x (e.g., the Jetson Xavier AGX board), which works with Ubuntu 20.04, please be aware that YARP officially dropped the support for Ubuntu 20.04 with apt dependencies. This means that YARP cannot be installed anymore with traditional methods such as via sources or binaries. For this reason, the only way to continue to use iCub/ergoCub software on these machines is to install the robotology-superbuild with conda dependencies.</p>"},{"location":"icub_operating_systems/icubos/networking/","title":"iCub networking","text":"<p>The networking on icub can be divided in two parts:</p> <ul> <li>internal (motor) networking : it is a network that connects to icub-head and all the motor controller boards on the robot, it is a segregated network (there is no connection from the nodes on its subnet and the ouside world) and it is used to send motor commands from icub-head to motor control boards</li> <li>extenal networking : it is the network connection that connects icub-head to the robot private subnet; it is used to connect the robot to the other machines in its enviroments, to the icub-server and to internet; this connection cam wired or wireless</li> </ul> <p>It isa also available a bluetooth connection on the icub-head, but it currently used only to read data from the battery controller in the robot backpack.</p>"},{"location":"icub_operating_systems/icubos/networking/#the-icub-private-subnet","title":"The iCub private subnet","text":"<p>The icub private subnet is the subnnet that connects all the machines in the robot enmviroment, see the schema below</p> <p></p>"},{"location":"icub_operating_systems/icubos/networking/#icub-head-network-interfaces","title":"icub-head network interfaces","text":"<p>On recent icub-head hardware there are 4 network interfaces:</p> <ul> <li>external cabled network - used to connect the icub-head to other machines in its enviroment, wired</li> <li>internal motor network - used to connect the icub-head to the onboard motor controllers</li> <li>external wireless network  - used to connect the icub-head to other machines in its enviroment, wireless</li> <li>bluetooth interface - used to connect the icub-head to the battery controller</li> </ul>"},{"location":"icub_operating_systems/icubos/networking/#ip-addresses-and-other-network-configurations","title":"IP addresses and other network configurations","text":"<p>Below you can find the default network paramenters of the the main icub-head network (external and motor).</p>"},{"location":"icub_operating_systems/icubos/networking/#motor-network-configurations","title":"Motor network configurations","text":"<p>This configuration depends deeply from the motor control board firware and thus it can't be changed</p> <ul> <li>IP address : 10.0.1.104 - STATIC</li> <li>Netmask : 255.255.255.0</li> </ul> <p>since this is a segregated network, there is no default gateway.</p>"},{"location":"icub_operating_systems/icubos/networking/#external-network-configurations","title":"External network configurations","text":"<p>Usually it is a static configuration, but it works also in DHCP mode. This configuration can be changed but it is not recommended</p> <ul> <li>IP address : 10.0.0.2</li> <li>Netmask : 255.255.255.0</li> <li>Default Gateway : 10.0.0.1</li> <li>DNS server : 10.0.0.1</li> </ul>"},{"location":"icub_operating_systems/icubos/networking/#networking-implementation-in-icubos","title":"Networking implementation in iCubOS","text":""},{"location":"icub_operating_systems/icubos/networking/#basic-principles","title":"Basic principles","text":"<p>The basic idea is that to setup a network bonding in active-passive mode with network and wifi connections, and the network has the role of master connection. So, if the network cable is connected to the robot, the traffic to icub-head passes through the cabled connection otherwise the system uses the wifi, but the connection keeps the same IP address. The switch is generally quite fast (couple of seconds), so we don't lose ssh connections to icub-head</p>"},{"location":"icub_operating_systems/icubos/networking/#netplan","title":"Netplan","text":"<p>Latest Ubuntu makes use of NETPLAN to configure the network via command line. Therefore, we set up <code>netplan</code> to create the above network bonding. <code>Netplan</code> relies on the configuration files found in the path:</p> <pre><code>/etc/netplan/\n</code></pre> <p>At startup, <code>netplan</code> loads all files in the above path with the <code>.yaml</code> extension.</p> <p>This behavior can be used to create several configurations to choose from. To this end, we stored several files in the <code>/etc/netplan</code> path on <code>icub-head</code>, as follows:</p> <ul> <li><code>50-icub-static.yaml.notload</code>: to use STATIC IP for cabled network configuration (no bonding, no wifi - THIS IS THE DEFAULT ).</li> <li><code>50-icub-dhcp.yaml.notload</code>: to get IP for cabled network configuration from DHCP server (no bonding, no wifi).</li> <li><code>50-icub-bonding-static.yaml.notload</code>: to create a bonding with cabled network and WiFi and use a static IP for the bonded connection.</li> <li><code>50-icub-bonding-dhcp.yaml.notload</code>: to create a bonding with cabled network and WiFi and get the IP for the bonded connection from DHCP server.</li> </ul> <p>To enable one specific configuration, we rely on the following symbolic link:</p> <ul> <li><code>50-icub.yaml</code>: pointing to the active configuration (see section below).</li> </ul>"},{"location":"icub_operating_systems/icubos/networking/#how-to-switch-among-netplan-configurations","title":"How to switch among <code>netplan</code> configurations","text":"<p>To check what configuration variant is actually symlinked, do: <pre><code>cd /etc/netplan\nls -la \n</code></pre></p> <p>To switch among the available <code>netplan</code> configurations, it suffices to update the symbolic link: <pre><code>cd /etc/netplan\nsudo ln -fs &lt;variant_that_you_actually_want_to_use&gt;.yaml.notload 50-icub.yaml\n</code></pre></p>"},{"location":"icub_operating_systems/icubos/networking/#required-configuration","title":"Required configuration","text":"<p>There are some parameters that must be configured on each icub-head installation because they are hardware dependant (network interfaces names) or user-dependant (Wifi configuration)</p>"},{"location":"icub_operating_systems/icubos/networking/#network-interfaces-names","title":"Network interfaces names","text":"<p>The names assigned to the network interfaces by the OS are hardware dependant, so on each new installation you must check that the name of the interfaces (internal, motor and wifi) written in the file  <code>/etc/netplan\\50-icub.yaml</code> corresponds to the actual ones, shown by the commmand  <code>ip link</code></p>"},{"location":"icub_operating_systems/icubos/networking/#wifi","title":"WiFi","text":"<p>If wifi is used (see above), please change the Wifi configuration in the file  <code>/etc/netplan\\50-icub.yaml</code> with your ESSID and WiFi password in the lines below  <pre><code>  wifis:\n    ...\n    access-points:\n      \"please-put-your-ESSID-here\":\n        password: \"please-put-your-wifi-password-here\"\n</code></pre></p>"},{"location":"icub_operating_systems/icubos/setup-ergocub-screen/","title":"Setup ergoCub Screen","text":"<p>Info</p> <p>This procedure applies only to <code>ergocub-head</code> and must be performed after the JetPack installation has been completed.</p> <p>When you start the ergoCub head for the first time, the screen will display a desktop showing the NVIDIA logo. While this is generally fine, it requires the user to manually run the <code>ergoCubEmotions</code> module. This procedure allows you to hide all bars on the desktop and set the wallpaper to one of the images stored in the expressions folder.</p>"},{"location":"icub_operating_systems/icubos/setup-ergocub-screen/#hide-the-ubuntu-bar","title":"Hide the Ubuntu Bar","text":"<p>This guide is based on these instructions. </p> <ol> <li> <p>Create a script in the <code>ergocub-head</code> home directory:</p> <pre><code>#!/bin/bash\n\nstatus1=$(gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell --method org.gnome.Shell.Eval string:'Main.panel.actor.visible;')\nstatus2=$(gdbus call --session --dest org.gnome.Shell.Extensions --object-path /org/gnome/Shell/Extensions --method org.gnome.Shell.Extensions.GetExtensionInfo ubuntu-dock@ubuntu.com | grep \"'state': &lt;2.0&gt;\" &gt;/dev/null &amp;&amp; echo \"OFF\" || echo \"ON\")\n\nif [ \"$status1\" == \"(true, 'false')\" ]; then\n  gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell --method org.gnome.Shell.Eval 'Main.panel.actor.show();'\nelse\n  gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell --method org.gnome.Shell.Eval 'Main.panel.actor.hide();'\nfi\n\nif [ \"$status2\" == \"ON\" ]; then\n  gdbus call --session --dest org.gnome.Shell.Extensions --object-path /org/gnome/Shell/Extensions --method org.gnome.Shell.Extensions.DisableExtension ubuntu-dock@ubuntu.com\nelse\n  gdbus call --session --dest org.gnome.Shell.Extensions --object-path /org/gnome/Shell/Extensions --method org.gnome.Shell.Extensions.EnableExtension ubuntu-dock@ubuntu.com\nfi\n</code></pre> </li> <li> <p>Run the script to toggle hiding or showing the bars.</p> </li> </ol>"},{"location":"icub_operating_systems/icubos/setup-ergocub-screen/#change-the-desktop-wallpaper","title":"Change the Desktop Wallpaper","text":"<ol> <li> <p>SSH into the <code>ergocub-head</code> and use the following command to set the wallpaper:</p> <pre><code>gsettings set org.gnome.desktop.background picture-uri &lt;uri-of-the-wallpaper&gt;\n</code></pre> </li> <li> <p>If ergocub-software is installed via the robotology-superbuild, you can use this command:</p> <pre><code>gsettings set org.gnome.desktop.background picture-uri file:///usr/local/src/robot/robotology-superbuild/src/ergocub-software/src/modules/ergoCubEmotions/expressions/images/exp_img_1.png\n</code></pre> </li> </ol>"},{"location":"icub_operating_systems/icubos/setup-ergocub-screen/#clean-the-icons-from-the-desktop","title":"Clean the Icons from the Desktop","text":"<ol> <li> <p>Create a folder in the home directory to store the desktop files:</p> <pre><code>mkdir ~/all_desktop\n</code></pre> </li> <li> <p>Move all files from the desktop to the newly created folder:</p> <pre><code>mv ~/Desktop/* ~/all_desktop/\n</code></pre> </li> </ol>"},{"location":"icub_operating_systems/icubos/setup-framos-imx678/","title":"Setup Orin NX for using with FRAMOS-IMX678-C","text":"<p>This guide aims to highlight the correct procedure to configure the setup for using the <code>FRAMOS-IMX678</code> cameras with the <code>Orin NX</code> from Nvidia + <code>Boson for FRAMOS</code> carrier from ConnectTech.</p> <p>Info</p> <p>Be sure that the Jetpack installation procedure up to the BSP installation on the setup has been completed. At this point we are ready to flash the image.</p>"},{"location":"icub_operating_systems/icubos/setup-framos-imx678/#flash-the-image","title":"Flash the image","text":"<p>In the host:</p> <ol> <li>Navigate into <code>/nvidia/nvidia_sdk_JetPack_6.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra</code></li> <li>Run the flash script (as root or sudo):</li> </ol> <pre><code>sudo ./cti-nvme-flash.sh cti/orin-nx/boson/fsm-imx678-2cam\n</code></pre> <ol> <li>Once the flash has completed, the board will reboot.</li> </ol> <p>Check out the ConnectTech tutorial explaining the complete procedure.</p>"},{"location":"icub_operating_systems/icubos/setup-framos-imx678/#complete-the-oem-installation","title":"Complete the OEM installation","text":"<p>After booting into the OS, follow the OEM installation with the default options.</p> <p>Set the user name to <code>icub</code> with the hostname <code>icub-head</code>. Allow login without password and let the installation process finish.</p> <p>After rebooting into the graphical OS, run the following commands in a terminal to update the system:</p> <pre><code>sudo apt install -f\nsudo apt update &amp;&amp; sudo apt upgrade\nreboot\n</code></pre>"},{"location":"icub_operating_systems/icubos/setup-framos-imx678/#switch-profile-on-orin-nx","title":"Switch profile on Orin NX","text":"<p>After the reboot process:</p> <ol> <li>Open a new terminal on the Orin NX and run <code>sudo cti-orin-nx-nano-fdt.sh</code></li> <li>Follow the interactive procedure and select <code>Orin NX</code>, then <code>Boson NGX007</code> and finally the profile for the FRAMOS IMX678 cameras, i.e. <code>fsm-imx678-2cam</code></li> <li> <p>Once the script exits, run <code>sync</code> and <code>reboot</code> to finalize the changes.</p> <p></p> </li> </ol>"},{"location":"icub_operating_systems/icubos/setup-framos-imx678/#post-flashing-operations","title":"Post-flashing operations","text":""},{"location":"icub_operating_systems/icubos/setup-framos-imx678/#install-framos-drivers","title":"Install FRAMOS drivers","text":"<p>Browsing the <code>FRAMOS Github</code> organization, it's possibile to download and install the <code>framos-jetson-drivers</code> and <code>framos-jetson-libsv</code> by following the detailed procedure in the README.md of the repositories. A further guide is proposed here to help even more in the installation.</p>"},{"location":"icub_operating_systems/icubos/setup-framos-imx678/#framos-jetson-drivers","title":"framos-jetson-drivers","text":"<p>First of all, it is necessary to follow the guide to install the source code on the target system, which, in this case, is the Jetson board.</p> <p>After that, you need to configure the sensor: to be more flexible, it is recommended to follow the command line procedure rather than the interactive one. For a configuration consisting of 2 FRAMOS IMX678 sensors, it is necessary to run the following command:</p> <pre><code>sudo jetson-config-camera-cli.py -n \"Framos IMX678-CAM0-2Lane\" \"Framos IMX678-CAM1-2Lane\"\n</code></pre> <p>More information can be found in the README.md of the repository linked above.</p>"},{"location":"icub_operating_systems/icubos/setup-framos-imx678/#framos-jetson-libsv","title":"framos-jetson-libsv","text":"<p>Here the procedure is easier: after cloning the repository and checkout on to the branch of your Jetpack (if you follow the instruction till this section, it would be <code>l4t-r36.4.3</code>), you need to run the follow:</p> <pre><code>cd ~/framos-jetson-libsv/bin\nsudo ./install.sh\n</code></pre> <p>As soon as the installation procedure has finished, please power off the Orin NX. Then plug-in your cameras to the <code>CAM1</code> and <code>CAM2</code> connectors, and finally power on the board again.</p> <p>Warning</p> <p>During the flashing procedure, the profile <code>fsm-imx678-2cam</code> has been selected, which means that two cameras could be used with this configuration. For this reason, only <code>CAM1</code> and <code>CAM2</code> connectors are enabled to read the data from the FRAMOS-IMX678, while CAM3 and CAM4 are not. Please, be sure that they are properly connected.</p> <p>Check if the cameras are detected running <code>ls /dev/video*</code> from the command line.</p>"},{"location":"icub_operating_systems/icubos/user-env/","title":"iCub user environment","text":"<p>The main user configured on all iCub Setup machines is usually <code>icub</code> (SID: 1000 - GID 1000).</p> <p>All the environment configurations required for this user are stored in a separate file that is loaded every time a bash session is started.</p>"},{"location":"icub_operating_systems/icubos/user-env/#note","title":"Note","text":"<p>If you installed your system starting from an image (eg. the iCubOS - Installation from image chapter), the steps below have already been added into the image.</p>"},{"location":"icub_operating_systems/icubos/user-env/#users-and-passwords","title":"Users and Passwords","text":"<p>The default user account is</p> <p>Username : <code>icub</code> Password : <code>icub</code></p> <p>If you want to change the default password simply execute (this works only if you are using persistence)</p> <p><code>passwd\u00a0icub</code></p> <p>NOTE: As in any Ubuntu installation, the root user has no password, this means that the direct login (i.e. ssh root@icub-head) is disabled, but you can always do</p> <p><code>sudo\u00a0su\u00a0-</code></p>"},{"location":"icub_operating_systems/icubos/user-env/#the-bashrc","title":"The bashrc","text":"<p>The user enviroment configurations (for bash sessions) are stored in the file</p> <p><code>~/.bashrc_iCub</code></p>"},{"location":"icub_operating_systems/icubos/user-env/#online-updated-version","title":"Online updated version","text":"<p>You can find the updated default .bashrc_iCub file online. There are two versions of the iCub environment file:</p> <ul> <li><code>bashrc_iCub_superbuild</code> - a special version of icub user environment, in case of compilation of the repository ROBOTOLOGY SUPERBUILD</li> <li><code>bashrc_iCub</code> - the standard version of icub user environment, if you DO NOT intend to use the repository ROBOTOLOGY-SUPERBUILD</li> </ul> <p>the above files must be renamed to <code>.bashrc_iCub</code> and saved in the user home directory, along with the <code>.bashrc</code> file.</p>"},{"location":"icub_operating_systems/icubos/user-env/#how-to-setup-the-enviroment-properly","title":"How to setup the enviroment properly","text":"<p>To use the <code>~/.bashrc_iCub</code> file to setup the environment, the following lines: <pre><code>if [[ $- == *i* ]] || [[ -n \"$SSH_CLIENT\" ]] || [[ -n \"$SSH_TTY\" ]]; then\n  #Load the iCub custom bashrc\n  if [ \"$HOME\" != \"\" ]; then\n      ICUBRC_FILE=\"${HOME}/.bashrc_iCub\"\n  else\n      ICUBRC_FILE=\"/home/icub/.bashrc_iCub\"\n  fi\n  if [ -f \"$ICUBRC_FILE\" ]; then\n      source $ICUBRC_FILE\n  fi\nfi\n</code></pre> should be added at the beginning of file <code>~/.bashrc</code> just BEFORE the following lines: <pre><code># If not running interactively, don't do anything\ncase $- in\n   *i*) ;;\n     *) return;;\nesac\n</code></pre></p> <p>The reason why the <code>.bashrc_iCub</code> needs to be added at the beginning of <code>~/.bashrc</code> is that file must be loaded every time an interactive or ssh bash sessions are started. The lines of code after <code># If not running interactively, don't do anything</code> make the <code>~/.bashrc</code> file exit if executed in a non-interactive shell.</p>"},{"location":"icub_operating_systems/icubos/user-env/#required-configuration","title":"Required configuration","text":"<p>To customize the above user environment, you ought to manually make some changes:</p> <ul> <li>The YARP_ROBOT_NAME - you must insert your robot name, in the following line and remove the leading \"#\" <pre><code>#export YARP_ROBOT_NAME=\n</code></pre></li> </ul>"},{"location":"icub_operating_systems/icubos/user-env/#groups","title":"Groups","text":"<p>Add the user icub to the following groups</p> <ul> <li>video</li> <li>audio</li> <li>tty</li> <li>dialout</li> <li>i2c</li> <li>bluetooth</li> </ul> <p>use the next command to perform that action <pre><code>usermod -a -G video,audio,tty,dialout,i2c,bluetooth icub\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/cuda-workstation/","title":"The CUDA workstation","text":"<p>This page contains guidelines to install the iCub nVidia CUDA Workstation.</p> <p>We assume you have installed a working Debian or Ubuntu on the laptop. You can freely decide to install 32 bit or 64 bit, the code compiles on both architectures.</p> <p>Be aware that if you plan to share the repository with other machines, all machines need to have the same architecture (32 versus 64 bits, same versions of the libraries). A possibility would be to share the same code directory and different builds.</p>"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#prerequisite-basic-system-setup-for-a-icub-machine","title":"Prerequisite : basic system setup for a iCub machine","text":"<p>Please follow the instructions on page Generic iCub machine installation instructions, in order to prepare a generic machine for the iCub network. Then, follow the steps below to customize it as the iCub Laptop</p>"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#note","title":"Note","text":"<p>In the following instructions, we assume that the installed OS is a Debian GNU/Linux Wheezy. If you are using a different distribution os release, please modify the instructions accordingly.</p>"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#installation-steps","title":"Installation steps","text":""},{"location":"icub_operating_systems/other-machines/cuda-workstation/#install-cuda-toolkit","title":"Install CUDA toolkit","text":""},{"location":"icub_operating_systems/other-machines/cuda-workstation/#from-distribution-repository-debian-ubuntu-quite-old-versions","title":"From Distribution repository (Debian / Ubuntu, quite old versions)","text":"<ul> <li>DEBIAN : from Debian non-free repository, install the following     packages</li> </ul> <p><code>nvidia-cuda-toolkit\u00a0nvidia-cuda-dev</code></p> <ul> <li>UBUNTU : from multiverse repository, install the following     packages</li> </ul> <p><code>nvidia-cuda-toolkit\u00a0nvidia-cuda-dev</code></p>"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#from-the-nvidia-developer-website-ubuntu-always-the-latest-version","title":"From the nVidia Developer website (Ubuntu, always the latest version)","text":"<p>Install the package for your distribution and architecture from https://developer.nvidia.com/cuda-downloads</p>"},{"location":"icub_operating_systems/other-machines/generic-machine/","title":"Generic iCub environment machines","text":"<p>This page contains instructions on how to prepare a machine to work in the iCub Subnet environment. This basic setup is useful as a starting point for preparing any machine in the iCub ecosystem.</p>"},{"location":"icub_operating_systems/other-machines/generic-machine/#operating-system","title":"Operating System","text":"<p>You can choose both a Debian or Ubuntu Linux, the currently suggested OS is Ubuntu 22.04 (Jammy Jellyfish).</p>"},{"location":"icub_operating_systems/other-machines/generic-machine/#user-account","title":"User account","text":""},{"location":"icub_operating_systems/other-machines/generic-machine/#users-and-passwords","title":"Users and Passwords","text":"<p>The default user account is</p> <p>Username : <code>icub</code> Password : <code>icub</code></p> <p>If you want to change the default password simply execute (this works only if you are using persistence)</p> <p><code>passwd\u00a0icub</code></p> <p>root login</p> <p>As in any Ubuntu installation, the root user has no password, this means that the direct login (i.e. ssh root@icub-head) is disabled, but you can always do</p> <p><code>sudo\u00a0su\u00a0-</code></p> <p>Add the icub user to the sudoers group, as follows</p> <p><code>sudo usermod -aG sudo icub</code></p>"},{"location":"icub_operating_systems/other-machines/generic-machine/#required-and-useful-packages","title":"Required and useful Packages","text":"<p>Please install the following packages (names are correct for Ubuntu 20.04, please check the corresponding package in your distribution):</p> <p><code>nfs-common\u00a0python-tk\u00a0libopencv-dev\u00a0ntpdate\u00a0ssh\u00a0cmake-curses-gui</code></p> <p>Also install (optional, but very useful) the following packages:</p> <p><code>vim\u00a0iperf</code></p>"},{"location":"icub_operating_systems/other-machines/generic-machine/#debian-software-repository","title":"Debian Software repository","text":"<p>for Debian systems</p> <p>this step is required only for a Debian machine.</p> <p>Enable the non-free and contrib sources, by editing the file <code>/etc/apt/sources.list</code></p>"},{"location":"icub_operating_systems/other-machines/generic-machine/#network-configuration","title":"Network configuration","text":"<p>You have two options:</p> <ul> <li>Static IP address (this option is mandatory  if there is no DHCP in your subnet - like in the case of the iCub Console Server - or if your machine is the DHCP server - this is the case of  the iCub Dedicated Server )</li> <li>Dynamic DHCP IP address</li> </ul>"},{"location":"icub_operating_systems/other-machines/generic-machine/#configuration-methods","title":"Configuration methods","text":"<p>Usually, if you have a Desktop installed on your machine it's better to use the default desktop network tool (e.g., in Ubuntu 22.04 the tool is Network Manager) or its CLI <code>nmtui</code>, which is very powerful and easy to use even when connected via <code>ssh</code>.</p> <p>Otherwise, you can configure the network interfaces using the command line configuration files (eg. in Ubuntu 22.04 you have to deal with NETPLAN )</p>"},{"location":"icub_operating_systems/other-machines/generic-machine/#the-hosts-file","title":"the HOSTS file","text":"<p>Please check that the file <code>/etc/hosts</code> looks as follows:</p> <pre><code>127.0.0.1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0localhost\n127.0.1.1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MACHINE_HOSTNAME.icub.local\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MACHINE_HOSTNAME\n</code></pre> <p>where MACHINE_HOSTNAME is the hostname of your machine, which should match the file <code>/etc/hostname</code></p>"},{"location":"icub_operating_systems/other-machines/generic-machine/#ntp-configuration","title":"NTP configuration","text":"<p>in case of iCub server</p> <p>Skip this step in case of iCub Console Server or iCub Dedicated Server</p> <p>You should configure this machine as an NTP client and then configure the NTP service to point to <code>icub-srv</code> as an NTP server.</p> <p>You can use several different packages to install an NTP client, but we recommend using <code>systemd-timesyncd</code> and removing the package <code>ntp</code>, if present.</p> <p>To configure <code>timesyncd</code> the only thing needed is to edit the file <code>/etc/systemd/timesyncd.conf</code> by adding the line <code>NTP=10.0.0.1</code> or your current NTP server IP address.</p> <p>Not mandatory but recommended, add also in the same file the line <code>FallbackNTP=ntp.ubuntu.com</code> this will be our backup NTP server.</p> <p>Finally, restart <code>timesyncd</code>service</p> <p><code>sudo systemctl restart systemd-timesyncd</code></p>"},{"location":"icub_operating_systems/other-machines/generic-machine/#icub-user-environment-variables","title":"iCub user environment variables","text":"<p>in case of iCub dedicated server</p> <p>Skip this step in case of iCub Dedicated Server</p> <p>see User Environment chapter</p>"},{"location":"icub_operating_systems/other-machines/generic-machine/#customize-the-system","title":"Customize the system","text":"<p>What now you need to do is to customize the installation with your hardware and environment (see User Environment chapter)</p>"},{"location":"icub_operating_systems/other-machines/generic-machine/#special-computers","title":"Special computers","text":"<p>In the case of special machines (such as the CUDA workstation or icub laptop) you must follow further steps in order to complete the installation:</p> <ul> <li>iCub Dedicated Server</li> <li>iCub Console Server</li> <li>The nVidia CUDA workstation</li> </ul>"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/","title":"The iCub Dedicated Server - Installation from pre-built image","text":"<p>This method uses a pre-built disk image to install the icub-server, this image is a 1:1 copy of a working system: once the image is written on the icub-server disk (erasing any data currently on the disk!) you get a working system, with only a few customiztion required. If you prefer to install the system from scratch, please check the appropriate guide.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#prerequisite","title":"Prerequisite","text":"<p>Please check that the BIOS configuration allows to boot from USB drive.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#installation-procedure","title":"Installation procedure","text":"<p>This procedure involves the following steps:</p> <ol> <li>Create the bootable USB with the imaging tool (CloneZilla)</li> <li>Download the latest iCub server image</li> <li>Connect the icub-server</li> <li>Boot the USB disk</li> <li>Write the image</li> <li>Reboot icub-server</li> <li>Customize the system</li> </ol>"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#create-the-bootable-usb-with-the-imaging-tool-clonezilla","title":"Create the bootable USB with the imaging tool (CloneZilla)","text":"<p>The imaging tool used to create and restore icub-head disk images is CloneZilla LIVE.</p> <ol> <li>Download clonezilla from this link</li> <li>Get a USB 3 USB drive (at least 4 GB of size)</li> <li>Create the live USB following this guide</li> </ol>"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#download-the-latest-icub-server-image","title":"Download the latest iCub server image","text":"<p>Get the lastest iCubServerOS image on this page and put it on a external USB drive (not the same were is CloneZilla LIVE)</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#connect-the-icub-server","title":"Connect the icub-server","text":"<p>You need:</p> <ul> <li>USB 3 hub</li> <li>USB keyboard</li> <li>The Bootable USB with the imaging tool (see above)</li> <li>The external USB drive with the iCubOS disk image</li> <li>A monitor with DisplayPort input</li> </ul> <p>Connect the keyboard, the USB with clonezilla to the hub and the USB disk with the iCubOS disk image. Then connect the hub to a USB port in the iCub head. Connect the monitor to the DisplayPort socket in the iCub head.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#boot-the-usb-disk","title":"Boot the USB disk","text":"<p>Power on the icub-server and enter BIOS, the select drive with CloneZilla as first in boot order, then boot from that drive.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#write-the-image","title":"Write the image","text":"<p>Follow the steps below to write the image on the icub-head HD (detailed instruction about how to use CloneZilla can be found here ).</p> <p>Note</p> <p>Please note that the instructions below refers to the lastest clonezilla release available at the time of writing (2.6.6)</p> <ol> <li>In boot menu, select the option <code>Clonezilla live (Defaut, To RAM)</code></li> <li>choose your language</li> <li>choose your keyboard layout</li> <li>select the <code>Start_clonezilla</code> option</li> <li>select the <code>device-image</code> option</li> <li>select the <code>local_dev</code> option</li> <li>remove the USB drive with Clonezilla live form the USB hub</li> <li>ensure that the USB with the disk image is connected to the USB hub</li> <li>wait for the USB drive (as in step 8) is shown and press <code>CTRL-C</code></li> <li>select the correct drive and partition for the USB drive (as in step 8) (usually partition is n.1)</li> </ol>"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#restart-icub-server","title":"Restart icub-server","text":"<p>Power down the server, then restart.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#users-and-passwords","title":"Users and Passwords","text":"<p>The default user account is</p> <p>Username : <code>icub</code> Password : <code>icub</code></p> <p>If you want to change the default password simply execute (this works only if you are using persistence)</p> <p><code>passwd\u00a0icub</code></p> <p>root login</p> <p>As in any Ubuntu installation, the root user has no password, this means that the direct login (i.e. ssh root@icub-head) is disabled, but you can always do</p> <p><code>sudo\u00a0su\u00a0-</code></p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/","title":"The iCub Dedicated Server - Installation from scratch","text":"<p>Since iCubOS is based on Ubuntu server, we will install Ubuntu server from the default installer and then we manually customize it.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#latest-versions","title":"Latest versions","text":"<p>The latest version is based on Ubuntu Server 24.04.x</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#prerequisite","title":"Prerequisite","text":"<p>Please check that the BIOS configuration allows booting from a USB drive.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#create-the-usb-installer","title":"Create the USB installer","text":"<p>The first step is downloading the official Ubuntu 24.04 LTS Server install media from the release page. Search for <code>ubuntu-24.04.x-live-server-amd64.iso</code>.</p> <p>Then please create the USB installer using a USB memory and a tool like Balena Etcher.</p> <p>Find further information about creating a bootable USB stick on Windows, Ubuntu or macOS.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#install-system","title":"Install system","text":"<p>Use the following details to install Ubuntu server on icub-server. You can find further details and guides on the official Ubuntu Server installation guide</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#basic-info","title":"Basic Info","text":"<ul> <li>Hostname : icub-srv</li> <li>IP address : 10.0.0.1</li> <li>Username : icub</li> <li>Password : icub</li> </ul>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#operative-system","title":"Operative System","text":"<ul> <li>Installed OS : Ubuntu Server 24.04.3 LTS</li> <li>Language : english</li> <li>Country : Italy</li> <li>Locale : en_US.UTF-8</li> <li>Keyboard : english (US)</li> <li>Hostname : icub-srv</li> <li>Kernel version : 6.14.0-29-generic x86_64</li> <li>Partions : single - 237Gb EXT4 (plus EFI)</li> </ul> <p>Warning</p> <p>Please disable LVM configuration during the partitioning step of the installation procedure</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#network-configuration","title":"Network configuration","text":""},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#external-connection","title":"external connection","text":"<pre><code>enp1s0:\n  dhcp4: true\n  dhcp6: false\n  dhcp-identifier: mac\n  optional: true\n</code></pre>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#internal-connection","title":"internal connection","text":"<pre><code>enp2s0:\n  dhcp4: false\n  dhcp6: false\n  addresses: [10.0.0.1/24]\n</code></pre> <p>configuration details</p> <p>See file <code>/etc/netplan/50-icub-srv.yaml</code> for configuration details</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#remove-cloud-init-package","title":"Remove Cloud Init package","text":"<p>Remove cloud init package <pre><code>sudo apt purge cloud-guest-utils cloud-init cloud-initramfs-copymods cloud-initramfs-dyn-netconf\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#ip-forwarding","title":"IP forwarding","text":"<p>To enable IP forwarding edit the file /etc/sysctl.conf by modifying the below line as follows <pre><code>net.ipv4.ip_forward = 1\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#network-address-translation","title":"Network Address Translation","text":"<p>The following IPTABLES rules enable the NAT <pre><code>sudo iptables --table nat --append POSTROUTING --out-interface enp1s0 -j MASQUERADE\nsudo iptables --append FORWARD --in-interface enp2s0 --out-interface enp1s0 -j ACCEPT\n</code></pre></p> <p>Install the package iptables-persistent <pre><code>sudo apt install iptables-persistent\n</code></pre></p> <p>further details</p> <p>See file <code>/etc/iptables/rules.v4</code> for persistent rules details</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#dns-server","title":"DNS Server","text":"<p>Install package bind9 <pre><code>sudo apt install bind9 bind9utils\n</code></pre></p> <p>further details</p> <p>See configuration files in <code>/etc/bind</code> and <code>/var/lib/bind</code> for further details</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#fix-logging-configuration","title":"Fix logging configuration","text":"<p>create the folder <code>/var/log/bind/</code> and set correct ownership <pre><code>mkdir /var/log/bind/\nchown bind:bind /var/log/bind/\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#dhcp-client","title":"DHCP Client","text":"<p>Edit the file <code>/etc/dhcp/dhclient.conf</code>  adding the following lines <pre><code>supersede domain-name \"icub.local\";\nprepend domain-name-servers 127.0.0.1;\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#dhcp-server","title":"DHCP Server","text":"<p>Install package isc-dhcp-server <pre><code>sudo apt install isc-dhcp-server\n</code></pre> Edit the file /etc/default/isc-dhcp-server as follows <pre><code>INTERFACESv4=\"enp2s0\"\n</code></pre></p> <p>further details</p> <p>See configurations files in <code>/etc/dhcp</code> for configuration details</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#fix-logging-configuration_1","title":"Fix logging configuration","text":"<p>Create the folder <code>/var/log/dhcpd/</code> and set correct ownerhip <pre><code>mkdir /var/log/dhcpd/\nchown bind:bind /var/log/named/\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#rndc-fix","title":"RNDC fix","text":"<p>To fix the RNDC please use the following commands <pre><code>sudo cp /etc/bind/rndc.key /etc/dhcp/ddns-keys/\nsudo chown root:root /etc/dhcp/ddns-keys/rndc.key\nsudo chmod 640 /etc/dhcp/ddns-keys/rndc.key\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#apparmor-profiles-update","title":"AppArmor profiles update","text":"<p>In order to allow DCHPD and Bind services to read in write their configuration fields and logs, you should add some lines in the local apparmod configuration</p> <ul> <li><code>/etc/apparmor.d/local/usr.sbin.dhcpd</code> <code>/var/log/dhcpd/** rw, /var/log/dhcpd/ rw,  <pre><code>- `/etc/apparmor.d/local/usr.sbin.named`\n</code></pre>  /var/log/bind/** rw,  /var/log/bind/ rw,</code></li> </ul> <p>!!! note \"further details\"      See configurations files in <code>/etc/apparmo.d</code> for configuration details</p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#logrotate-configuration","title":"Logrotate configuration","text":"<p>You should add the lograte configuration for the log files from DHCPD and Bind service by adding the following files</p> <ul> <li><code>/etc/logrotate.d/dhcpd</code> <pre><code>/var/log/dhcpd/dhcpd.log {\n  rotate 4\n  daily\n  create\n  compress\n  missingok\n  notifempty\n}\n</code></pre></li> <li><code>/etc/logrotate.d/named</code> <pre><code>/var/log/bind/default.log\n/var/log/bind/ddns.log\n/var/log/bind/query.log\n/var/log/bind/query-errors.log {\n  rotate 4\n  daily\n  create\n  compress\n  missingok\n  notifempty\n},\n</code></pre></li> </ul>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#set-correct-timezone","title":"Set correct timezone","text":"<p>Change the timezone to Europe/Rome <pre><code>ln -sf /usr/share/zoneinfo/Europe/Rome /etc/localtime\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#ntp-server","title":"NTP Server","text":"<p>Install the ntp package <pre><code>sudo apt install ntp\n</code></pre> add the following lines to the file /etc/ntp.conf <pre><code>server 10.255.8.30\nserver 10.255.8.31\n# the following lines make the server a master server\nserver          127.127.1.0 # local clock\nfudge           127.127.1.0 stratum 10\nbroadcastdelay  0.008\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#nfs-server","title":"NFS Server","text":"<p>The laptop hosts two directories and export them using nfs. Both of the are mounted by the other machines on the network, by the PC104 and by the laptop itself :</p> <ul> <li>/exports/code - this contains the robot software sources such as YARP, iCub Software.</li> <li>/local/yarp - this contains the YARP configuration files, shared by all the machine in the network</li> </ul> <p>For this to work you need:</p> <p>Install the package nfs-kernel-server <pre><code>sudo apt install nfs-kernel-server\n</code></pre> Create the exports target paths and change ownership to icub user <pre><code>sudo mkdir -p /exports/code /exports/local_yarp\nsudo chown icub:icub /exports/code\nsudo chown icub:icub /exports/local_yarp\n</code></pre> Edit the exports configuration file /etc/exports as follows <pre><code>/exports/code           10.0.0.0/255.255.255.0(rw,sync,no_subtree_check)\n/exports/local_yarp     10.0.0.0/255.255.255.0(rw,sync,no_subtree_check)\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#disable-unattended-upgrades","title":"Disable unattended-upgrades","text":"<p>In order to avoid automatic system updates you can edit the file <code>/etc/apt/apt.conf.d/20auto-upgrades by</code> changing the following lines <pre><code>APT::Periodic::Update-Package-Lists \"1\";\nAPT::Periodic::Unattended-Upgrade \"0\";\n</code></pre></p> <p>Alternatively you can uninstall the package <code>unattended-upgrades</code> as follows <pre><code>sudo apt remove unattended-upgrades\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#customize-the-system","title":"Customize the system","text":"<p>What now you need to do is to customize the installation with your hardware and environment</p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/","title":"The iCub Console Server","text":"<p>This page contains guidelines for the installation of the iCub Console Server, a laptop used both as console and as network server, so that it matches the requirements of the Linux on the icub-head.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#prerequisites-basic-system-setup-for-an-icub-machine","title":"Prerequisites : basic system setup for an iCub machine","text":"<p>Please follow the instructions on page Generic iCub machine installation instructions, in order to prepare a generic machine for the iCub network.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#network-configuration","title":"Network configuration","text":"<p>Note</p> <p>Of course, this suggested configuration is not mandatory, but this guide assumes that you are using it.</p> <p>Usually, the laptop network connections are used as follows</p> <ul> <li>Cabled connection (internal) - Connection to the robot; this port is used to connect to the icub-head, both directly (a network cable connect the robot and the laptop) or through a switch</li> <li>Wireless connection (external) - Connection to the ouside world, to reach internet; this connection is used also by the robot as Gateway (see \"IP forwarding and NAT below)</li> </ul> <p>The above network connection can be configured using the Network Manager GUI with the following parameters:</p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#cabled-internal-network-parameters","title":"Cabled (internal) Network parameters","text":"<ul> <li>IP Address : 10.0.0.1</li> <li>Netmask : 255.255.255.0</li> </ul>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#wireless-external-network-parameters","title":"Wireless (external) Network parameters","text":"<p>This configuration depends on your network, but usually it uses DHCP</p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#username-and-hostname","title":"Username and hostname","text":"<p>Note</p> <p>Of course, this suggested configuration is not mandatory, but this guide assumes that you are using it.</p> <p>Username : <code>icub</code> Hostname : <code>icubsrv</code></p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#the-host-file","title":"The host file","text":"<p>Add following lines in the file <code>/etc/hosts</code></p> <pre><code>10.0.0.2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0icub-head icub-head.icub.local pc104 pc104.icub.local\n</code></pre>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#nfs-server","title":"NFS Server","text":"<p>The laptop hosts two directories and export them using nfs. Both of them are mounted by the other machines on the network, by the icub-head and by the laptop itself :</p> <ul> <li><code>/exports/code</code> - this contains the robot software sources such as     YARP, iCub Software.</li> <li><code>/local/yarp</code> - this contains the YARP configuration files, shared by all the machine in the network.</li> </ul> <p>For this to work you need to:</p> <ul> <li>install nfs server on the laptop:</li> </ul> <pre><code>sudo\u00a0apt-get\u00a0install\u00a0nfs-kernel-server\u00a0nfs-common\u00a0portmap\n</code></pre> <ul> <li>create the directories that will be exported:</li> </ul> <pre><code>sudo\u00a0mkdir\u00a0-p\u00a0/exports/code\nsudo\u00a0mkdir\u00a0-p\u00a0/exports/local_yarp\n</code></pre> <p>Set appropriate permissions to the icub user:</p> <pre><code>sudo\u00a0chown\u00a0icub:icub\u00a0-R\u00a0/exports/code\nsudo\u00a0chown\u00a0icub:icub\u00a0-R\u00a0/exports/local_yarp\n</code></pre> <ul> <li>Now configure the nfs-kernel-server:</li> </ul> <p>Add these lines to /etc/exports:</p> <pre><code>/exports/code\u00a010.0.0.0/255.255.255.0(rw,sync,no_subtree_check)\n/exports/local_yarp\u00a010.0.0.0/255.255.255.0(rw,sync,no_subtree_check)\n</code></pre> <p>You might need to restart the nfs server.</p> <pre><code>sudo\u00a0/etc/init.d/nfs-kernel-server\u00a0restart\n</code></pre> <p>Or just reboot the machine.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#software-repositories","title":"Software repositories","text":"<p>Create a symbolic link to the code export path as follows (as root)</p> <pre><code>sudo\u00a0ln\u00a0-s\u00a0/exports/code\u00a0/usr/local/src/robot\n</code></pre> <p>You can then follow the instructions to clone the robotology-superbuild repository into <code>/exports/code</code> and build the ecosystem.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#yarp-local-path","title":"YARP local path","text":"<p>Create a symbolic link to the local yarp export path as follows (as root)</p> <pre><code>mkdir\u00a0-p\u00a0/home/icub/.local/share\nln\u00a0-s\u00a0/exports/local_yarp\u00a0/home/icub/.local/share/yarp\n</code></pre>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#how-to-configure-the-yarpserver-in-the-icub-setup","title":"How to configure the <code>yarpserver</code> in the iCub setup","text":"<p>The iCub Console Server is generally the unit of the iCub setup devoted to hosting the <code>yarpserver</code>. Therefore, on the iCub Console Server, one needs to properly set up the YARP namespace, to then launch the server:</p> <pre><code>yarp namespace /icub\nyarpserver\n</code></pre> <p>The namespace needs to be set up only once; the default namespace is <code>/root</code>, but <code>/icub</code> (or similar names) tends to be a better choice as it enforces a policy for connecting to the robot network.</p> <p>Analogously, on all the other machines connected to the iCub network running the YARP infrastructure, one needs to do the following:</p> <pre><code>yarp namespace /icub\nyarp detect --write\n</code></pre> <p>The commands above allow a machine to talk to the YARP server.</p> <p>If <code>yarp detect</code> fails to detect the server, the following command should narrow down the search:</p> <pre><code>yarp conf ip socketport\n</code></pre> <p>where <code>ip</code> is the IP address of the iCub Console Server and <code>socketport</code> is the port retained by the YARP server (usually, <code>10000</code>).</p> <p>To find out more on the YARP CLI, refer to the YARP official documentation.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#install-the-ssh-keys-for-password-less-login-on-icub-head","title":"Install the ssh keys for password-less login on icub-head","text":"<ol> <li> <p>Log in as icub and create an ssh key. <pre><code>ssh-keygen\u00a0-t\u00a0rsa\n</code></pre></p> </li> <li> <p>Leave all choices to default just by pressing return button</p> </li> <li>Upload this key file to icub-head <pre><code>ssh-copy-id\u00a0-i\u00a0/home/icub/.ssh/id_rsa.pub\u00a0icub@icub-head\n</code></pre></li> </ol> <p>4.You have to create a ssh connection also between icubsrv and icubsrv itself in order to let yarp run as server automatically through yarpmanager: <pre><code>ssh-copy-id -i /home/icub/.ssh/id_rsa.pub icub@icubsrv\n</code></pre></p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#ip-forwarding-and-nat","title":"IP forwarding and NAT","text":"<p>Enable NAT and port forwarding so that the icub-head (and other machines on the network) have internet access (using wlan0 as external network interface)</p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#enable-ip-forwarding","title":"Enable IP forwarding","text":"<p>Edit the file <code>/etc/sysctl.conf</code> and UNcomment the following line to allow icub-head(pc104) to use the internet connection of the server</p> <pre><code>net.ipv4.ip_forward\u00a0=\u00a01\n</code></pre>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#setup-network-address-translation","title":"Setup Network Address Translation","text":"<p>First take note of the names of your network connections by checking the output of the following command:</p> <pre><code>ip addr\n</code></pre> <p>Let's now assume that - the cabled (internal) network connection is <code>eth0</code> - the wifi (external) network connection is <code>wlan0</code></p> <ol> <li> <p>Add the IPTABLES rules <pre><code>sudo iptables --table nat --append POSTROUTING --out-interface wlan0 -j MASQUERADE\nsudo iptables --append FORWARD --in-interface eth0 -j ACCEPT\n</code></pre></p> </li> <li> <p>Make the above rules persistent Installing the <code>iptables-persistent</code> package <pre><code>sudo apt install iptables-persistent\n</code></pre> Once you installed the package <code>iptables-persistent</code> it will asks you to save the current ipv4 and ipv6 iptables rules, answer yes to save it. Otherwise you can save it later with the command <pre><code>sudo iptables-save &gt; /etc/iptables/rules.v4\n</code></pre></p> </li> </ol>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#clock-synchronization","title":"Clock synchronization","text":"<p>Download the ntp package <pre><code>sudo\u00a0apt-get\u00a0install\u00a0ntp\n</code></pre></p> <p>Your Laptop has to be the master server for the icub-head so add those lines at the end of file <code>/etc/ntp.conf</code></p> <pre><code> #\u00a0the\u00a0following\u00a0lines\u00a0make\u00a0the\u00a0server\u00a0a\u00a0master\u00a0server\nserver\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0127.127.1.0\u00a0#\u00a0local\u00a0clock\n fudge\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0127.127.1.0\u00a0stratum\u00a010\n broadcastdelay\u00a0\u00a00.008\n</code></pre> <p>In general it is a good idea if all the machines on the iCub network have synchronized clock via NTP</p>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#tweaks","title":"Tweaks","text":""},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#how-to-change-the-network-card-used-to-connect-to-the-robot-aka-internal-network","title":"How to change the network card used to connect to the robot (aka INTERNAL network)","text":"<p>This section explains how to change the network card used to connect the laptop to the robot, eg. if you need to replace the internal one with an ETH2USB adapter.</p> <p>Warning</p> <p>If you are replacing the network card with an ETH2USB adapter this procedure must be executed any time you use a new adapter, in other words if you replace the adapter with a different one, this procedure must be executed again.</p> <ol> <li>Take note of the new network interface name The first thing is to know which is the name that the system has assigned to the new interface. Before adding the new interface, please issue this command:</li> </ol> <p><code>ip link</code></p> <p>This will return a line each ethernet connection available, eg:</p> <pre><code> 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000\n    link/ether d8:9e:f3:0d:3b:af brd ff:ff:ff:ff:ff:ff\n 3: wlan0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master main-bond state DOWN mode DORMANT group default qlen 1000\n    link/ether 6a:7f:5b:a6:7e:5e brd ff:ff:ff:ff:ff:ff\n</code></pre> <ol> <li>Add the new ethernet card, issue the command <code>ip link</code> and check the differences, eg: <pre><code> 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000\n    link/ether d8:9e:f3:0d:3b:af brd ff:ff:ff:ff:ff:ff\n 3: wlan0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master main-bond state DOWN mode DORMANT group default qlen 1000\n    link/ether 6a:7f:5b:a6:7e:5e brd ff:ff:ff:ff:ff:ff\n 4: enx3c8cf8fba684: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc fq_codel state DOWN mode DEFAULT group default qlen 1000\n    link/ether 3c:8c:f8:fb:a6:84 brd ff:ff:ff:ff:ff:ff\n</code></pre></li> </ol> <p>In the above example, the new ethernet card name is enx3c8cf8fba684 and the one to replace is eth0</p> <ol> <li> <p>Update the IP Table rules Edit the file <code>/etc/iptables/rules.v4</code> by replacing the old internal network name (in this example <code>eth0</code>) with the new one (in this example <code>enx3c8cf8fba684</code>). It can be a good idea to comment the old lines and add new ones with updated parameters, eg: <pre><code> # Generated by iptables-save v1.6.1 on Mon Nov 11 13:58:02 2019\n *filter\n :INPUT ACCEPT [48:2917]\n :FORWARD ACCEPT [8:455]\n :OUTPUT ACCEPT [45:6652]\n #-A FORWARD -i wlan0 -o eth0 -j ACCEPT\n -A FORWARD -i wlan0 -o enx3c8cf8fba684 -j ACCEPT\n COMMIT\n # Completed on Mon Nov 11 13:58:02 2019\n # Generated by iptables-save v1.6.1 on Mon Nov 11 13:58:02 2019\n *nat\n :PREROUTING ACCEPT [4:540]\n :INPUT ACCEPT [3:449]\n :OUTPUT ACCEPT [0:0]\n :POSTROUTING ACCEPT [0:0]\n  -A POSTROUTING -o enx3c8cf8fba684 -j MASQUERADE\n COMMIT\n # Completed on Mon Nov 11 13:58:02 2019\n</code></pre></p> </li> <li> <p>Reboot the laptop</p> </li> </ol>"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#how-to-change-the-network-card-used-to-connect-to-internet-aka-external-network","title":"How to change the network card used to connect to internet (aka EXTERNAL network)","text":"<p>This section explains how to change the network card used to connect the laptop to the external word (internet), usually a wifi, eg. if you need to replace the wifi with an ETH2USB adapter (cabled).</p> <p>Warning</p> <p>If you are replacing the network connection with an ETH2USB adapter this procedure must be executed any time you use a new adapter, in other words if you replace the adapter with a different one, this procedure must be executed again.</p> <ol> <li>Take note of the new network interface name The first thing is to know which is the name that the system has assigne to the new interface. Before adding the new interface, please issue this command:</li> </ol> <p><code>ip link</code></p> <p>This will return a line each ethernet connection available, eg:</p> <pre><code> 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000\n    link/ether d8:9e:f3:0d:3b:af brd ff:ff:ff:ff:ff:ff\n 3: wlan0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master main-bond state DOWN mode DORMANT group default qlen 1000\n    link/ether 6a:7f:5b:a6:7e:5e brd ff:ff:ff:ff:ff:ff\n</code></pre> <ol> <li>Add the new ethernet card, issue the command <code>ip link</code> and check the differences, eg: <pre><code> 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000\n    link/ether d8:9e:f3:0d:3b:af brd ff:ff:ff:ff:ff:ff\n 3: wlan0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master main-bond state DOWN mode DORMANT group default qlen 1000\n    link/ether 6a:7f:5b:a6:7e:5e brd ff:ff:ff:ff:ff:ff\n 4: enx3c8cf8fba684: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc fq_codel state DOWN mode DEFAULT group default qlen 1000\n    link/ether 3c:8c:f8:fb:a6:84 brd ff:ff:ff:ff:ff:ff\n</code></pre></li> </ol> <p>In the above example, the new ethernet card name is enx3c8cf8fba684 and the one to replace is wlan0</p> <ol> <li> <p>Update the IP Table rules Edit the file <code>/etc/iptables/rules.v4</code> by replacing the wifi network name (in this example <code>wlan0</code>) with the new one (in this example <code>enx3c8cf8fba684</code>). It can be a good idea to comment the old lines and add new ones with updated parameters, eg: <pre><code> # Generated by iptables-save v1.6.1 on Mon Nov 11 13:58:02 2019\n *filter\n :INPUT ACCEPT [48:2917]\n :FORWARD ACCEPT [8:455]\n #-A FORWARD -i wlan0 -o eth0 -j ACCEPT\n -A FORWARD -i enx3c8cf8fba684 -o eth0 -j ACCEPT\n # Completed on Mon Nov 11 13:58:02 2019\n # Generated by iptables-save v1.6.1 on Mon Nov 11 13:58:02 2019\n *nat\n :PREROUTING ACCEPT [4:540]\n :INPUT ACCEPT [3:449]\n :OUTPUT ACCEPT [0:0]\n :POSTROUTING ACCEPT [0:0]\n -A POSTROUTING -o eth0 -j MASQUERADE\n COMMIT\n # Completed on Mon Nov 11 13:58:02 2019\n</code></pre></p> </li> <li> <p>Reboot the laptop</p> </li> </ol>"},{"location":"icub_operating_systems/other-machines/icub-server-os/","title":"The OS on icub-server - Introduction","text":"<p>The iCubServerOS operating system is a customized version of Ubuntu GNU/Linux in the Server flavour.</p>"},{"location":"icub_operating_systems/other-machines/icub-server-os/#installation","title":"Installation","text":"<p>The simplest and quickest way to install the OS on <code>icub-server</code> is to get the latest pre-build iCubServerOS image from here and follow the instructions here.</p> <p>Otherwise, you can install it by yourself following the instructions written here</p>"},{"location":"icub_operating_systems/pc104/icub-live-32bits/","title":"Building a 32 bits version of iCub LIVE","text":"<p>Since the first versions of the PC-10 boards are ony 32 bits, the prebuilt images for versions above 4.x cannot be used to upgrade the OS. An alternative solution is to build a slightly modified version of the image, using the scripts from this repo.</p> <p>Here are the steps to follow to build an iCub LIVE image based on Debian Buster (7.10): - Get a Debian environment - Clone the icus-os-files repository - Build the image - Flash the image on a USB stick</p> <p>The process described here is very similar to the one used to build 64 bits images. Feel free to take a look at the iCub LIVE presentation, installation procedure and details to fully understand what we are doing.</p>"},{"location":"icub_operating_systems/pc104/icub-live-32bits/#get-a-debian-environment","title":"Get a Debian environment","text":"<p>You can use a PC with Debian installed, but using a Virtualbox VM enables you to isolate your build fron everything else running on the computer. To set up your VM:</p> <ul> <li>Download and install VirtualBox</li> <li>Download a 32bits Debian ISO, preferably the version that you want to build</li> <li>Launch VirtualBox</li> <li>Create a new Debian 32bits VM. Make sure you give enough cores / RAM for the VM to work properly (e.g. 2 cores and 4-8 GB RAM)</li> <li>Select the VM you just created; click on \"Settings &gt; Storage\", and mount a new CD/DVD. WHen asked, select the file you just downloaded.</li> <li>Turn the VM on; follow the usual Debian installation steps</li> <li>You will probably need to install the VirtualBox Extension Pack to give the guest VM USB \u2154 access. The pack can be downloaded on the same page as VirtualBox</li> </ul> <p>Once this is done, you have a working Debian environment. We can now build the iCub LIVE image</p>"},{"location":"icub_operating_systems/pc104/icub-live-32bits/#clone-the-icus-os-files-repository","title":"Clone the icus-os-files repository","text":"<p>The image we want to create is based on Debian LIVE build. However, a number of iCub-specific modifications are then applied. To make the process easier, everything is scripted and the code is available here. To get ready to build the image:</p> <ul> <li>Open a terminal in your Debian environment</li> <li>Install git: <code>sudo apt install git</code></li> <li>Clone the repository: <code>git clone https://github.com/icub-tech-iit/icub-os-files.git</code></li> <li>Go to the folder containing our scripts: <code>cd icub-os-files/scripts/icub-live</code></li> <li>Make the scripts executable: <code>chmod u+x ./*.sh</code></li> <li>Adapt the files for a 32 bits architecture based on the changes pointed out from within this PR. To this end, you may cherry-pick the commit.</li> </ul>"},{"location":"icub_operating_systems/pc104/icub-live-32bits/#build-and-flash-the-image","title":"Build and flash the image","text":"<p>From there, you can follow the procedure described at the bottom of the iCub LIVE details page. In short:</p> <ul> <li>Run <code>./icub_create-live.sh -s all</code>; this will give you a <code>.iso</code> file.</li> <li>Switch to Windows (you can use VirtualBox for that too, but you'll have to install the extension pack again), install Rufus and burn the <code>.iso</code> file on a USB stick. Don't forget to set a persistent partition, use FAT32 and a MBR partition scheme.</li> </ul> <p>You can then boot the PC104 using the USB stick. Please note that:</p> <ul> <li>You should not try to boot on the stick with any other hardware than the PC104</li> <li>The default linux boot menu may get stuck if you do not press the enter key. In that case, plug the USB stick in a computer, mount the partitions, open the file <code>/usr/lib/live/mount/persistence/sda1/isolinux/isolinux.cfg</code>, and change <code>timeout 0</code> to <code>timeout 5</code> (you can change the number depending on how long you want the boot menu to wait). Unmount the partition, plug the USB stick in PC104, and it should be fixed.</li> <li>You may need to rebuild the cfw002 driver; you can just build it from source</li> </ul>"},{"location":"icub_operating_systems/pc104/icub-live/","title":"The OS on PC104 (live USB) - Introduction","text":"<p>The pc104 located inside the iCub head runs a full Debian distribution. This version of Linux has been customized for the specific application and to boot from an USB key. As the iCub (project) grows up, many updates have been performed to this Linux usb-key image to follow the hardware as well as the Debian distribution changes. Stable versions are frozen into image files and uploaded to the iCub webserver.</p> <p>At any time to determine the version of the image is running on your iCub, the following files in the root of the filesystem can be inspected:</p> <ul> <li><code>VERSION_PC104</code>: contains the version of the image</li> <li><code>ChangeLog_PC104</code>: list changes to the image</li> </ul>"},{"location":"icub_operating_systems/pc104/icub-live/#latest-version","title":"Latest version","text":"<p>The latest version is 7.10 based on Debian 10 (Buster).</p> <p><code>robotology-superbuild</code> stopped supporting Debian &lt;= 10</p> <p>Please, consider that the last release of <code>robotology-superbuild</code> supporting Debian &lt;= 10 is v2024.08.0. Check out \ud83c\udff7\ufe0f issue #365 for further details.</p>"},{"location":"icub_operating_systems/pc104/icub-live/#versioning","title":"Versioning","text":"<ul> <li>1.x This is an Etch'n'half based distribution, built on a Debian LIVE system.</li> <li>2.x This is a Debian Lenny based distribution, built on a Debian LIVE system.</li> <li>3.x This is a Debian Squeeze based distribution, contains a kernel with Real-Time patch.</li> <li>4.x This is a Debian Wheezy based distribution, this version contains an updated version of libportaudio.</li> <li>5.x This is a Debian Wheezy based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches)</li> <li>6.x This is a Debian Jessie based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches)</li> <li>7.9.x This is a Debian Stretch (v9) based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches)</li> <li>7.10.x This is a Debian Buster (v10) based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches)</li> </ul> <p>Starting from version 5.0, the image file name is composed by four parts: a a major release, a minor release, a build release that is a string containing the build date and a kernel flavor string, which describes the kernel architecture the image is built for.</p> <p>For example, <code>icub-live_5.0-14.11.12-rt-amd64.iso</code> is:</p> <ul> <li><code>5</code>\u00a0is\u00a0the\u00a0major\u00a0release</li> <li><code>0</code>\u00a0is\u00a0the\u00a0minor\u00a0release</li> <li><code>14.11.12</code>\u00a0is\u00a0the\u00a0build\u00a0release\u00a0(Year.Month.Day)</li> <li><code>rt-amd64</code>\u00a0is\u00a0the\u00a0kernel\u00a0flavour</li> </ul>"},{"location":"icub_operating_systems/pc104/icub-live/#32-bits-vs-64-bits","title":"32 bits vs 64 bits","text":"<p>As can be seen in the previous section, iCub LIVE versions starting from 5.x all require a 64 bits architecture. However, it is possible to build 32 bits versions by following the guidelines described here.</p>"},{"location":"icub_operating_systems/pc104/icub-live/#users-and-passwords","title":"Users and Passwords","text":"<p>Starting from version 5.0, the default user account is</p> <p>Username\u00a0:\u00a0<code>icub</code> Password\u00a0:\u00a0<code>live</code></p> <p>If you want to change the default password simply execute (this works only if you are using persistence)</p> <p><code>passwd\u00a0icub</code></p> <p>Note</p> <p>the root user has no password, this means that the direct login (i.e. ssh root@10.0.0.2) is disabled, but you can always do <code>sudo\u00a0su\u00a0-</code> once connected as icub, to switch to the root user.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/","title":"The OS on PC104 (live USB) - Details","text":"<p>This page is meant to describe how a icub-live differs from a vanilla Debian live systems</p> <p>Warning</p> <p>This page is valid ONLY for the PC104 image with version 5.0 and above</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#additional-packages","title":"Additional Packages","text":"<p>The image is (at the moment of writing, version 7.10) based on a default Debian Buster (10) LIVE image, but with some additional packages: <pre><code>build-essential\ngcc\ng++\nmake\ngdb\ncmake\ncmake-curses-gui\npkg-config\nlibtinyxml-dev\nlibportaudio2\nlibace-dev\nlibgsl-dev\nlibopencv-dev\nlibpcap-dev\nglade\nlibglademm-2.4-dev\nlibgtkmm-2.4-dev\nlibncurses5-dev\nsubversion\ngit\nlibraw1394-dev\nlibdc1394-22-dev\nlibpcap0.8\nfestival\nswig\nlibreadline-dev\nliblua5.2-dev\nlibeigen3-dev\nlibreadline5\nportaudio19-dev\nlibboost-system-dev\nsudo\nssh\nopenssh-server\nnfs-common\nntpdate\nlibportaudiocpp0\nlibportaudio2\niperf\ndnsutils\nresolvconf\nbash-completion\nqtbase5-dev\nqtdeclarative5-dev\nqtmultimedia5-dev\nqml-module-qtquick2\nqml-module-qtquick-window2\nqml-module-qtmultimedia\nqml-module-qtquick-dialogs\nqml-module-qtquick-controls\nlibqt5svg5\nvim\nless\niperf\ndnsutils\nalsa-utils\nethtool\nusbutils\nnetcat-traditional\nnmap\ntcpdump\nmeld\nbmon\nunzip\n</code></pre></p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#the-kernel","title":"The kernel","text":"<p>The kernel used at the moment of writing is a x86 AMD64 kernel version  4.19.0-6 amd64 with Real Time patches (the rt-amd64 flavour).</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#custom-files","title":"Custom files","text":""},{"location":"icub_operating_systems/pc104/the-icub-live-details/#readme-version-and-changelog","title":"README, VERSION and ChangeLog","text":"<p>The following files, available in the root filesystem contains various information about the LIVE release</p> <ul> <li>README : contains useful info about the LIVE imag and its requirements</li> <li>VERSION : contains version info (build version, build date and distro on which this build is created)</li> <li>ChangeLog : contains the release ChangeLog</li> </ul>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#icub-startup-scripts","title":"iCub startup scripts","text":"<p>Some scripts must to be executed at startup time, so we need to modify the rc.local file as follows</p> <pre><code>#!/bin/sh\n#\n# rc.local\n#\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n#\n# In order to enable or disable this script just change the execution\n# bits.\n#\n# By default this script does nothing.\n# run iCub config scripts\nSCRIPT_DIR=/etc/rciCub.d\necho \"Running scripts in $SCRIPT_DIR\"\nfor filename in ${SCRIPT_DIR}/S*.sh; do\n  echo \"Running $filename\"\n  bash $filename\ndone\n\nexit 0\n</code></pre> <p>In this way, all the startup scripts in /etc/rciCub.d are executed at boot time.</p> <p>Please note that some of the above scripts load kernel modules required by peripherals</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#the-ntp-script","title":"The NTP script","text":"<p>This script is used to synchronize the PC104 clock with the one provided by icub-server (via NTP):</p> <pre><code>#!/bin/sh -e\n#start script to synchronize data in a separated shell to avoid init process waiting for a response\n/etc/rciCub.d/synchtime.sh &amp;\nexit 0\n</code></pre> <p>The above scrits only executes the following script in background</p> <pre><code>#!/bin/sh\nsleep 30\nfor TRIALS in 0 1 2 3 4 5 6 7 8 9 ; do\n  /usr/sbin/ntpdate-debian -u 2&gt; /dev/null\n  RESULT=$?\n  if [ $RESULT -eq 0 ]; then\n    echo \"ntpdate synch OK \"\n    exit 0\n  else\n    sleep 20\n  fi\ndone\necho \"ntpdate synch failed: aborting!\"\nexit 1\n</code></pre>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#the-mount-script","title":"The mount script","text":"<p>This script is used to mount the remote NFS shares only when the icub-server that exports them is reachable</p> <pre><code>#! /bin/bash\n# Mount remote filesystems\nMOUNTS_FILE=\"/etc/rciCub.d/mounts.list\"\nPACKETS_PER_PING=10\nMAX_RETRIES_N=3\nSLEEP_TIME_SEC=5\nPING_DEST=\"10.0.0.1\"\necho \"Mounting remote filesystems..\"\nCOUNT=0\nRETVAL=1\nwhile [ \"$COUNT\" -lt \"$MAX_RETRIES_N\" ] &amp;&amp; [ \"$RETVAL\" != \"0\" ]\ndo\n  ping -c $PACKETS_PER_PING -q $PING_DEST\n  RETVAL=$?\n  if [ \"$RETVAL\" != \"0\" ]\n  then\n    echo \"Failed to contact $PING_DEST, sleeping for $SLEEP_TIME_SEC seconds..\"\n    sleep $SLEEP_TIME_SEC\n  fi\n  (( COUNT += 1 ))\ndone\nif [ \"$RETVAL\" != \"0\" ]\nthen\n  echo \" Failed: impossible to contact $PING_DEST\"\n  exit 1\nfi\nif [ ! -f \"$MOUNTS_FILE\" ]\nthen\n  echo \" Failed: remote mounts file $MOUNTS_FILE not found\"\n  exit 1\nfi\nmapfile -t MOUNTS_ARRAY  &lt; $MOUNTS_FILE\nfor i in $(seq ${#MOUNTS_ARRAY[*]}); do\n  if [ \"${MOUNTS_ARRAY[$i]}\" != \"\" ] &amp;&amp; [ \"${MOUNTS_ARRAY[$i]:0:1}\" != \"#\" ]\n  then\n    SOURCE=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $1}' )\n    MOUNTPOINT=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $2}' )\n    FS_TYPE=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $3}' )\n    OPTIONS=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $4}' )\n    COUNT=0\n    RETVAL=1\n    while [ \"$COUNT\" -lt \"$MAX_RETRIES_N\" ] &amp;&amp; [ \"$RETVAL\" != \"0\" ]\n    do\n      sleep $SLEEP_TIME_SEC\n      echo \"Mounting $SOURCE\"\n      mount -t $FS_TYPE -o $OPTIONS $SOURCE $MOUNTPOINT\n      RETVAL=$?\n      if [ \"$RETVAL\" != \"0\" ]\n      then\n        sleep $SLEEP_TIME_SEC\n      fi\n      (( COUNT += 1 ))\n    done\n  fi\ndone\nexit 0\n</code></pre> <p>The mount.list file used by the mount script is as follows</p> <pre><code># Source Dest_mountpoint FS_type options\n# (please do not use blank spaces)\n10.0.0.1:/exports/code /usr/local/src/robot nfs _netdev,auto\n10.0.0.1:/exports/local_yarp /home/icub/.local/share/yarp nfs  _netdev,auto\n</code></pre>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#kernel-modules","title":"Kernel modules","text":"<p>The following kernel modules have been compiled manually and added to the system: - AERFX2 driver - CFW002 driver</p> <p>Other files (libraries, header, UDEV scripts, start-up scripts, configuration files) required by each module have been added to the live image (see module specific instruction above).</p> <p>The path <code>/usr/local/src</code> contains the modules source files</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#network-configuration","title":"Network configuration","text":"<p>The configuration is done via the file <code>/etc/network/interfaces</code> as follows</p> <pre><code># The primary network interface (Motors network)\nallow-hotplug eth0\niface eth0 inet static\n  address 10.0.1.104\n  netmask 255.255.255.0\nauto eth0\n# The secondary network interface (External network)\nallow-hotplug eth1\niface eth1 inet static\n  address 10.0.0.2\n  netmask 255.255.255.0\n  network 10.0.0.0\n  broadcast 10.0.0.255\n  gateway 10.0.0.1\n  dns-nameservers 10.0.0.1 8.8.8.8\n  dns-domain icub.local\n  dns-search icub.local\nauto eth1\n</code></pre>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#ssh-configuration","title":"SSH configuration","text":"<p>In order to speed up SSH connection, the DNS lookup is disabled with parameter <code>UseDNS no</code> in SSH server configuration file <code>/etc/ssh/sshd_config</code></p> <p>Because the live system disables the password authentication at system startup, the script <code>/lib/live/config/9100-openssh-login</code> is used to enable it on starup by adding the following line to <code>/etc/ssh/sshd_config</code> <pre><code> PasswordAuthentication yes\n</code></pre></p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#ntp-configuration","title":"NTP configuration","text":"<p>We use icub-srv (10.0.0.1) as NTP server.</p> <p>The package ntp is installed but not executed, so we add the following line to <code>/etc/ntp.conf</code> <pre><code>server 10.0.0.1\n</code></pre></p> <p>and we change the file <code>/etc/default/ntp</code> as follows <pre><code>STARTUP_DISABLED='yes'\n</code></pre></p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#nfs-configuration","title":"NFS configuration","text":"<p>we mount the following two remote NFS shares from icub-srv <pre><code>10.0.0.1:/exports/code /usr/local/src/robot nfs _netdev,auto \u00a0\n10.0.0.1:/exports/local_yarp /home/icub/.local/share/yarp nfs  _netdev,auto\n</code></pre></p> <p>So, the startup script is use to try to mount those shares, see <code>/etc/rc_iCub.d/s90_mount-remote-fs.sh</code></p> <p>Moreover, in order to mount the above shares with the correct user rights, we add the following line to the file <code>/etc/default/nfs-common</code> <pre><code>NEED_IDMAPD=yes\n</code></pre></p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#hostname","title":"Hostname","text":"<p>The hostname in <code>/etc/hostname</code> is set to <pre><code>pc104\n</code></pre></p> <p>And the file <code>/etc/hosts</code> is as follows <pre><code>127.0.0.1   localhost\n127.0.1.1   pc104.icub.local pc104\n10.0.0.1    icubsrv\n</code></pre></p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#user-environment","title":"User environment","text":"<p>The SKEL <code>/etc/skel</code> files are used to generate the desired user environment for the icub user modifying the following files</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#bashrc","title":".bashrc","text":"<pre><code>if [[ $- == *i* ]] || [[ -n \"$SSH_CLIENT\" ]] || [[ -n \"$SSH_TTY\" ]]; then\n    #Load the iCub custom bashrc\n    ICUBRC_FILE=\"${HOME}/.bashrc_iCub\"\n    if [ -f \"$ICUBRC_FILE\" ]; then\n      source $ICUBRC_FILE\n    fi\n    .bashrc_iCub\n    # .bashrc_iCub\n    # setup the iCub enviroment\n    if [ \"$ICUBRC_FILE_LOADED\" ]; then\n     return\n    fi\n    export ICUBRC_FILE_LOADED=\"true\"\n    if [ \"$PS1\" ]; then\n      echo \"Setting up yarp and iCub env vars\"\n    fi\n    # YARP and iCub enviroment variables\n    export ROBOT_CODE=/usr/local/src/robot\n    export ICUBcontrib_DIR=$ROBOT_CODE/iCubContrib\n    export YARP_ROOT=$ROBOT_CODE/yarp\n    export YARP_DIR=$YARP_ROOT/build\n    export ICUB_ROOT=${ROBOT_CODE}/icub-main\n    export ICUB_DIR=${ICUB_ROOT}/build\n    export icub_firmware_shared_DIR=${ROBOT_CODE}/icub-firmware-shared/build\n    export YARP_DATA_DIRS=${YARP_DIR}/share/yarp:${ICUB_DIR}/share/iCub:${ICUBcontrib_DIR}/share/ICUBcontrib\n    export FIRMWARE_BIN=${ROBOT_CODE}/icub-firmware/build\n    # Set the name of your robot here.\n    # Please change also the root user password\n     export YARP_ROBOT_NAME=\n     if [ \"$YARP_ROBOT_NAME\" = \"\" ] &amp;&amp; [ -f \"${ROBOT_CODE}/yarp_robot_name.txt\" ]\n     then\n       export YARP_ROBOT_NAME=$( head --lines=1 ${ROBOT_CODE}/yarp_robot_name.txt )\n     fi\n    # Set-up optimizations\n    export CMAKE_BUILD_TYPE=Release\n    export PATH=$PATH:$ICUB_DIR/bin:$YARP_DIR/bin\n    # DebugStream customization\n    export YARP_VERBOSE_OUTPUT=0\n    export YARP_COLORED_OUTPUT=1\n    export YARP_TRACE_ENABLE=0\n    export YARP_FORWARD_LOG_ENABLE=0\n    # To enable tab completion on yarp port names\n    if [ -f $YARP_ROOT/scripts/yarp_completion ]; then\n      source $YARP_ROOT/scripts/yarp_completion\n    fi\nfi\n</code></pre>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#gitconfig","title":".gitconfig","text":"<pre><code>[core]\n       pager = less -FRSX\n       editor = vim\n       autocrlf = input\n[merge]\n       tool = vimdiff\n[credential]\n       helper = cache --timeout=7200\n[branch]\n       autosetuprebase = always\n[user]\n       name = iCub User\n       email = robotcub-hackers@lists.sourceforge.net\n</code></pre>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#sshauthorized_keys","title":".ssh/authorized_keys","text":"<p>This file contains the key for passwordless login</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#localshareyarpremotefs_not_mounted","title":".local/share/yarp/REMOTEFS_NOT_MOUNTED","text":"<p>This is a placeholder for the remote mounted path</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#other-improvements","title":"Other improvements","text":""},{"location":"icub_operating_systems/pc104/the-icub-live-details/#real-time","title":"Real time","text":"<p>The following files are modified in order to obtain better real time networking performances</p> <ul> <li><code>/etc/security/limits.d/icub.conf</code> <pre><code> icub   soft    rtprio  99\n icub   hard    rtprio  99\n</code></pre></li> <li><code>/etc/sysctl.d/20-net-rbuffer.conf</code> <pre><code># This sets the max OS receive buffer size for all types of connections\nnet.core.rmem_max=8388608\n</code></pre></li> </ul>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#how-the-icub-live-image-is-built","title":"How the iCub LIVE image is built","text":"<p>The iCub live ISO image is built with a custom script based on the Debian LIVE tools (included in the package live-build).</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#the-live-build-script","title":"The live-build script","text":"<p>You can find the script here: https://github.com/icub-tech-iit/icub-os-files/tree/master/scripts/icub-live The script requires some additional packages to be installed (before starting, it checks for dependencies and if any is missing it installs the package). The script is based on the Debian live-build system and uses the configuration files and templates inside the folder live-build. See the code on the repository for further details.</p> <p>The script syntax is the following: <pre><code>  icub_create-live [options] -s all|config|build|clean|cleancache|cleanall\n</code></pre></p> <p>The parameter STAGE is mandatory and can be one of the following: <pre><code>  config - create config files\n  build - build image based on config stage\n  clean - cleanup build files\n  cleancache - clean only cache\n  cleanall - clean both build and cache files\n  cleaniso - clean all iso and related files\n  all - execute clean, config and build\n ```\nOptions are :\n</code></pre>   -L LOG_FILE : logs to file LOG_FILE   -D : compile the live system in debug mode   -d : print defaults   -h : print the help ```</p> <p>If there are no errors, the script will produce an iso image along with its MD5 control file.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#how-to-create-a-bootable-usb-media-with-persistence-from-the-iso","title":"How to create a bootable USB media with persistence from the iso","text":"<p>We used the RUFUS tool for Windows to put the ISO on a USB memory stick. While it is possible to use any other similar tool that supports persistence, we found that the PC104 board does not boot when the USB is burned using some other tools, so it's strongly recommended to use RUFUS.</p> <p>In RUFUS just select the iSO image, the USB target pendrive and enable the persistence (this will create a secondary partition on the disk where the modified files will are written) as below</p> <p></p> <p>The persistence requires an additional kernel booting parameter to be added in the file <code>\\isolinux\\live.cfg</code> where the line starting with <code>append boot=</code> must contain the keyword <code>persistence</code>, but the <code>icub_create-live</code> script already creates the above file with correct parameters: then, the ISO file produced by the script does not require any further modification.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#from-usb-pendrive-to-an-img-file","title":"From USB pendrive to an IMG file","text":"<p>In order to distribuite easily PC104 OS releases, we create an IMG file from a bootable USB created as above, using the Win32 Disk Imager tool.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/","title":"The OS on PC104 (live USB) - Installation","text":"<p>Here you can find the instruction on how to create a new USB memory stick with the lastest version of the OS running on the PC104.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#system-description","title":"System Description","text":"<p>The image contains a LIVE Debian GNU/Linux OS with iCub customizations, drivers and a RT kernel.</p> <p>The system supports persistence, this means that (unlike normal LIVE system) any modification on file system is permanent.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#which-version-do-i-need","title":"Which version do I need?","text":"<p>This question is quite common whenever the number of versions and revisions start to become... more than one.</p> <p>The Debian image to use depends on the iCub version:</p> <ul> <li>iCub up to version 1.1 must use a Etch and a Half distribution (image version 1.x). Persistent filesystem allows deep system configuration; if you are happy with the current configuration you can skip this update, while if you really need to change system configuration now you can by applying this update.</li> <li>iCub from version 1.2 on use the latest version: we kindly recommend you to keep Debian system updated to the last version (at the time of writing it means the 10.x @ May 2021). For persistent filesystem this configuration can be changed without re-burning a new image, you can just edit the configuration files of the network as you would normally do with Linux system.</li> </ul> <p>Note</p> <p>For further details, please refer to the iCub Versions.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#warning","title":"Warning","text":""},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#before-you-create-the-bootable-usb","title":"Before you create the bootable USB","text":"<p>When you install (or \"burn\") the new PC104 image, the installation procedure will overwrite the data already present on the USB disk your are using, so all data will be deleted.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#just-after-you-create-the-bootable-usb","title":"Just after you create the bootable USB","text":"<p>This image has persistence activate, this means that the written or modified files are written on the USB, in a separate partition. Since the first time it boots on a system, some hardware-related files are written in order to speedup the process, this means that, if you insert a just created USB memory on a different system from iCub's PC104 when you'll plug it on iCub the system could not work (due to potential differences in hardware). So please do not connect an USB with a just burned image on any system other system</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#burn-the-debian-image-version-7x-latest","title":"Burn the Debian image version 7.x (latest)","text":"<p>Starting from version 6.0 images come in a compressed archive file containing the USB image to write to an USB memory.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#download-the-latest-icublive-image","title":"Download the latest iCubLive image","text":"<p>Get the lastest iCubLive image on this page</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#how-to-create-the-bootable-usb-drive-with-the-live-image","title":"How to create the bootable USB drive with the live image","text":"<ol> <li>Download the latest image from the above link</li> <li>Extract the image</li> <li>Take an USB-2 drive at least of 16 GB size (please note that using an USB3 disk or a huge disk, eg. 32 GB, may not work depending on the version of your PC104)</li> <li>burn the image file (it has the .img extension), you can use the follwing tools:</li> </ol>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#windows","title":"Windows","text":"<p>Please use Win32 Disk Imager</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#linux-command-line","title":"Linux (command line)","text":"<p>Linux users can  use the dd command to directly write an IMG file\u2019s contents to a removable media device. Insert the removable media and run the following command on Ubuntu:</p> <p><code>sudo dd if=/home/user/icub-live_7.10-201126_rt-amd64.img of=/dev/sdX bs=1M</code></p> <p>Replace <code>/home/user/icub-live_7.10-201126_rt-amd64.img</code> with the correct name of USB image and <code>/dev/sdX</code> with the path to your USB or SD card device.</p> <p>Note</p> <p>Be very careful to specify the correct disk path here \u2014 if you specify the path to your system drive instead, you\u2019ll write the contents of the image to your operating system drive and corrupt it</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#linux-gui-tool","title":"Linux (GUI tool)","text":"<p>There is a GUI available in Ubuntu, called \"Disks\" (gnome-disks) and comes default in later Ubuntu: connect the USB drive and just right-click on the image file and select \"Open with Disk Image Writer\", then select the drive USB drive you just inserted.</p> <p>See also this guide</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#required-customizations","title":"Required customizations","text":""},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#set-robotname-variable","title":"Set RobotName variable","text":"<p>Edit the file:</p> <p><code>/home/icub/.bashrc_iCub</code></p> <p>replace the line:</p> <p><code>export\u00a0YARP_ROBOT_NAME=myiCubRobotName00</code></p> <p>with the name of your robot e.g. iCubGenova01</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#clean-the-cmakecache-before-compiling","title":"clean the CMakeCache before compiling","text":"<p>When upgrading the usb key to a different version, remember to clean the CMakeCache before compiling!! This is because some path are likely to be changed in the meanwhile</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#ssh-passwordless-login","title":"SSH passwordless login","text":"<p>User authentication credentials are stored inside the <code>/home/icub/.ssh/authorized_key</code> file; each line in this file is related to a different entry user@host. User credentials can be added also by using this command for each user@machine you want to log from :</p> <p><code>ssh-copy-id\u00a0-i\u00a0/home/user/.ssh/id_rsa.pub\u00a0icub@pc104</code></p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#startup-scripts","title":"Startup scripts","text":"<p>Important: these instructions apply to the recent persistent images of the Linux (starting from 1.7 and 3.0).</p> <p>There are some scripts that customize the Linux when the pc104 boots up; those scripts are inside /etc/rciCub.d folder. Normally, you don\\'t need to modify them, but be aware of them.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#other-customizations","title":"Other Customizations","text":"<p>The persistent version of the Debian distribution is now writable so any customization can be done. Please be aware of what you do, because any changes in configuration file can lead to malfunction.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#common-problems-and-how-to-solve-them","title":"Common Problems and how to solve them","text":""},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#i-used-an-usb3-andor-32-gb-disk-and-the-system-does-not-boot","title":"I used an USB3 and/or 32 GB disk and the system does not boot","text":"<p>Try with a USB2 smaller ( 16GB or better 8 GB) drive. Some PC104 have problems in reading those recent USB drives.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#the-icub_iso2usbsh-script-asks-me-the-closest-location-we-can-manage-is-is-this-still-acceptable-to-you","title":"The <code>icub_iso2usb.sh</code> script asks me \"The closest location we can manage is.. Is this still acceptable to you?\"","text":"<p>Simply press \"Y\" and forget about the warning \"Information: You may need to update /etc/fstab.\" :)</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#once-i-created-a-new-usb-memory-with-the-pc104-image-ssh-complains-that-remote-host-identification-has-changed-and-does-not-connect-to-the-pc104","title":"Once I created a new USB memory with the PC104 image, ssh complains that \"Remote host identification has changed\" and does not connect to the PC104","text":"<p>This is normal: for security reasons when a new iCub live is executed for the first time, a new SSH Key is created for the PC104 host. Please remove all the entries in the file</p> <p><code>~/.ssh/known_hosts</code></p> <p>that refers to pc104 or 10.0.0.2 and login again.</p> <p>This must be done from each machine you want to connect to the PC104.</p> <p>Check also this resource.</p>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#i-used-the-live-usb-first-on-a-computer-then-when-i-plugged-it-into-the-pc104-it-does-not-work-anymore","title":"I used the live USB first on a computer, then when I plugged it into the PC104 it does not work anymore","text":"<p>Probably the PC104 booted correctly, but the network is not reachable (you can check it by connecting a VGA cable to the PC104 inside iCub's head).</p> <p>Live systems write some info about the network card the first time they boot on a machine. This implies that if you boot the live on a desktop and then you plug it to a different machine the network may not work (since the network card is different).</p> <p>To fix this you have two options:</p> <ol> <li> <p>quick and dirty - on the live USB, open the file <code>/etc/udev/rules.d/70-presisten-net.rules</code> and remove any pair of lines like the following: <pre><code>#\u00a0PCI\u00a0device\u00a00x8086:0x10f5\u00a0(e1000e)\nSUBSYSTEM==\"net\",\u00a0ACTION==\"add\",\u00a0DRIVERS==\"?*\",\u00a0ATTR{address}==\"00:1f:16:0b:47:4d\",\u00a0ATTR{dev_id}==\"0x0\",\u00a0ATTR{type}==\"1\",\u00a0KERNEL==\"eth*\",\u00a0NAME=\"eth0\"\n</code></pre> (of course attributes like address, name or device may not exactly the same in your file)</p> </li> <li> <p>clean and easy - burn another USB and FIRST install it on the PC104</p> </li> </ol>"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#detailed-information","title":"Detailed information","text":"<p>If you want to get detailed information about the iCub LIVE image (i.e. the differences from a standard Debian LIVE) please read this page</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/","title":"Robot Calibration of iCub v1.3","text":"<p>This page shows how to calibrate the v1.3 CAN based robot.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#preliminary-actions","title":"Preliminary actions","text":"<ul> <li>Set the power supply at 40V, 10A and turn on the robot</li> <li>Place the robot in the <code>zero position</code> by hand (once calibrated a fine calibration will be done for a better result)</li> </ul> <ul> <li>On the server run <code>yarpmanager</code> and start the <code>icubsrv</code> an <code>pc104</code> clusters: </li> </ul> <p><code>icub@icubsrv:~$ yarpmanager</code> </p> <ul> <li>Connect with the <code>pc104</code>: </li> </ul> <p><code>icub@icubsrv:~$ ssh -X pc104</code></p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#run-yarprobotinterface-in-calibration-mode","title":"Run yarprobotinterface in calibration mode","text":"<p>First turn on the motors. Go to the robot folder:</p> <pre><code>cd $ROBOT_CODE/robots-configurations/iCubRobotName\n</code></pre> <p>Edit the file general.xml and set the first two values as <code>true</code>: <code>skipCalibration</code> and <code>UseRawEncoderData</code></p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE params PUBLIC \"-//YARP//DTD yarprobotinterface 3.0//EN\" \"http://www.yarp.it/DTD/yarprobotinterfaceV3.0.dtd\"&gt;\n\n&lt;params xmlns:xi=\"http://www.w3.org/2001/XInclude\" portprefix=\"icub\" build=\"1\"&gt;\n\n  &lt;group name=\"GENERAL\"&gt;\n      &lt;param name=\"skipCalibration\"&gt;    true &lt;/param&gt;\n      &lt;param name=\"useRawEncoderData\"&gt;  true  &lt;/param&gt;\n      &lt;param name=\"useLimitedPWM\"&gt;      false  &lt;/param&gt;\n      &lt;param name=\"verbose\"&gt;            false  &lt;/param&gt;\n  &lt;/group&gt;\n&lt;/params&gt;\n</code></pre> <p>The file <code>icub_all.xml</code> enables the calibration of all the robot parts (including the skin) - therefore you can comment the parts that you don't want to calibrate. If you are calibrating without the skin, comment the skin part and save in a new file.</p> <p>Here is how the file <code>icub_all.xml</code> looks like:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE robot PUBLIC \"-//YARP//DTD yarprobotinterface 3.0//EN\" \"http://www.yarp.it/DTD/yarprobotinterfaceV3.0.dtd\"&gt;\n&lt;robot name=\"iCubLondon01\" build=\"1\" portprefix=\"icub\" xmlns:xi=\"http://www.w3.org/2001/XInclude\"&gt;\n&lt;devices&gt;\n    &lt;!-- cartesian --&gt; \n    &lt;xi:include href=\"cartesian/left_arm_cartesian.xml\" /&gt;\n    &lt;xi:include href=\"cartesian/right_arm_cartesian.xml\" /&gt;\n\n    &lt;!-- motor controllers wrappers --&gt;\n    &lt;xi:include href=\"wrappers/motorControl/left_arm_mc_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/motorControl/right_arm_mc_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/motorControl/left_leg_mc_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/motorControl/right_leg_mc_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/motorControl/head_mc_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/motorControl/torso_mc_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/icub_left_arm.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/icub_left_hand.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/icub_right_arm.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/icub_right_hand.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/icub_left_leg.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/icub_right_leg.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/icub_head.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/icub_torso.xml\" /&gt;\n\n    &lt;!-- VIRTUAL ANALOG SERVERs --&gt;\n    &lt;xi:include href=\"wrappers/VFT/left_arm_VFT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/VFT/left_leg_VFT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/VFT/right_arm_VFT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/VFT/right_leg_VFT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/VFT/torso_VFT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"hardware/VFT/left_arm_virtual_strain.xml\" /&gt;\n    &lt;xi:include href=\"hardware/VFT/left_leg_virtual_strain.xml\" /&gt;\n    &lt;xi:include href=\"hardware/VFT/right_arm_virtual_strain.xml\" /&gt;\n    &lt;xi:include href=\"hardware/VFT/right_leg_virtual_strain.xml\" /&gt;\n    &lt;xi:include href=\"hardware/VFT/torso_virtual_strain.xml\" /&gt;\n\n    &lt;!-- REAL ANALOG SENSORS --&gt;\n    &lt;xi:include href=\"wrappers/FT/left_arm_FT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/FT/left_leg_FT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/FT/right_arm_FT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/FT/right_leg_FT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/MAIS/left_hand_mais_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/MAIS/right_hand_mais_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"hardware/FT/left_arm_strain.xml\" /&gt;\n    &lt;xi:include href=\"hardware/FT/left_leg_strain.xml\" /&gt;\n    &lt;xi:include href=\"hardware/FT/right_arm_strain.xml\" /&gt;\n    &lt;xi:include href=\"hardware/FT/right_leg_strain.xml\" /&gt;\n    &lt;xi:include href=\"hardware/MAIS/left_hand_mais.xml\" /&gt;\n    &lt;xi:include href=\"hardware/MAIS/right_hand_mais.xml\" /&gt;\n\n    &lt;!-- SKIN --&gt;\n    &lt;xi:include href=\"wrappers/skin/left_arm_skin_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/skin/right_arm_skin_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/skin/torso_skin_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"hardware/skin/left_arm.xml\" /&gt;\n    &lt;xi:include href=\"hardware/skin/right_arm.xml\" /&gt;\n    &lt;xi:include href=\"hardware/skin/torso.xml\" /&gt;\n\n    &lt;!-- MTX INERTIAL SENSOR &amp; SKIN INERTIAL SENSOR--&gt;\n    &lt;xi:include href=\"wrappers/inertials/head-imuFilter_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/inertials/head-imuFilter.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/inertials/head-inertials_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/inertials/head-inertials_wrapper-deprecated.xml\" /&gt;\n    &lt;xi:include href=\"hardware/inertials/head-inertial.xml\" /&gt;\n    &lt;!--\n    &lt;xi:include href=\"wrappers/skin/left_hand_inertial_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/skin/right_hand_inertial_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"hardware/skin/left_hand_inertial_mtb.xml\" /&gt;\n    &lt;xi:include href=\"hardware/skin/right_hand_inertial_mtb.xml\" /&gt;\n    --&gt;\n\n    &lt;!-- CALIBRATORS --&gt;\n    &lt;xi:include href=\"calibrators/head_calib.xml\" /&gt; \n    &lt;xi:include href=\"calibrators/torso_calib.xml\" /&gt;\n    &lt;xi:include href=\"calibrators/right_leg_calib.xml\" /&gt;\n    &lt;xi:include href=\"calibrators/left_leg_calib.xml\" /&gt;\n    &lt;xi:include href=\"calibrators/left_arm_calib.xml\" /&gt;\n    &lt;xi:include href=\"calibrators/right_arm_calib.xml\" /&gt;\n    &lt;xi:include href=\"calibrators/left_hand_calib.xml\" /&gt;\n    &lt;xi:include href=\"calibrators/right_hand_calib.xml\" /&gt;\n&lt;/devices&gt;\n&lt;/robot&gt;\n</code></pre> After ensuring that <code>icub_all.xml</code> is correct you can proceed with the calibration.</p> <p>Warning</p> <p>PRESS THE FAULT BUTTON </p> <p>Run <code>yarprobotinterface</code> and wait for the robot calibration (press Enter multiple times).</p> <p>\u270d\ufe0f Note: If you want to separately calibrate different parts of the robot (for example for a first check) you can create a new file .xml from icub_all and run it with the command <code>yarprobotinterface --config fileName.xml</code></p> <p>Info</p> <p>After running yarprobotinterface you will see some errors messages related to the fault button pressed. </p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#calibration","title":"Calibration","text":"<ul> <li>On the server/laptop run <code>yarpmotorgui</code> in order to check the joints encoder readings</li> </ul> <p>Warning</p> <p>Use a <code>Windows</code> pc with <code>Microsoft Office</code> installed to have the correct behaviour of the <code>.xls</code> file macros.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#head-calibration-only-head-v2","title":"Head calibration (only head V2)","text":"<p>Open the <code>.xls</code> file in your robot folder (i.e. <code>iCub_Calibration_V1_3_1_iCubLondon01.xls</code>), and put the values read from <code>yarpmotorgui</code> in the correspondent <code>value read at zeros</code> column cells.</p> <p></p> <p>Warning</p> <p>Take care that the <code>Delta</code> column has all values set to 0.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#torso","title":"Torso","text":"<p>Open the <code>.xls</code> file in your robot folder (i.e. <code>iCub_Calibration_V1_3_1_iCubLondon01.xls</code>), and put the values read from <code>yarpmotorgui</code> in the correspondent <code>value read at zeros</code> column cells.</p> <p></p> <p>Warning</p> <p>Take care that the <code>Delta</code> column has all values set to 0.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#wrist-calibration-only-for-wrist-v2","title":"Wrist calibration (only for wrist V2)","text":"<p>Place the wrist in the <code>zero position</code> :</p> <p>Open the <code>.xls</code> file in your robot folder (i.e. <code>iCub_Calibration_V1_3_1_iCubLondon01.xls</code>), and put the values read from <code>yarpmotorgui</code> in the correspondent <code>value read at zeros</code> column cells.</p> <p></p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#hands-calibration","title":"Hands calibration","text":"<p>Referring to the table below, using a screwdriver read the values <code>Min</code> and <code>Max</code> :</p> Part Joint# Motor Min Max Fingers abduction 7 -&gt; Thumb abduction 8 -&gt; Thumb proximal 9 Thumb distal 10 Index proximal 11 Index distal 12 Middle proximal 13 Middle distal 14 Ring and little 15 <p>Warning</p> <p>Take care that values read respect the relationship :<code>Min</code> &lt; <code>Max</code> Otherwise you have to move the magnet until you reach the above situation.</p> <p>Open the <code>.xls</code> file in your robot folder (i.e. <code>iCub_Calibration_V1_3_1_iCubLondon01.xls</code>), and put the values read from <code>yarpmotorgui</code> in the correspondent <code>value read at zeros</code> column cells.</p> <p></p> <p>Warning</p> <p>Take care that the <code>Delta</code> column has all values set to 0.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#legs-calibration","title":"Legs calibration","text":"<p>Open the <code>.xls</code> file in your robot folder (i.e. <code>iCub_Calibration_V1_3_1_iCubLondon01.xls</code>), and put the values read from <code>yarpmotorgui</code> in the correspondent <code>value read at zeros</code> column cells.</p> <p></p> <p>Warning</p> <p>Take care that the <code>Delta</code> column has all values set to 0.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#arms-fine-calibration","title":"Arms Fine Calibration","text":"<p>Here's described how to correct small errors in the calibration of the iCub. It applies mainly to the shoulder and elbow joints (joint0...joint3) but can be applied also for the other joints of the arm.</p> <p>Info</p> <p>This procedure has to be done after the calibration of the torso.</p> <p>Put the iCub in a suitable posture and let's call this configuration <code>theta_desired</code> in accordance to the convention you decided to use. As an example, if you decide to use the convention described in ICubForwardKinematics, you might decide to use the posture in the pictures which corresponds to <code>theta_desired = [-90 15 15 90] [deg]</code> (remember we are just considering the three dof of the shoulder and the elbow, an example is given in the pictures below).</p> <p>The aim is to insert the calibration deltas in each arm's <code>Delta</code> column cells of the <code>.xls</code> file using the formula: <code>Delta = Theta - Theta_Desired</code>.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#eyes-calibration-only-head-v2","title":"Eyes calibration (only head V2)","text":"<p>The eyes mechanism has a total of three degrees of freedom. Both eyes can pan (independently) and tilt (simultaneously).</p> <p></p> <p>Thus the three joints to calibrate are: version (left-right movement), vergence (in-out) and tilt (up-down).</p> <p>While the tilt can be calibrated by directly inserting the delta value in the <code>Delta</code> column cell of the <code>.xls</code> file, the version and vergence need to be calibrated as follows:</p> <p><code>Joint 4 (version): delta = |delta_j4| + |delta_j5|</code></p> <p><code>Joint 5 (vergence): delta = |delta_j4| - |delta_j5|</code></p> <p>with sign to be chosen accordingly.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#update-xml-files","title":"Update <code>xml</code> files","text":""},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#generate-the-new-xml-files-automated","title":"Generate the new <code>.xml</code> files - automated","text":"<p>Warning</p> <p>If you updated the SW (i.e. updated to robotology/robotology-superbuild), avoid to follow this steps and do the manual procedure</p> <p>In order to get the new <code>.xml</code> files you need to :</p> <ul> <li>Press<code>Generate Calibrators</code> button </li> <li>Press<code>Generate All</code> button </li> </ul>"},{"location":"icub_robot_calibration/icub-robot-calibration-v1.3/#generate-the-new-xml-files-manual","title":"Generate the new <code>.xml</code> files - manual","text":"<p>Info</p> <p>Follow this procedure to manual edit the xml files if you updated the SW on your setup since the template inside the xls may contain outaded/missing params</p> <ul> <li>Manually copy only the highlighted lines below and paste them inside the corresponding <code>xml</code> file inside <code>calibrators</code> folder</li> </ul> <p></p> <ul> <li>Manually copy only the highlighted lines below and paste them inside the corresponding <code>xml</code> file inside <code>hardware/motorcontrol</code> folder</li> </ul> <p></p> <p>Obviously, you have to do the same for each robot part</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/","title":"Robot Calibration of iCub v2.X","text":"<p>This page shows how to calibrate the robot.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#preliminary-actions","title":"Preliminary actions","text":"<ul> <li>Set the power supply at 40V, 10A and turn on the robot</li> <li>Place the robot in the <code>zero position</code> by hand (once calibrated a fine calibration will be done for a better result)</li> </ul> <ul> <li>On the server run <code>yarpmanager</code> and start the <code>icubsrv</code> an <code>pc104</code> clusters: </li> </ul> <p><code>icub@icubsrv:~$ yarpmanager</code> </p> <ul> <li>Connect with the <code>icub-head</code>: </li> </ul> <p><code>icub@icubsrv:~$ ssh -X icub-head</code></p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#run-yarprobotinterface-in-calibration-mode","title":"Run yarprobotinterface in calibration mode","text":"<p>First turn on the motors. Go to the robot folder:</p> <pre><code>cd $ROBOT_CODE/robots-configurations/iCubRobotName\n</code></pre> <p>Edit the file general.xml and set the first two values as <code>true</code>: <code>skipCalibration</code> and <code>UseRawEncoderData</code></p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE params PUBLIC \"-//YARP//DTD yarprobotinterface 3.0//EN\" \"http://www.yarp.it/DTD/yarprobotinterfaceV3.0.dtd\"&gt;\n\n&lt;params xmlns:xi=\"http://www.w3.org/2001/XInclude\" portprefix=\"icub\" build=\"1\"&gt;\n\n  &lt;group name=\"GENERAL\"&gt;\n      &lt;param name=\"skipCalibration\"&gt;    true &lt;/param&gt;\n      &lt;param name=\"useRawEncoderData\"&gt;  true  &lt;/param&gt;\n      &lt;param name=\"useLimitedPWM\"&gt;      false  &lt;/param&gt;\n      &lt;param name=\"verbose\"&gt;            false  &lt;/param&gt;\n  &lt;/group&gt;\n&lt;/params&gt;\n</code></pre> <p>The file <code>icub_all.xml</code> enables the calibration of all the robot parts (including the skin) - therefore you can comment the parts that you don't want to calibrate. If you are calibrating without the skin, comment the skin part and save in a new file.</p> <p>Here is how the file <code>icub_all.xml</code> looks like:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE robot PUBLIC \"-//YARP//DTD yarprobotinterface 3.0//EN\" \"http://www.yarp.it/DTD/yarprobotinterfaceV3.0.dtd\"&gt;\n\n&lt;robot name=\"iCubHongKong01\" portprefix=\"icub\" build=\"1\"&gt;\n    &lt;params&gt;\n    &lt;xi:include href=\"hardware/electronics/pc104.xml\" /&gt;\n    &lt;/params&gt;\n\n    &lt;devices&gt;\n\n    &lt;!-- CARTESIANS --&gt; \n    &lt;xi:include href=\"cartesian/left_arm-cartesian.xml\" /&gt;\n    &lt;xi:include href=\"cartesian/right_arm-cartesian.xml\" /&gt; \n\n    &lt;!-- HEAD --&gt;\n    &lt;xi:include href=\"./hardware/motorControl/head-eb20-j0_1-mc.xml\" /&gt;  \n    &lt;xi:include href=\"./hardware/motorControl/head-eb21-j2_5-mc.xml\" /&gt; \n    &lt;xi:include href=\"./wrappers/motorControl/head-mc_wrapper.xml\" /&gt; \n\n    &lt;!-- FACE --&gt;\n    &lt;xi:include href=\"./hardware/motorControl/face-eb22-j0-mc.xml\" /&gt; \n    &lt;xi:include href=\"./wrappers/motorControl/face-mc_wrapper.xml\" /&gt; \n\n    &lt;!-- TORSO --&gt; \n    &lt;xi:include href=\"hardware/motorControl/torso-eb5-j0_2-mc.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/motorControl/torso-mc_wrapper.xml\" /&gt; \n\n    &lt;!-- LEFT ARM --&gt;\n    &lt;xi:include href=\"hardware/motorControl/left_arm-eb1-j0_3-mc.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/left_arm-eb24-j4_7-mc.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/left_arm-eb25-j8_11-mc.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/left_arm-eb26-j12_15-mc.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/motorControl/left_arm-mc_wrapper.xml\" /&gt; \n\n    &lt;!-- RIGHT ARM --&gt;\n    &lt;xi:include href=\"hardware/motorControl/right_arm-eb3-j0_3-mc.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/right_arm-eb27-j4_7-mc.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/right_arm-eb28-j8_11-mc.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/right_arm-eb29-j12_15-mc.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/motorControl/right_arm-mc_wrapper.xml\" /&gt;\n\n    &lt;!-- LEFT LEG --&gt;\n    &lt;xi:include href=\"hardware/motorControl/left_leg-eb6-j0_3-mc.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/left_leg-eb7-j4_5-mc.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/motorControl/left_leg-mc_wrapper.xml\" /&gt; \n\n    &lt;!-- RIGHT LEG --&gt;\n    &lt;xi:include href=\"hardware/motorControl/right_leg-eb8-j0_3-mc.xml\" /&gt;\n    &lt;xi:include href=\"hardware/motorControl/right_leg-eb9-j4_5-mc.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/motorControl/right_leg-mc_wrapper.xml\" /&gt;  \n\n    &lt;!-- INERTIAL SENSOR--&gt; \n    &lt;xi:include href=\"wrappers/inertials/head-imuFilter_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/inertials/head-imuFilter.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/inertials/head-inertials_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"hardware/inertials/head-inertial.xml\" /&gt;\n\n    &lt;!-- ANALOG SENSOR MAIS --&gt;\n    &lt;xi:include href=\"wrappers/MAIS/left_arm-mais_wrapper.xml\" /&gt; \n    &lt;xi:include href=\"wrappers/MAIS/right_arm-mais_wrapper.xml\" /&gt; \n    &lt;xi:include href=\"hardware/MAIS/left_arm-eb26-j12_15-mais.xml\" /&gt; \n    &lt;xi:include href=\"hardware/MAIS/right_arm-eb29-j12_15-mais.xml\" /&gt;  \n\n    &lt;!--  SKINS  --&gt; \n    &lt;xi:include href=\"wrappers/skin/left_arm-skin_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"hardware/skin/left_arm-eb24-j4_7-skin.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/skin/right_arm-skin_wrapper.xml\" /&gt;  \n    &lt;xi:include href=\"hardware/skin/right_arm-eb27-j4_7-skin.xml\" /&gt; \n    &lt;xi:include href=\"wrappers/skin/left_leg-skin_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/skin/right_leg-skin_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"hardware/skin/left_leg-eb10-skin.xml\" /&gt;\n    &lt;xi:include href=\"hardware/skin/right_leg-eb11-skin.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/skin/torso-skin_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"hardware/skin/torso-eb22-skin.xml\" /&gt;  \n\n    &lt;!-- ANALOG SENSOR FT --&gt;\n    &lt;xi:include href=\"wrappers/FT/left_arm-FT_wrapper.xml\" /&gt; \n    &lt;xi:include href=\"wrappers/FT/right_arm-FT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/FT/right_leg-FT_wrapper.xml\" /&gt; \n    &lt;xi:include href=\"wrappers/FT/left_leg-FT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"wrappers/FT/right_foot-FT_wrapper.xml\" /&gt; \n    &lt;xi:include href=\"wrappers/FT/left_foot-FT_wrapper.xml\" /&gt;\n    &lt;xi:include href=\"hardware/FT/left_arm-eb1-j0_3-strain.xml\" /&gt; \n    &lt;xi:include href=\"hardware/FT/right_arm-eb3-j0_3-strain.xml\" /&gt;\n    &lt;xi:include href=\"hardware/FT/left_leg-eb6-j0_3-strain.xml\" /&gt; \n    &lt;xi:include href=\"hardware/FT/left_leg-eb7-j4_5-strain.xml\" /&gt;\n    &lt;xi:include href=\"hardware/FT/right_leg-eb8-j0_3-strain.xml\" /&gt; \n    &lt;xi:include href=\"hardware/FT/right_leg-eb9-j4_5-strain.xml\" /&gt;   \n\n    &lt;!-- VIRTUAL ANALOG SENSORS (WRAPPER ONLY) --&gt;\n    &lt;xi:include href=\"wrappers/VFT/left_arm-VFT_wrapper.xml\" /&gt; \n    &lt;xi:include href=\"wrappers/VFT/right_leg-VFT_wrapper.xml\" /&gt; \n    &lt;xi:include href=\"wrappers/VFT/left_leg-VFT_wrapper.xml\" /&gt;     \n    &lt;xi:include href=\"wrappers/VFT/right_arm-VFT_wrapper.xml\" /&gt; \n    &lt;xi:include href=\"wrappers/VFT/torso-VFT_wrapper.xml\" /&gt;\n\n    &lt;!--  CALIBRATORS --&gt;\n    &lt;xi:include href=\"calibrators/left_arm-calib.xml\" /&gt;\n    &lt;xi:include href=\"calibrators/right_arm-calib.xml\" /&gt; \n    &lt;xi:include href=\"calibrators/left_leg-calib.xml\" /&gt;\n    &lt;xi:include href=\"calibrators/right_leg-calib.xml\" /&gt;\n    &lt;xi:include href=\"calibrators/torso-calib.xml\" /&gt;\n    &lt;xi:include href=\"calibrators/head-calib.xml\" /&gt;\n    &lt;xi:include href=\"calibrators/face-calib.xml\" /&gt;\n\n    &lt;/devices&gt;\n&lt;/robot&gt; \n</code></pre> After ensuring that <code>icub_all.xml</code> is correct you can proceed with the calibration.</p> <p>Warning</p> <p>PRESS THE FAULT BUTTON </p> <p>Run <code>yarprobotinterface</code> and wait for the robot calibration (press Enter multiple times).</p> <p>\u270d\ufe0f Note: If you want to separately calibrate different parts of the robot (for example for a first check) you can create a new file .xml from icub_all and run it with the command <code>yarprobotinterface --config fileName.xml</code></p> <p>Info</p> <p>After running yarprobotinterface you will see some errors messages related to the fault button pressed. </p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#calibration","title":"Calibration","text":"<p>For the calibration of every part of the robot, there is a specific <code>.xml</code> file located in the <code>calibrators</code> folder (see here for an example). </p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#calibration-types","title":"Calibration types","text":"<p>There are different types of joints calibration, specified in the calibrationType parameter:</p> <ul> <li>type 12: you only need to insert the absolute value of the encoder in the <code>zero position</code></li> <li>type 5: no need to insert values, it calibrates automatically (for instance pronosupination of the arm)</li> <li>type 7: you need to insert two values , <code>Vmax</code> and <code>Vmin</code> (for instance fingers abduction and thumb oppose)</li> <li>type 6: (fingers) you need to insert two values, <code>Vmax</code> and <code>Vmin</code>, orresponding to fingers closed (ideally 0) and open (ideally 255)</li> </ul> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE devices PUBLIC \"-//YARP//DTD yarprobotinterface 3.0//EN\" \"http://www.yarp.it/DTD/yarprobotinterfaceV3.0.dtd\"&gt;\n\n\n    &lt;device xmlns:xi=\"http://www.w3.org/2001/XInclude\" name=\"left_arm-calibrator\" type=\"parametricCalibratorEth\"&gt;\n                &lt;xi:include href=\"../general.xml\" /&gt;\n\n        &lt;group name=\"GENERAL\"&gt;\n            &lt;param name=\"joints\"&gt;16&lt;/param&gt; &lt;!-- the number of joints of the robot part --&gt;\n            &lt;param name=\"deviceName\"&gt; Left_Arm_Calibrator &lt;/param&gt;\n        &lt;/group&gt;\n        &lt;!-- joint logical number                     0           1         2           3           4      5     6     7     8     9    10    11    12     13     14    15 --&gt;\n        &lt;group name=\"HOME\"&gt;\n            &lt;param name=\"positionHome\"&gt;           -30        30         0          45           0     0      0    35    65     0     0     0     0      0      0     0  &lt;/param&gt;\n            &lt;param name=\"velocityHome\"&gt;           10         10         10         10           30    30     30   60    30    30    30    30    30     30     30    30  &lt;/param&gt;\n        &lt;/group&gt;                                                                        \n\n        &lt;group name=\"CALIBRATION\"&gt;                                                      \n            &lt;param name=\"calibrationType\"&gt;        12         12         12         12           5      12     12    7     7     6     6     6     6      6      6     6     &lt;/param&gt;\n            &lt;param name=\"calibration1\"&gt;           12895      19391      57775      50843       -1500   28767  13823 0     0     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"calibration2\"&gt;       0          0          0          0        16384  0      0     0     0     9102  9102  9102  9102   9102   9102  3640  &lt;/param&gt;\n            &lt;param name=\"calibration3\"&gt;           0          0          0          0        0      0      0     0     0    -1     1    -1     1     -1      1    -1     &lt;/param&gt;\n            &lt;param name=\"calibration4\"&gt;           0          0          0          0            0      0      0     2520  471   255   510   255   510    255    510   765   &lt;/param&gt;\n            &lt;param name=\"calibration5\"&gt;           0          0          0          0            0      0      0     3030  3436  26    5     26    55     5     20    164   &lt;/param&gt;\n            &lt;param name=\"calibrationZero\"&gt;        0          0          0          0            0      0      0     0     0     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"calibrationDelta\"&gt;       1.4       -5.7       -10        -3.5          0      4.7   -3.5   0     0     0     0     0     0     0      0      0     &lt;/param&gt;\n\n            &lt;param name=\"startupPosition\"&gt;       -35         30         0          50           0      0      0     15    30    0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"startupVelocity\"&gt;        10         10         10         10           30     30     30    100   100   100   100   100   100    100    100   100   &lt;/param&gt;\n            &lt;param name=\"startupMaxPwm\"&gt;          2000       2000       2000       2000         2000   0      0     0     0     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"startupPosThreshold\"&gt;    2          2          2          2            90     90     90    90    90    90    90    90    90     90     90    90    &lt;/param&gt;\n        &lt;/group&gt;\n\n        &lt;param name=\"CALIB_ORDER\"&gt;(0 1 2 3) (4) (5 6 7) (8 9 11 13) (10 12 14 15) &lt;/param&gt; \n\n        &lt;action phase=\"startup\" level=\"10\" type=\"calibrate\"&gt;\n            &lt;param name=\"target\"&gt;left_arm-mc_wrapper&lt;/param&gt;\n        &lt;/action&gt;\n\n        &lt;action phase=\"interrupt1\" level=\"1\" type=\"park\"&gt;\n            &lt;param name=\"target\"&gt;left_arm-mc_wrapper&lt;/param&gt;\n        &lt;/action&gt;\n\n        &lt;action phase=\"interrupt3\" level=\"1\" type=\"abort\" /&gt;\n\n    &lt;/device&gt;\n</code></pre> - On hte server/laptop run <code>yarpmotorgui</code> in order to check the joints encoder readings</p> <p></p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#head-calibration-only-v2","title":"Head calibration (only V2)","text":"<p>Open the calibrator file, and put the values read from <code>yarpmotorgui</code> for the <code>joints 0,1,2,3</code> in the <code>&lt;param name=\"calibration1\"&gt;</code> inside the <code>&lt;group name=\"CALIBRATION\"&gt;</code>.</p> <p>Info</p> <p>The joints params in the <code>xml</code> files are organized as: <code>Column 1 = Joint 0</code> ... <code>Column n = Joint n-1</code>.</p> <pre><code> &lt;group name=\"CALIBRATION\"&gt;\n        &lt;param name=\"calibrationType\"&gt;      12         12          12          12           5           5           &lt;/param&gt;\n        &lt;param name=\"calibration1\"&gt;         30600   31535       46239        6687        3000        3000           &lt;/param&gt;\n        &lt;param name=\"calibration2\"&gt;         0           0           0           0        8192        8192           &lt;/param&gt;\n        &lt;param name=\"calibration3\"&gt;         0           0           0           0           0           0           &lt;/param&gt; \n        &lt;param name=\"calibration4\"&gt;         0           0           0           0           0           0           &lt;/param&gt;\n        &lt;param name=\"calibration5\"&gt;         0           0           0           0           0           0           &lt;/param&gt;                \n        &lt;param name=\"calibrationZero\"&gt;      0           0           0           0           0           0           &lt;/param&gt;\n        &lt;param name=\"calibrationDelta\"&gt;     0           0           0           0           0           0           &lt;/param&gt; \n\n        &lt;param name=\"startupPosition\"&gt;      0           0           0           0           0           0           &lt;/param&gt;        \n        &lt;param name=\"startupVelocity\"&gt;      10          10          20          20          20          20          &lt;/param&gt;        \n        &lt;param name=\"startupMaxPwm\"&gt;        3000        3000        3000        3000        0           0           &lt;/param&gt;        \n        &lt;param name=\"startupPosThreshold\"&gt;  90          90          2           2           2           2           &lt;/param&gt;        \n        &lt;/group&gt; \n</code></pre> <p>Warning</p> <p>Take care that the <code>&lt;param name=\"calibrationDelta\"&gt;</code> has all values seto to 0.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#torso","title":"Torso","text":"<p>Open the calibrator file, and put the values read from <code>yarpmotorgui</code> for the <code>joints 0,1,2</code> in the <code>&lt;param name=\"calibration1\"&gt;</code> inside the <code>&lt;group name=\"CALIBRATION\"&gt;</code>.</p> <p>Info</p> <p>The joints params in the <code>xml</code> files are organized as: <code>Column 1 = Joint 0</code> ... <code>Column n = Joint n-1</code>.</p> <pre><code> &lt;group name=\"CALIBRATION\"&gt;\n        &lt;param name=\"calibrationType\"&gt;                    12                     12                        12       &lt;/param&gt;\n        &lt;param name=\"calibration1\"&gt;                       1535                11951                     36671       &lt;/param&gt; \n        &lt;param name=\"calibration2\"&gt;                       0                       0                         0       &lt;/param&gt; \n        &lt;param name=\"calibration3\"&gt;                       0                       0                         0       &lt;/param&gt; \n        &lt;param name=\"calibration4\"&gt;                       0                       0                         0       &lt;/param&gt;\n        &lt;param name=\"calibration5\"&gt;                       0                       0                         0       &lt;/param&gt;\n        &lt;param name=\"calibrationZero\"&gt;                    0                       0                         0       &lt;/param&gt;\n        &lt;param name=\"calibrationDelta\"&gt;                   0                       0                         0       &lt;/param&gt;\n\n        &lt;param name=\"startupPosition\"&gt;                    0                       0                         0       &lt;/param&gt;\n        &lt;param name=\"startupVelocity\"&gt;                    10                      10                        10      &lt;/param&gt;\n        &lt;param name=\"startupMaxPwm\"&gt;                      5500                    5500                      5500    &lt;/param&gt;\n        &lt;param name=\"startupPosThreshold\"&gt;                2                       2                         2       &lt;/param&gt;\n &lt;/group&gt;\n</code></pre> <p>Warning</p> <p>Take care that the <code>&lt;param name=\"calibrationDelta\"&gt;</code> param has all values seto to 0.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#arms-calibration","title":"Arms calibration","text":"<p>Open the letf arm calibrator file or  right arm calibrator file, and put the values read from <code>yarpmotorgui</code> for the <code>joints 0,1,2,3</code> in the <code>&lt;param name=\"calibration1\"&gt;</code> inside the <code>&lt;group name=\"CALIBRATION\"&gt;</code>.</p> <p>Info</p> <p>The joints params in the <code>xml</code> files are organized as: <code>Column 1 = Joint 0</code> ... <code>Column n = Joint n-1</code>.</p> <pre><code> &lt;group name=\"CALIBRATION\"&gt;                                                      \n            &lt;param name=\"calibrationType\"&gt;         12        12         12         12        5      12     12      7     7     6     6     6     6      6      6     6     &lt;/param&gt;\n            &lt;param name=\"calibration1\"&gt;         12895     19391      57775      50843     -1500  28767  13823      0     0     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"calibration2\"&gt;             0         0          0          0     16384      0      0      0     0  9102  9102  9102  9102   9102   9102  3640  &lt;/param&gt;\n            &lt;param name=\"calibration3\"&gt;             0         0          0          0         0      0      0      0     0    -1     1    -1     1     -1      1    -1     &lt;/param&gt;\n            &lt;param name=\"calibration4\"&gt;             0         0          0          0         0      0      0   2520   471   255   510   255   510    255    510   765   &lt;/param&gt;\n            &lt;param name=\"calibration5\"&gt;             0         0          0          0         0      0      0   3030  3436    26     5    26    55     5     20    164   &lt;/param&gt;\n            &lt;param name=\"calibrationZero\"&gt;          0         0          0          0         0      0      0     0      0     0     0     0     0     0      0      0     &lt;/param&gt;\n            &lt;param name=\"calibrationDelta\"&gt;         0         0          0          0         0      0      0     0      0     0     0     0     0     0      0      0     &lt;/param&gt;\n\n            &lt;param name=\"startupPosition\"&gt;        -35        30          0         50         0      0      0    15     30     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"startupVelocity\"&gt;         10        10         10         10        30     30     30   100    100   100   100   100   100    100    100   100   &lt;/param&gt;\n            &lt;param name=\"startupMaxPwm\"&gt;         2000      2000       2000       2000      2000      0      0     0      0     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"startupPosThreshold\"&gt;      2         2          2          2        90     90     90    90     90    90    90    90    90     90     90    90    &lt;/param&gt;\n        &lt;/group&gt;\n</code></pre> <p>Warning</p> <p>Take care that the <code>&lt;param name=\"calibrationDelta\"&gt;</code> param has all values seto to 0.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#wrist-calibration","title":"Wrist calibration","text":"<p>Place the wrist in the <code>zero position</code> :</p> <p>Open the letf arm calibrator file or  right arm calibrator file, and put the values read from <code>yarpmotorgui</code> for the <code>joints 5,6</code> in the <code>&lt;param name=\"calibration1\"&gt;</code> inside the <code>&lt;group name=\"CALIBRATION\"&gt;</code>.</p> <p>Info</p> <p>The joints params in the <code>xml</code> files are organized as: <code>Column 1 = Joint 0</code> ... <code>Column n = Joint n-1</code>.</p> <pre><code> &lt;group name=\"CALIBRATION\"&gt;                                                      \n            &lt;param name=\"calibrationType\"&gt;         12        12         12         12        5      12     12      7     7     6     6     6     6      6      6     6     &lt;/param&gt;\n            &lt;param name=\"calibration1\"&gt;         12895     19391      57775      50843     -1500  28767  13823      0     0     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"calibration2\"&gt;             0         0          0          0     16384      0      0      0     0  9102  9102  9102  9102   9102   9102  3640  &lt;/param&gt;\n            &lt;param name=\"calibration3\"&gt;             0         0          0          0         0      0      0      0     0    -1     1    -1     1     -1      1    -1     &lt;/param&gt;\n            &lt;param name=\"calibration4\"&gt;             0         0          0          0         0      0      0   2520   471   255   510   255   510    255    510   765   &lt;/param&gt;\n            &lt;param name=\"calibration5\"&gt;             0         0          0          0         0      0      0   3030  3436    26     5    26    55     5     20    164   &lt;/param&gt;\n            &lt;param name=\"calibrationZero\"&gt;          0         0          0          0         0      0      0     0      0     0     0     0     0     0      0      0     &lt;/param&gt;\n            &lt;param name=\"calibrationDelta\"&gt;         0         0          0          0         0      0      0     0      0     0     0     0     0     0      0      0     &lt;/param&gt;\n\n            &lt;param name=\"startupPosition\"&gt;        -35        30          0         50         0      0      0    15     30     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"startupVelocity\"&gt;         10        10         10         10        30     30     30   100    100   100   100   100   100    100    100   100   &lt;/param&gt;\n            &lt;param name=\"startupMaxPwm\"&gt;         2000      2000       2000       2000      2000      0      0     0      0     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"startupPosThreshold\"&gt;      2         2          2          2        90     90     90    90     90    90    90    90    90     90     90    90    &lt;/param&gt;\n        &lt;/group&gt;\n</code></pre> <p>Warning</p> <p>Take care that the <code>&lt;param name=\"calibrationDelta\"&gt;</code> param has all values seto to 0.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#hands-calibration","title":"Hands calibration","text":"<p>Referring to the table below, using a screwdriver read the values <code>Min</code> and <code>Max</code> :</p> Part Joint# Motor Min Max Fingers abduction 7 -&gt; Thumb abduction 8 -&gt; Thumb proximal 9 Thumb distal 10 Index proximal 11 Index distal 12 Middle proximal 13 Middle distal 14 Ring and little 15 <p>Warning</p> <p>Take care that values read respect the relationship :<code>Min</code> &lt; <code>Max</code>s Otherwise you have to move the magnet until you reach the above situation.</p> <p>Open the letf arm calibrator file or  right arm calibrator file, and put the values <code>Min</code> and <code>Max</code> read from <code>yarpmotorgui</code> respectively in the <code>&lt;param name=\"calibration4\"&gt;</code> and <code>&lt;param name=\"calibration5\"&gt;</code> inside the <code>&lt;group name=\"CALIBRATION\"&gt;</code> for each joint in the table above.</p> <p>Info</p> <p>The joints params in the <code>xml</code> files are organized as: <code>Column 1 = Joint 0</code> ... <code>Column n = Joint n-1</code>.</p> <pre><code>&lt;group name=\"CALIBRATION\"&gt;                                                      \n            &lt;param name=\"calibrationType\"&gt;         12        12         12         12        5      12     12      7     7     6     6     6     6      6      6     6     &lt;/param&gt;\n            &lt;param name=\"calibration1\"&gt;         12895     19391      57775      50843     -1500  28767  13823      0     0     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"calibration2\"&gt;             0         0          0          0     16384      0      0      0     0  9102  9102  9102  9102   9102   9102  3640  &lt;/param&gt;\n            &lt;param name=\"calibration3\"&gt;             0         0          0          0         0      0      0      0     0    -1     1    -1     1     -1      1    -1     &lt;/param&gt;\n            &lt;param name=\"calibration4\"&gt;             0         0          0          0         0      0      0   2520   471   255   510   255   510    255    510   765   &lt;/param&gt;\n            &lt;param name=\"calibration5\"&gt;             0         0          0          0         0      0      0   3030  3436    26     5    26    55     5     20    164   &lt;/param&gt;\n            &lt;param name=\"calibrationZero\"&gt;          0         0          0          0         0      0      0     0      0     0     0     0     0     0      0      0     &lt;/param&gt;\n            &lt;param name=\"calibrationDelta\"&gt;         0         0          0          0         0      0      0     0      0     0     0     0     0     0      0      0     &lt;/param&gt;\n\n            &lt;param name=\"startupPosition\"&gt;        -35        30          0         50         0      0      0    15     30     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"startupVelocity\"&gt;         10        10         10         10        30     30     30   100    100   100   100   100   100    100    100   100   &lt;/param&gt;\n            &lt;param name=\"startupMaxPwm\"&gt;         2000      2000       2000       2000      2000      0      0     0      0     0     0     0     0      0      0     0     &lt;/param&gt;\n            &lt;param name=\"startupPosThreshold\"&gt;      2         2          2          2        90     90     90    90     90    90    90    90    90     90     90    90    &lt;/param&gt;\n&lt;/group&gt;\n</code></pre> <p>Warning</p> <p>Take care that the <code>&lt;param name=\"calibrationDelta\"&gt;</code> param has all values seto to 0.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#legs-calibration","title":"Legs calibration","text":"<p>Open the letf leg calibrator file or  right leg calibrator file, and put the values read from <code>yarpmotorgui</code> for the <code>joints 0,1,2,3,4,5</code> in the <code>&lt;param name=\"calibration1\"&gt;</code> inside the <code>&lt;group name=\"CALIBRATION\"&gt;</code>.</p> <p>Info</p> <p>The joints params in the <code>xml</code> files are organized as: <code>Column 1 = Joint 0</code> ... <code>Column n = Joint n-1</code>.</p> <pre><code>&lt;group name=\"CALIBRATION\"&gt;\n    &lt;param name=\"calibrationType\"&gt;           12        12         12        12      12      12        &lt;/param&gt;\n    &lt;param name=\"calibration1\"&gt;              223      6239      57663      36031   63375   63535      &lt;/param&gt; \n    &lt;param name=\"calibration2\"&gt;              0         0          0         0       0       0         &lt;/param&gt; \n    &lt;param name=\"calibration3\"&gt;              0         0          0         0       0       0         &lt;/param&gt; \n\n    &lt;param name=\"calibration4\"&gt;              0         0          0         0       0       0         &lt;/param&gt;\n    &lt;param name=\"calibration5\"&gt;              0         0          0         0       0       0         &lt;/param&gt;\n    &lt;param name=\"calibrationZero\"&gt;           0         0          0         0       0       0         &lt;/param&gt;\n    &lt;param name=\"calibrationDelta\"&gt;          0         0          0         0       0       0         &lt;/param&gt;\n\n\n    &lt;param name=\"startupPosition\"&gt;           0         5          0         0       0       0         &lt;/param&gt;\n    &lt;param name=\"startupVelocity\"&gt;           5         5          10        10      10      10        &lt;/param&gt;\n    &lt;param name=\"startupMaxPwm\"&gt;             1200      1200       1200      1200    1500    1500      &lt;/param&gt;\n    &lt;param name=\"startupPosThreshold\"&gt;       2         2          2         2       2       2         &lt;/param&gt;\n&lt;/group&gt;\n</code></pre> <p>Warning</p> <p>Take care that the <code>&lt;param name=\"calibrationDelta\"&gt;</code> param has all values seto to 0.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#arms-fine-calibration","title":"Arms Fine Calibration","text":"<p>Here's described how to correct small errors in the calibration of the iCub. It applies mainly to the shoulder and elbow joints (joint0...joint3) but can be applied also for the other joints of the arm.</p> <p>Info</p> <p>This procedure has to be done after the calibration of the torso.</p> <p>Put the iCub in a suitable posture and let's call this configuration <code>theta_desired</code> in accordance to the convention you decided to use. As an example, if you decide to use the convention described in ICubForwardKinematics, you might decide to use the posture in the pictures which corresponds to <code>theta_desired = [-90 15 15 90] [deg]</code> (remember we are just considering the three dof of the shoulder and the elbow, an example is given in the pictures below).</p> <p>The aim is to insert the calibration deltas<code>&lt;param name=\"calibrationDelta\"&gt;</code> in each file using the formula: <code>Delta = Theta - Theta_Desired</code>.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#eyes-calibration","title":"Eyes calibration","text":"<p>The eyes mechanism has a total of three degrees of freedom. Both eyes can pan (independently) and tilt (simultaneously).</p> <p></p> <p>Thus the three joints to calibrate are: version (left-right movement), vergence (in-out) and tilt (up-down).</p> <p>While the tilt can be calibrated by directly inserting the delta value in the calibration file, the version and vergence need to be calibrated as follows:</p> <p><code>Joint 4 (version): delta = |delta_j4| + |delta_j5|</code></p> <p><code>Joint 5 (vergence): delta = |delta_j4| - |delta_j5|</code></p> <p>with sign to be chosen accordingly.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#cameras-calibration","title":"Cameras calibration","text":""},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#get-guid-from-camera","title":"Get GUID from camera","text":"<p>Open a terminal on the icub-head and type :</p> <pre><code>  icub@icub-head:~$ yarpdev --device grabberDual --subdevice dragonfly2 --name /cam0 --d 0 --allow-deprecated-devices\n</code></pre> <p>and you\u2019ll get the info below</p> <p></p> <p>Now open a terminal on the server and type :</p> <pre><code>  icub@icubsrv:~$ yarpview --name /view0\n  icub@icubsrv:~$ yarp connect /cam0 /view0\n</code></pre> <p>Check which camera is working and then put the \u201cUnique ID\u201d in the respective files in</p> <pre><code>$ROBOT_CODE/robots-configuration/&lt;$YARP_ROBOT_NAME&gt;/camera\n</code></pre> <p></p> <p>Do all steps above again for the other camera, changing the <code>--d 0</code> parameter to <code>--d 1</code> in the first command.</p>"},{"location":"icub_robot_calibration/icub-robot-calibration-v2.x/#calibrating-cameras","title":"Calibrating cameras","text":"<p>Now you need to ensure that the 2 cameras are perfectly aligned with each other. In order to do this, show a black cross to the robot at a specific distance (see pictures below) and adjust the cameras until reaching the correct alignment.</p> <p></p> <p></p> <ul> <li> <p>Run <code>yarprobotinterface</code> and wait for robot calibration.</p> </li> <li> <p>Run <code>yarpmanager</code>, open <code>Cameras</code> entity then run the 2 <code>yarpdev</code> modules and connect.</p> </li> <li> <p>Open and run ONLY the 2 yarpview modules and connect.</p> </li> <li> <p>In a terminal on the server type:</p> </li> </ul> <pre><code>$ stereoCalib --from icubEyes.ini\n</code></pre> <p>Warning</p> <p>DO NOT open the <code>StereoCalibration</code> app directly from yarpmanager otherwise you will not be able to see the result of the calibration process.</p> <ul> <li>Then type:</li> </ul> <pre><code>$ yarp rpc /stereoCalib/cmd\n</code></pre> <p>hen type \u201cstart\u201d, a message \u201cStarting Calibration\u2026\u201d will appear.</p> <p>Now show the chess to the robot taking care to move it with a different inclination for each acquisition (30 in total). Stay still and just move the chessboard around. The chess needs to fit all the screen and be in landscape view. The system only acquire data if the colored lines appear over the chessboard.</p> <p>In the terminal of the stereoCalib you should see:</p> <p><code>xml    Running Left Camera Calibration...    RMS error reported by calibrateCamera: 0.592978     Running Right Camera Calibration...    RMS error reported by calibrateCamera: 0.147403   30 pairs have been successfully detected.   Running stereo calibration ...   done with RMS error= 0.717102   average reprojection err = 0.958607   Saving Calibration Results...</code></p> <p>Info</p> <p>To get good parameters you should see errors below 1.</p> <p>\u2757 After calibration, you need to MANUALLY copy the calibration data inside the file iCubEyes.ini</p> <p>\ud83d\udcda For additional info look here.</p>"},{"location":"icub_robot_calibration/icub-stereo-calib/","title":"Stereo calibration","text":"<p>In this tutorial we explain how to run the stereo calibration procedure with the stereoCalib module. Before starting the procedure print a chessboard calibration pattern. For convenience, you can find it in <code>$ICUB_ROOT/app/cameraCalibration/data</code>.</p> <p>Make sure you have a config file, e.g. cameraCalib.ini, with the following parameters:</p> <pre><code>[STEREO_CALIBRATION_CONFIGURATION]\nboardWidth W\nboardHeight H\nboardSize S\nnumberOfImages N\nMonoCalib value\n</code></pre> <ul> <li>The <code>boardWidth</code> W is the number of corners along the width direction of the chessboard pattern (e.g. 8 for the provided pattern).</li> <li>The <code>boardHeight</code> H is the number of corners along the height direction of the chessboard pattern (e.g. 6 for the provided pattern).</li> <li>The <code>boardSize</code> S specifies the length (in meters) of one side of the squares in the chessboard pattern.</li> <li>The <code>numberOfImages</code> N specifies the number of images used for the calibration procedure (usually 20-30).</li> <li>The <code>MonoCalib</code> value identifies if the module has to run the stereo calibration (Val=0) or the mono calibration (Val=1). For the mono calibration, connect only the camera that you want to calibrate.</li> </ul> <p>The group [STEREO_CALIBRATION_CONFIGURATION] is the only one used by the module, all the other groups in the config file will be ignored. As default the stereoCalib module uses the iCubEyes.ini located in $ICUB_ROOT/app/cameraCalibration/conf.</p> <p>To run the calibration module and all the connections, you can use the stereoCalib.xml.template file provided in: $ICUB_ROOT/app/cameraCalibration/scripts. Additional details on the created ports can be found in the stereoCalib module page. Notice that some ports are for special purposes and are not useful to regular users.</p> <p>In order to start a calibration procedure open a new terminal and connect to the RPC port:</p> <pre><code>yarp rpc /stereoCalib/cmd\n</code></pre> <p>The calibration procedure can be started writing the command:</p> <pre><code>start\n</code></pre> <p>Show now the chessboard pattern in landscape mode (see examples below). Try to cover the most part of the images and show it in different image positions in order to obtain a complete distortion map. As feedback you should see the detected corners in the two yarpview(s). The procedure continues to acquire images automatically after a short delay between one image and the next one.</p> Example of correct calibration image Example of incorrect calibration image <p>The values printed above are related to the average reprojection error of the 3D points to the image plane. To get good parameters you should see errors below 1 pixel.</p> <p>The parameters will be saved in the output file located in the context of the module (default: $ICUB_ROOT/app/cameraCalibration/conf/outputCalib.ini).</p> <p>An example of output calibration file is:</p> <pre><code>[CAMERA_CALIBRATION_RIGHT]\nw 320\nh 240\nfx 215.483\nfy 214.935\ncx 174.868\ncy 105.63\nk1 -0.343166\nk2 0.0987467\np1 -0.00180031\np2 -0.000303536\n\n[CAMERA_CALIBRATION_LEFT]\nw 320\nh 240\nfx 215.622\nfy 215.056\ncx 163.367\ncy 111.212\nk1 -0.367522\nk2 0.132343\np1 -0.000399841\np2 -0.00016906\n\n[STEREO_DISPARITY]\nHN (0.996239 -0.016423 -0.0850726 -0.0667909 0.0189257 0.999409 0.0286955 -0.00388152 0.084551 -0.0301976 0.995961 -0.0128745 0 0 0 1)\nQL ( 0.000000    0.000000    0.000000   -0.020714   -0.001918    0.000767   -0.000575   -0.000048)\nQR ( 0.000000    0.000000    0.000000   -0.020714   -0.001918    0.000767   -0.000575   -0.000021)\n</code></pre> <p>The parameters w and h are the image resolution used during the calibration.</p> <p>The parameters fx and fy are the focal lengths (along the x and y axes respectively) expressed in pixel units.</p> <p>The point (cx, cy) is the principal points, and usually is the image center.</p> <p>The values k1, k2, p1, p2 are the distortion coefficients.</p> <p>In the [STEREO_DISPARITY] group the extrinsic parameters are saved. HN is the rototranslation matrix between the left and the right camera, whereas QL and QR are the torso and head angles used during the calibration procedure.</p> <p>Additional information regarding the calibration parameters can be found in the OpenCV Documentation.</p>"},{"location":"icub_robot_calibration/icub3-stator-rotor-autocalibration/","title":"iCub 3 - Stator/Rotor auto-calibration","text":"<p>This page shows how to run the autocalibration procedure of the rotor/stator alignement on iCub 3.</p>"},{"location":"icub_robot_calibration/icub3-stator-rotor-autocalibration/#prepare-the-xml-files","title":"Prepare the <code>XML</code> files","text":"<p>In order to get the values to put in the <code>XML</code> files, we need to modify the file enabling the autocalibration.</p> <p>The files are located in <code>robots-configuration/robots-icebox/iCubGenova09/hardware/mechanicals</code>.</p> <p>Accordingly to the joint you have to calibrate, select the corresponding file and set <code>AutoCalibration</code> param to 1 and <code>RotorIndexOffset</code> to 0:</p> <pre><code> &lt;group name=\"2FOC\"&gt;\n        &lt;param name=\"AutoCalibration\"&gt;       1             1       &lt;/param&gt;\n        &lt;param name=\"Verbose\"&gt;               0             0       &lt;/param&gt;\n        &lt;param name=\"HasHallSensor\"&gt;         0             0       &lt;/param&gt;\n        &lt;param name=\"HasTempSensor\"&gt;         0             0       &lt;/param&gt;\n        &lt;param name=\"HasRotorEncoder\"&gt;       1             1       &lt;/param&gt;\n        &lt;param name=\"HasRotorEncoderIndex\"&gt;  1             1       &lt;/param&gt;\n        &lt;param name=\"HasSpeedEncoder\"&gt;       0             0       &lt;/param&gt;\n        &lt;param name=\"RotorIndexOffset\"&gt;      0             0       &lt;/param&gt;\n        &lt;param name=\"MotorPoles\"&gt;            12            8       &lt;/param&gt;\n   &lt;/group&gt;\n</code></pre>"},{"location":"icub_robot_calibration/icub3-stator-rotor-autocalibration/#run-yarprobotinterface","title":"Run <code>yarprobotinterface</code>","text":"<p>In order to get the value to be written in the <code>XML</code> file above, <code>yarprobotinterface</code> needs to be launched.</p> <p>Info</p> <p>In order to get less messages from the <code>yarprobotinterface</code> log, better off enabling the calibration only for the joint that needs to be calibrated. To do that in the corresponding calibration file, edit the <code>CALIB_ORDER</code> param to contain only the number of the joint you need: <pre><code>            &lt;param name=\"CALIB_ORDER\"&gt; (0) (1) (2) (3) (4) (5) &lt;/param&gt;\n</code></pre></p>"},{"location":"icub_robot_calibration/icub3-stator-rotor-autocalibration/#retrieve-the-offset-from-the-log-messages","title":"Retrieve the offset from the log messages","text":"<p>Once <code>yarprobotinterface</code> is running, check the log messages and look for a <code>DEBUG</code> message regarding the joint being under calibration as below:</p> <pre><code>[DEBUG]  from BOARD 10.0.1.10 (right_leg-eb10-j0_1), src CAN1, adr 1, time 92s 891m 994u: (code 0x04000002, par16 0x8119 par64 0xffcc0042ffff0079) -&gt; DEBUG: tag02 + .\n</code></pre> <p>Looking at par64, the rightmost 4 digits are the offset: <code>0x0079</code> = <code>121</code> degrees; this is the value to save in the file (see next steps). </p> <p>The first <code>DEBUG</code> messages have the rightmost 4 digits equal to the default value <code>0xffff</code> until the offset is not found. </p> <p>Warning</p> <p>The 8 leftmost digits (in the example <code>0xffcc0042</code>) must be not <code>0</code>! Otherwise the calibration is failed/not completed. </p> <p>Note</p> <p>The joint number is determined by its <code>2FOC</code> CAN address, considering that <code>adr</code> can be in [1-4]: </p> <p>Example 1 <code>(right_leg-eb10-j0_1), src CAN1, adr 1</code> -&gt; adr 1 is the first joint defined in <code>right_leg-eb10-j0_1</code>, so <code>joint 0</code></p> <p>Example 2 <code>(right_leg-eb11-j2_3), src CAN1, adr 2</code> -&gt; adr 2 is the second joint defined in <code>right_leg-eb11-j2_3</code>, so <code>joint 3</code></p>"},{"location":"icub_robot_calibration/icub3-stator-rotor-autocalibration/#put-the-values-in-the-xml-files","title":"Put the values in the <code>XML</code> files","text":"<p>Once the value of the autocalibration is retrieved, just put it in the corresponding <code>XML</code> file.</p> <p>For the value retrieved above we need to modify the <code>joint 0</code> column of file and set <code>AutoCalibration</code> back to <code>0</code>:</p> <p>The column order in the file follows the joint order in the file-name; in the case of <code>right_leg-eb10-j0_1-mec.xml</code>, the first column is for <code>joint 0</code> and the second one is for <code>joint 1</code>.</p> <pre><code>&lt;group name=\"2FOC\"&gt;\n        &lt;param name=\"AutoCalibration\"&gt;       0             0          &lt;/param&gt;\n        &lt;param name=\"Verbose\"&gt;               0             0          &lt;/param&gt;\n        &lt;param name=\"HasHallSensor\"&gt;         0             0          &lt;/param&gt;\n        &lt;param name=\"HasTempSensor\"&gt;         0             0          &lt;/param&gt;\n        &lt;param name=\"HasRotorEncoder\"&gt;       1             1          &lt;/param&gt;\n        &lt;param name=\"HasRotorEncoderIndex\"&gt;  1             1          &lt;/param&gt;\n        &lt;param name=\"HasSpeedEncoder\"&gt;       0             0          &lt;/param&gt;\n        &lt;param name=\"RotorIndexOffset\"&gt;      121           358        &lt;/param&gt;\n        &lt;param name=\"MotorPoles\"&gt;            12            8          &lt;/param&gt;\n   &lt;/group&gt;\n</code></pre> <p>Warning</p> <p>In order to have the modification working, reboot the control boards before running <code>yarprobotinterface</code> again. </p>"},{"location":"icub_robot_configuration/icub_robot_configuration_index/","title":"Robot configuration","text":"<p>The aim of this page is to explain the configuration of a Ethernet based robot and how it is structured in various files. It can be useful both who approaches robot configuration for the first time and for expert user: the first finds here explanation of the structure of configuration data set and which are the parameter he/she can change, while the second find rules how to filling configuration files of a new robot.</p>"},{"location":"icub_robot_configuration/icub_robot_configuration_index/#introduction","title":"Introduction","text":"<p>Yarprobotinterface application starts all devices and modules required by a robot to work properly. Any device needs a configuration data set that could differs from robot to robot, so each robot has own configuration, saved in xml files contained in a folder called with robot's name in the repository robots-configuration.</p> <p>Each robot has a main configuration file, usually named <code>icub_all.xml</code>, that contains the list of all devices and other modules, like Calibrators and Cartesian, that Yarprobotinterface starts.</p>"},{"location":"icub_robot_configuration/icub_robot_configuration_index/#contents","title":"Contents","text":"<p>Structure of robot configuration data set</p> <p>Naming convention</p> <ul> <li> <p>Rules for naming devices</p> </li> <li> <p>Rules for naming wrappers</p> </li> <li> <p>Rules for naming joints</p> </li> </ul> <p>Configuration of devices</p> <ul> <li> <p>Motor control device</p> </li> <li> <p>Motor Control on iCub</p> </li> <li> <p>FT sensor device</p> </li> <li> <p>Mais device</p> </li> <li> <p>Skin device</p> </li> <li> <p>Inertial device</p> </li> </ul> <p>Configuration of calibrator module</p>"},{"location":"icub_robot_configuration/icub_robot_configuration_index/#note-for-robots-hosted-at-the-icub-tech-facility","title":"Note for robots hosted at the iCub Tech Facility","text":"<p>Robots hosted at the iCub Tech Facility often run developing software, that is, they use the same software modules, but on the development branch instead of stable (master). This means that in the newest version new parameters may be available or there might be some changes that are not described in the latest stable version. You can find these differences in the changelog.</p> <p>If you are interested in the rationale underlying these changes, please check the files <code>[iCubTemplates](https://github.com/robotology/robots-configuration/tree/devel/iCubTemplates)/iCubTemplateVX_0</code>, where <code>X</code> identifies the latest version in the devel branch.</p>"},{"location":"icub_robot_configuration/calibrator_configuration/calibrator_configuration/","title":"Configuration of calibrator module","text":"<p>The calibrator module for Ethernet robots is <code>parametricCalibratorEth</code>; it uses the parameters written in <code>body_part-calib.xml</code> file. Please follow the link to get the meaning of each parameter.</p> <p>Here is reported a brief description of calibrator module and the role of some parameters are involved in calibration and parking procedures.</p> <p>The calibrator in the startup phase launches the calibration procedure: after a motor control devices has been configured, it tries to calibrate its joints. The calibration procedure is composed by three steps:</p> <ol> <li>Sets a safe pwm limit: uses value of parameter <code>startupMaxPwm</code>, like the maximum pwm applicable to the motor;</li> <li>If the parameter <code>skipCalibration</code> in <code>general.xml</code> is false, it sends the calibrate command to each joint with the parameters written in the calibration file, else skips following steps leaving joints in not configured state and exits. If you are interested in details information about calibration and its parameter see here. (The link will be available asap, sorry for the incovenience).</li> <li>If the joint completes the calibration sucessfully, then it tries to move it to the <code>startupPosition</code> using <code>startupVelocity</code> specified in calibration file. If an error occurred in calibration phase, the joint is in fault error.</li> <li>If the <code>startupPosition</code> is reached, then the joint is ready, else is in fault error.</li> </ol> <p>When the user shuts down Yarprobotinterface, the calibrator moves all joints to the park position, that is the position specified in <code>positionHome</code> parameter using <code>velocityHome</code>.</p>"},{"location":"icub_robot_configuration/calibrator_configuration/calibrator_configuration/#maintenance-features","title":"Maintenance features","text":"<p>Relatively to the calibration procedure, users might configure an optional group in the <code>general.xml</code> file. Specifically, the group is termed <code>MAINTENANCE</code> and contains at the moment just the <code>skipRecalibration</code> parameter. To enable it, add the following within <code>general.xml</code>:</p> <pre><code>&lt;group name=\"MAINTENANCE\"&gt;\n    &lt;param extern-name=\"skipRecalibration\" name=\"skipRecalibration\"&gt; false &lt;/param&gt;\n&lt;/group&gt;\n</code></pre> <p>Notice how the parameter can be defined with the property <code>extern-name</code>, meaning that you can overwrite its value when running the <code>yarprobotinterface</code> command:</p> <pre><code>  yarprobotinterface --skipRecalibration true\n</code></pre> <p>Note</p> <p>The option <code>skipRecalibration</code> can be set to <code>true</code> or <code>false</code> (default). If set to <code>true</code>, the robot will skip the calibration procedure when the <code>yarprobotinterface</code> is started over and the boards are not switched off.</p> <p>More on this:</p> <ol> <li>The very first time when control board devices are launched through the <code>yarprobotinterface</code>, the calibration procedure runs normally, irrespective of the parameter value.</li> <li>Subsequently, if <code>yarprobotinterface</code> gets restarted while keeping the boards powered on, then the whole robot will skip the calibration procedure on all joints, which will be set to <code>IDLE</code>.</li> <li>Since the group and the parameter are not mandatory for running the robot, one can omit defining the group inside the <code>general.xml</code> file and the software will set it to <code>false</code> by default; therefore, the robot subparts will calibrate each time the devices are restarted, as it normally happens.</li> <li>If some joints won't calibrate at the first start of the robot, they won't skip the calibration procedure on the following runs. Thus, those joints will normally calibrate while all the others will be set to <code>IDLE</code>.</li> <li>If the parameter is set to <code>true</code> but the boards are restarted, the first time the robot devices are run the calibration procedure will execute normally.</li> <li>As defined above, since the parameter is configured using an <code>extern-name</code>, its value can be overwritten when running the <code>yarprobotinterface</code> without modifying the configuration files.</li> </ol> <p>Danger</p> <p><code>skipRecalibration</code> is a feature thought to be used by expert users, and it must be used with caution. In particular, in the unlikely event that a joint won't calibrate during the first <code>yarprobotinterface</code> run, if this feature is enabled, the same joint will keep calibrating during the subsequent runs. Thus, collisions may occur among joints in idle and the joint calibrating.</p>"},{"location":"icub_robot_configuration/devices_configuration/devices_configuration/","title":"Configuration of devices","text":"<p>To configure a device it is necessary some specific data depending on device type and information of electronic board it refers to. So, more devices can refer to the same electronic board: for example a motion control device and a skin device could share the same electronic board, this mean that the board can controller some joints and can read skin values at the same time. In following sections, you can find an overview of configuration of each device type, while the meaning of each parameter is describes in respective template file in folder <code>iCubTemplates/iCubTemplateVx_y</code> in the <code>robots-configuration</code> repository. Currently the most recent version is <code>iCubTemplateV6_0</code>.</p>"},{"location":"icub_robot_configuration/devices_configuration/devices_configuration/#motor-control-device","title":"Motor control device","text":"<p>Configuration of a motor control device is composed by the wiring, mechanicals and obviously by motor control specification related to joints it manages. In Ethernet robots, a motor control device corresponds to a motor control electronic board that manages from one up to twelve joints.</p> <p>The entry point of motor control device configuration is the file named <code>body_part-ebX-jA_B-mc.xml</code>, that is included in <code>icub_all.xml</code>. This file contains all parameters that the robot's user can modify, for example PID and joints limits, and links other 4 files that only maintainers should modify. These other four files are:</p> <ul> <li><code>general.xml</code>: contains some flags that change behavior of the device</li> <li><code>body_part-ebX-jA_B-eln.xml</code>: contains description of electronic board , such as ip address, and specific parameters of communication protocol used by firmware and yarp devices.</li> <li><code>body_part-ebX-jA_B-mec.xml</code>: contains specific information about mechanics. Usually this file should be equal for all robots of same version.</li> <li><code>body_part-ebX-jA_B-mc_service.xml</code>: contains all the information necessary for the firmware to initialize the motion control service: it needs to know for each joint which is its pwm port, which is its encoder and where is connected.</li> </ul> <p>It is important to notice that each parameter inside mechanicals, motion-control and motion-control-service files needs to have the same number of values of number of joints to configure.</p>"},{"location":"icub_robot_configuration/devices_configuration/devices_configuration/#motor-control-on-icub","title":"Motor Control on iCub","text":"<p>The motor control on the iCub robots is managed by three kinds of boards: <code>EMS4</code>, <code>2FOC</code>, and <code>MC4+</code>. It is performed in the following two ways:</p> <ul> <li> <p>Case 1 : EMS4 + 2FOC In this case, the user must define the current and speed PIDs groups (that will be running on the 2FOC) in addition of the control law.</p> </li> <li> <p>Case 2: MC4+ In this case, the user has to define the control law and the output is fixed to PWM</p> </li> </ul> <p>.</p> <p>One of the major changes, starting from version 3.0, consists of introduction of CONTROLS tag: it allows the user to save in file different PID configurations and he/she can choose which configuration he/she wants to use depending on the experiment he/she wants to run on the robot. To do this, the user writes one or more sections of PID within the file and indicates the selected PID in the \"CONTROLS\" group.</p> <p>Anyway, the user must be careful to respect the hardware configuration under use when tuning the PID gains in the control group. The control law is fixed to minimun jerk but the ouput of the PID depends on the HW configuration. Referring to the image above, we have currently two kinds of HW configurations available on the robot:</p> <p>.</p> <p>In this image, we can see in particular the configuration in the case of working with an EMS4 and 2FOC boards.</p> <p>On the left we can see the possible PIDs running on the EMS4 board, then its output types, and then the PIDs that will be running on the 2FOC consequently.</p> <p>The 2FOC Current Control is always required [with EMS+2FOC boards] even if the control reference from the EMS to the 2FOC is PWM or velocity for two reasons:</p> <ol> <li> <p>There is always a closed-loop current control that suppresses the Id (direct current). Our control model uses the Clarke-Park transform, combining the three-phase currents into two currents, quadrature and direct. The quadrature current generates the torque, while the direct current is totally dissipated as heat, and because of that its suppression is a good practice.</p> </li> <li> <p>Even if the input reference is PWM or velocity, there is a closed-loop current control that is activated to reduce the current when it exceeds the peak current value. The output of this controller is subtracted from the pwm reference received from the EMS (PWM mode) or generated by the velocity closed loop of the 2FOC.</p> </li> </ol> <p>Refer to the newest template for more details on the parameters and their values.</p>"},{"location":"icub_robot_configuration/devices_configuration/devices_configuration/#ft-sensor-device","title":"FT sensor device","text":"<p>This device represents a Force-Torque sensor mounted on robot, so in its configuration there are information about its CAN address, to which Ethernet board it is connected, etc. See the template file for more details.</p>"},{"location":"icub_robot_configuration/devices_configuration/devices_configuration/#mais-device","title":"Mais device","text":"<p>This device represents a mais sensor mounted on robot, so in its configuration there are information about its CAN address, to which Ethernet board it is connected, etc. See the template file for more details.</p>"},{"location":"icub_robot_configuration/devices_configuration/devices_configuration/#skin-device","title":"Skin device","text":"<p>A skin device represents a part of skin of robot; usually the part corresponds to a body part of robot. To configure this device, its is necessary the list of mtb boards that belong to this part and some data to configure each tactile point. Since almost all tactile points uses the same configuration values, there is a parameter called \u201cDefaultCfg\u201d, that is the default configuration, but there is also a \u201cSpecialCfg\u201d parameter by which the user can specified different configuration value for some tactile points.</p> <p>The configuration of this device is in two files: the entry point is <code>body_part-ebX-skin.xml</code>, where there are information about the location of mtb board and it includes <code>body_part-ebX-skinSpec.xml</code>, that contains tactile points configuration.</p> <p>Please, see template file for more details.</p>"},{"location":"icub_robot_configuration/devices_configuration/devices_configuration/#inertial-device","title":"Inertial device","text":"<p>This device represents inertial sensors mounted on mtb boards connected to an Ethernet board. See templates for more details.</p>"},{"location":"icub_robot_configuration/naming_convention/naming_convention/","title":"Naming convention","text":"<p>To help maintenance of configuration files, it is necessary to include the following information in the names of each single file:</p> <ul> <li>robot body parts;</li> <li>type of device or type of information contained in the file, like mechanicals or electronic or motor control data;</li> <li>the electronics board number: in case of configuration file of device, it is useful to know which is the electronic board to refer to.</li> <li>number of joints connected to the board.</li> </ul>"},{"location":"icub_robot_configuration/naming_convention/naming_convention/#1-rules-for-naming-devices","title":"1. Rules for naming devices","text":"<p>This is the pattern of name of each device and its configuration file: <code>body_part-ebX-jA_B-type_of_device</code>. In details, each name is make up of 4 parts:</p> <ul> <li>body_part: <code>head</code>, <code>face</code>, <code>left_arm</code>, <code>right_arm</code>, <code>torso</code>, <code>left_leg</code>, <code>right_leg</code>;</li> <li>ebX: where X is the number of electronic board written on schematics document. Usually, but not always, X is also the last number of board\u2019s ip address;</li> <li>jA_B: this indicates that the board ebX controls joints from A to B. This information let you know if board is in upper or lower part.</li> <li>type_of_device: <code>skin</code>, <code>mais</code>, <code>strain</code>, <code>mc</code>, <code>intertials</code>.</li> </ul> <p>For example, the configuration file of motor control device of joint 0 and 1 of head is named <code>head-eb20-j0_1-mc.xml</code> and inside it there is the name of device <code>head-eb20-j0_1-mc</code>:</p> <pre><code>   &lt;devices robot=\"robotName\" build=\"1\"&gt;\n       &lt;device name=\"head-eb20-j0_1-mc\" type=\"embObjMotionControl\"&gt;\n           &lt;params ....... /&gt;\n       \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026.\n           \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026.\n       &lt;/device&gt;\n   &lt;/devices&gt;\n</code></pre>"},{"location":"icub_robot_configuration/naming_convention/naming_convention/#2rules-for-naming-wrapper-file","title":"2.Rules for naming wrapper file","text":"<p>The wrapper name and its configuration files should have the same name and its pattern is : body_part-type_of_device_wrapper.xml. In details, each file name is make up of 2 parts:</p> <ul> <li>body_part:  <code>head</code>, <code>face</code>, <code>left_arm</code>, <code>right_arm</code>, <code>torso</code>, <code>left_leg</code>, <code>right_leg</code>, <code>left_foot</code>, <code>right_foot</code>;</li> <li>type_of_device_wrapper: <code>skin_wrapper</code>, <code>mais_wrapper</code>, <code>FT_wrapper</code>, <code>VFT_wrapper</code>, <code>mc_wrapper</code>.</li> </ul>"},{"location":"icub_robot_configuration/naming_convention/naming_convention/#3rules-for-naming-joints","title":"3.Rules for naming joints","text":"<p>Each joint has a name that follows the naming convention explained here.</p>"},{"location":"icub_robot_configuration/structure_robot_configuration_data_set/structure_robot_configuration_data_set/","title":"Structure of robot configuration data set","text":"<p>The data set contains configuration for software modules, robot hardware and wrappers.</p> <p>The hardware configuration structure depends on the mechanical-electronic architecture of the robot heavily. Each device represents a sensor or a motor controller of group of joints. A device refers to an ethernet board mounted on the robot, but an ethernet board can be referred to by more devices: for example if a board controls 4 motors and reads the FT sensor, then both the motor control device and FT device have a reference to the board under consideration.</p> <p>Each robot configuration folder has following structure:</p> <p>RobotNameFolder:</p> <ul> <li>Calibrators: each robot body part has a calibration file <code>bodyPart_calib.xml</code> with calibration data, that are robot dependent.</li> <li>Camera: configuration about cameras mounted on robot</li> <li>Cartesian: configuration about the cartesian module</li> <li>Hardware: here there are descriptions of all devices available on robot</li> <li>Mais: description of analog <code>mais</code> devices</li> <li>FT: description of Force-Torque devices</li> <li>Inertials : description of inertials devices</li> <li>Skin: description of skin devices</li> <li>Motorcontrol: description of motor control devices</li> <li>Electronics: description of embedded Ethernet boards mounted on robot.</li> <li>Mechanicals: description of mechanical features involved in motion control</li> <li>Wrappers: configuration of yarp wrappers of devices</li> <li>Some .ini files. Among .ini files, there is <code>yarprobotinterface.ini</code> that specifies which is the file containing list of devices to start, usually its name is <code>icub_all.xml</code>.</li> <li>general.xml: contains some flags that change behavior of Yarprobotinterface.</li> </ul> <p>In the following snippet there is typical main configuration file: it shows the configuration of left arm only. If you desire to have look at the entire file, see <code>icub_all.xml</code> in a robot folder.</p> <p>IMPORTANT: it is important to notice that names of each files follow specific rules. It is very important following the naming convention because the file name can give you some information about the device or wrapper. Please see the section Naming convention</p> <pre><code>    &lt;devices file=\"hardware/motorControl/left_arm-eb1-j0_3-mc.xml\" /&gt;         &lt;!-- motion control device that controls joints numbered from 0 to 3 --&gt;\n    &lt;devices file=\"hardware/motorControl/left_arm-eb1-j0_3-mc.xml\" /&gt;         &lt;!-- motion control device that controls joints numbered from 0 to 3 --&gt;\n    &lt;devices file=\"hardware/motorControl/left_arm-eb1-j0_3-mc.xml\" /&gt;         &lt;!-- motion control device that controls joints numbered from 0 to 3 --&gt;\n    &lt;devices file=\"hardware/motorControl/left_arm-eb24-j4_7-mc.xml\" /&gt;        &lt;!-- motion control device that controls joints numbered from 4 to 7 --&gt;\n    &lt;devices file=\"hardware/motorControl/left_arm-eb25-j8_11-mc.xml\" /&gt;       &lt;!-- motion control device that controls joints numbered from 8 to 11 --&gt;\n    &lt;devices file=\"hardware/motorControl/left_arm-eb26-j12_15-mc.xml\" /&gt;      &lt;!-- motion control device that controls joints numbered from 12 to 15 --&gt;\n    &lt;devices file=\"wrappers/motorControl/left_arm-mc_wrapper.xml\" /&gt;          &lt;!-- wrapper of motion control devices --&gt;\n\n    &lt;!-- LEFT ARM MAIS:device and its wrapper --&gt;\n    &lt;devices file=\"hardware/MAIS/left_arm-eb26-j12_15-mais.xml\" /&gt;\n    &lt;devices file=\"wrappers/MAIS/left_arm-mais_wrapper.xml\" /&gt; \n\n    &lt;!-- LEFT ARM SKIN :device and its wrapper--&gt; \n    &lt;devices file=\"hardware/skin/left_arm-eb24-j4_7-skin.xml\" /&gt;\n    &lt;devices file=\"wrappers/skin/left_arm-skin_wrapper.xml\" /&gt;\n\n    &lt;!-- LEFT ARM FT device and its wrapper --&gt;\n    &lt;devices file=\"wrappers/FT/left_arm-FT_wrapper.xml\" /&gt; \n    &lt;devices file=\"hardware/FT/left_arm-eb1-j0_3-strain.xml\" /&gt;\n\n    &lt;!--  CALIBRATOR --&gt;\n    &lt;devices file=\"calibrators/left_arm-calib.xml\" /&gt;\n</code></pre>"},{"location":"icub_setup_multiple_robots/","title":"Scope of document","text":"<p>The purpose of this corner is to describe how multiple iCub robots can be setup</p> <p>How to use two iCub robots in gazebo simulation</p> <p>How to use two real iCub robots on the same network</p>"},{"location":"icub_setup_multiple_robots/two_robots_real/","title":"How to use two real iCub robots on the same network","text":""},{"location":"icub_setup_multiple_robots/two_robots_real/#how-to-use-two-real-icub-robots-on-the-same-network","title":"How to use two real iCub robots on the same network","text":"<p>This page is intended to be used as a practical guide for setting up two real iCub robots together on the same network to run controllers designed for the two of them. Ideally, the steps can be extended to multiple robots without any more changes.</p> <p>The following steps are done using <code>iCubGenova02</code> (aka Purple) and <code>iCubGenova04</code> (aka Green). The two major modifications are on the Network side and Configuration side.</p>"},{"location":"icub_setup_multiple_robots/two_robots_real/#network-side","title":"Network Side","text":"<p>The first conflict is that both the robots can be accessed by logging into the head using <code>ssh icub-head</code> with the same ip (<code>10.0.0.2</code>). So, while two robots have to be on the same network this has to be changed.</p> <p>The robots' network configuration is set using netplan. Do <code>ssh icub-head</code> and go to <code>/etc/netplan</code> directory. The configuration files for <code>netplan</code> are YAML-based. The configuration file loaded by default is <code>50-icub.yaml</code> and its contents are:</p> <p></p> <p>Now, change the IP address <code>10.0.0.2</code> to some other IP address such as <code>10.0.0.200</code>. Once the IP address is changed do <code>sudo netplan apply</code> to load the new network configuration file. At this point, you will not be able to access <code>icub-head</code> any longer and you need to <code>ssh 10.0.0.200</code> to reach the head of the robot.</p> <p>Note</p> <p>Ensure to switch the IP address back to the original default IP value of <code>10.0.0.2</code> and do <code>sudo netplan apply</code> once the experiments with the robot are finished.</p>"},{"location":"icub_setup_multiple_robots/two_robots_real/#robot-configurations-side","title":"Robot configurations side","text":"<p>To launch an icub robot, multiple configuration files are launched through <code>yarprobotinterface</code>. In general, these files are robot-specific (Eg. iCubGenova02) and contain parameters tuned for that particular robot. However, the port names used in all these configuration files are usually the same. So, while trying to launch multiple robots on the same network, a port address conflict occurs.</p> <p>This issue can be solved by using different port prefix names in the configuration files, e.g. changing from <code>icub</code> to more robot-specific stemnames like <code>icub02</code> for <code>iCubGenova02</code> and <code>icub04</code> for <code>iCubGenova04</code>. In particular, the following files have to be changed:</p> <ul> <li>Update robot <code>yarprobotinterface</code> port prefix.</li> <li>Update interfaces wrapper port prefix.</li> <li>Add port prefix to Whole-Body-Dynamics by adding the following line:   <pre><code>&lt;param name=\"portPrefix\"&gt;/&lt;robot-prefix&gt;/wholebodydynamics&lt;/param&gt;\n</code></pre>   and adding the prefix to external wrench port names, e.g.:   <pre><code>&lt;param name=\"/&lt;robot-prefix&gt;/wholeBodyDynamics/left_leg/cartesianEndEffectorWrench:o\"&gt;(l_foot,l_sole,root_link)&lt;/param&gt;\n</code></pre></li> <li>Update cartesian controllers port prefix.</li> </ul> <p>As a simple test, you can launch <code>yarpmotorgui --robot &lt;robot-prefix&gt;</code> to try to control the robot, and check all the opened ports with <code>yarp name list</code>.</p>"},{"location":"icub_setup_multiple_robots/two_robots_simulation/","title":"How to use two iCub robots in gazebo simulation","text":""},{"location":"icub_setup_multiple_robots/two_robots_simulation/#how-to-use-two-icub-robots-in-gazebo-simulation","title":"How to use two iCub robots in gazebo simulation","text":"<p>In order to use icub robot in gazebo simulation environment one needs to have the repository icub-gazebo and have to set GAZEBO_MODEL_PATH to this repository as indicated in the readme file. Furthermore, icub-gazebo-wholebody repository contains complex <code>gazebo models</code> and <code>gazebo worlds</code>, for example icub-standup-world. In general, these two repositories can be used as standalone or they can be used as a part of robotology-superbuild.</p> <p>When an iCub model is spawned in gazebo, all the ports that are opened take the name placed in the gazebo_icub_robotname.ini configuration file as a port prefix. The default name used is <code>icubSim</code>:</p> <p><code>gazeboYarpPluginsRobotName icubSim</code></p> <p>The model name displayed in gazebo is taken <code>iCub</code> from the icub.sdf file and the gazebo-yarp-plugin motor control board ports and ports of the other gazebo-yarp-plugins you placed in your iCub model are opened with the portprefix <code>/icubSim</code>.</p> <p></p> <p>If you are trying to put another iCub model in the simulation, it will fail due to the port conflict as it will try to open another set of robot ports with the same port prefix as <code>/icubSim</code>. So, in order to get around this problem, you have to comment out the line <code>gazeboYarpPluginsRobotName icubSim</code> of gazebo_icub_robotname.ini configuration file.</p> <p>If you are using the two repositories icub-gazebo and icub-gazebo-wholebody as a part of robotology-superbuild you need to build the superbuild and make sure the changes made to gazebo_icub_robotname.ini configuration file are correctly reflected in the <code>install</code> directory.</p> <p>Now, when a first iCub model is spawned in gazebo it takes the default name of <code>iCub</code> and all the ports related to it are prefixed with <code>/iCub</code>. Similarly, an additional iCub model spawned next to it will have the default name <code>iCub_0</code> and all the ports related to this new model are prefixed with <code>/iCub_0</code>. In this way multiple robots can be spawned in gazebo simulation environment without any port conflicts.</p> <p></p> <p>Another important detail concerns the use of <code>wholeBodyDynamics</code>. In general, <code>wholeBodyDynamics</code> is launched with <code>yarprobotinterface</code> with a configuration file like launch-wholebodydynamics.xml that uses <code>/icubSim</code> port prefix as shown below:</p> <p></p> <p>So, in order to use multiple icub robots in gazebo you need to have multiple <code>wholebodydynamics.xml</code> configuration files with port prefixes corresponding to the robots spawned in gazebo.</p>"},{"location":"icub_starter_kits/first_steps/","title":"iCub First Steps","text":""},{"location":"icub_starter_kits/first_steps/#icub-unpacking-and-installation","title":"iCub Unpacking and Installation","text":""},{"location":"icub_starter_kits/first_steps/#1-open-the-box","title":"1. Open the box","text":"<p>In order to remove iCub from its box, first remove the black straps holding the robot.</p>"},{"location":"icub_starter_kits/first_steps/#2-lift-the-robot","title":"2. Lift the robot","text":"<p>Carefully lift the robot and place it on the stand. The video below shows how to hold the robot for transportation.</p>"},{"location":"icub_starter_kits/first_steps/#3-secure-the-robot-on-the-stand","title":"3. Secure the robot on the stand","text":"<p>Pull the clip in front of the robot pelvis as shown.</p>"},{"location":"icub_starter_kits/first_steps/#4-remove-plastic-protection-from-arms","title":"4. Remove plastic protection from arms","text":"<p>Pay attention to the thumbs. They should be in the position shown below. If you want to move the thumb proximal joint, manually turn the corresponding motor with a flat screwdriver.</p>"},{"location":"icub_starter_kits/first_steps/#5-cables-connection","title":"5. Cables connection","text":"<p>Follow the video. The power supply is already set at the right voltage and current. The ETH cable needs to be connected to the robot laptop.</p> <p>Make sure that the power connector is in place:</p> <p>After turning on the power supply, you should see the two buttons in the backpack turning red. In order to turn on the icub-head pc press the lower button.</p>"},{"location":"icub_starter_kits/first_steps/#first-start-with-the-icub","title":"First Start with the iCub","text":""},{"location":"icub_starter_kits/first_steps/#basic-recommandations","title":"Basic recommandations","text":"<p>Make sure you have connected the robot and the laptop server together with an ethernet cable.</p> <p>Turn both CPU and motors switches from icub at the level of the backpack.</p>"},{"location":"icub_starter_kits/first_steps/#laptop-commands","title":"Laptop commands","text":"<p>Note</p> <p>the password for icub user is icub as simple as that</p> <p>Please open a terminal from the icon on the launch bar.</p> <p>Type:</p> <p>A GUI will open</p> <ul> <li> <p>Click on Cluster tab:</p> </li> <li> <p>Click on GREEN play button on Nameserver node</p> </li> </ul> <p>the tick icon next to icubsrv should become green</p> <p>On nodes : </p> <ul> <li>please select both icubsrv and icub-head</li> </ul> <ul> <li>click GREEN play button. </li> </ul> <p>Both TV icon should turn from RED to GREEN</p> <p>On Entities tab:</p> <p>On Applications :</p> <ul> <li>Click on the arrow next to Applications in order to see the pre-installed apps.</li> </ul> <ul> <li>double click on 1/iCubStartUp</li> </ul> <ul> <li>right click on yarplogger (a side option window will show) and click run.</li> </ul> <p>Note</p> <p>This will create a new window to log messages from every applications that you will run and give us feedback \u2013 VERY USEFUL for debugging)</p>"},{"location":"icub_starter_kits/first_steps/#robot-calibration","title":"Robot Calibration","text":"<p>Now go back to yarpmanager window:</p> <p>WATCH OUT</p> <p>We are going to launch the robot, please make sure to have put the robot in a rest position (usual position on which the robot will be when you stop the yarprobotinterface from running) as the picture below.</p> <p>You may first take a look at the videos on the Deskstop folder YOUR_ROBOT_NAME-Videos and more precisely at \u201c1-yarprobotinterface.gif\u201d in order to see what the robot should do at start.</p> <p>When you know what you should expect to get, you may start the real robot.</p> <p>Danger</p> <p>Make sure the red push button is released (THIS IS THE SECURITY EMERGENCY FAULT BUTTON \u2013 IF EVER SOMETHING GOES WRONG PLEASE PUSH IT)</p> <ul> <li>right click on yarprobotinterface and click RUN</li> </ul>"},{"location":"icub_starter_kits/first_steps/#cameras","title":"Cameras","text":"<ul> <li> <p>double click on 2/Calib cameras:</p> </li> <li> <p>Double click on cameras application to open a new tab on the right side of the yarpmanager main application window.</p> </li> </ul> <ul> <li>click on the icon RUN ALL on the left side of the yarpmanager GUI </li> </ul> <p>Four windows should pop-up: 2 for the cameras and 2 for settings on the cameras. </p> <ul> <li>Click on CONNECT ALL button on the left side of the GUI and at the very moment you should be able to see the images inside the two cameras windows. </li> </ul>"},{"location":"icub_starter_kits/first_steps/#face-expressions","title":"Face Expressions","text":"<ul> <li>double click on 3/FACE EXPRESSIONS: </li> </ul> <ul> <li> <p>a new tab should appear into the main application container </p> </li> <li> <p>click on RUN ALL </p> </li> <li> <p>click on CONNECT ALL </p> </li> </ul> <p>The face should turn from picture 1 to picture 2 (all the connections are OK if everything goes as explained) </p> before connection after connection"},{"location":"icub_starter_kits/first_steps/#skin","title":"Skin","text":"<ul> <li>Double click on Skin_Gui to create the new tab </li> </ul> <ul> <li>click on RUN ALL</li> </ul> <p>Note</p> <p>This should make pop up 14 windows (13 skin patches and one user interface) for a FULLY SENSORIZED ROBOT, if your robot is less sensorized you may see less windows</p> <ul> <li> <p>click on CONNECT ALL </p> </li> <li> <p>click on Binarization Filter button and make it ON, on the QtSkinManagerGui </p> </li> </ul> <p>You can now start touching the robot everywhere the skin patched are present. </p> <p>videos-gifs</p> <p>See video test-skin.mp4 (or .gif) for the test made on your robot.</p> <p>Note</p> <p>Once done using the robot (to do not over use the CPU for the server side\u2013 icubsrv \u2013 please close the applications \u2013 by clicking on DISCONNECT ALL and STOP ALL for the applications skin)</p>"},{"location":"icub_starter_kits/first_steps/#icub-basic-demos","title":"iCub Basic Demos","text":""},{"location":"icub_starter_kits/first_steps/#demo-yoga","title":"Demo Yoga","text":"<ul> <li>double click on Demo Yoga \u2013 it creates a new tab. </li> </ul> <p>Note</p> <p>Make sure that the robot as some enough room to move before launching it \u2013 TAKE A LOOK AT the video 4-Yoga.mp4 (or .gif) to see what the robot should do </p> <ul> <li>Click on RUN </li> </ul> <p>When finished STOP the application.</p>"},{"location":"icub_starter_kits/first_steps/#demo-redball","title":"Demo RedBall","text":"<p>(You may try to fetch a spongy red ball of diameter 6cm) </p> <ul> <li>double click on Red Ball Demo \u2013 a new tab should be created. </li> </ul> <p>First, you will need to launch and prepare the robot. Go back to the tab 1/iCubStartUp. </p> <ul> <li>RUN only the two iKinCartesian (for both arms) and iKinGazeCtrl. </li> </ul> <p>When the icons next to those three modules turn to green </p> <ul> <li> <p>Click CONNECT ALL  then:</p> </li> <li> <p>RUN both wholeBodyDynamics and gravityCompensator modules </p> </li> </ul> <p>when they turn to green </p> <ul> <li>Click on CONNECT ALL </li> </ul> <p>Return to the Demo Red Ball tab </p> <ul> <li>RUN both pf3dTracker and yarpview modules </li> </ul> <p>When the icons turn to GREEN (a new window should pop-up)</p> <ul> <li>Click on CONNECT ALL </li> </ul> <p>Note</p> <p>the new yarpview window should get connected \u2013 and inside the window you should see a yellow circle moving frenetically \u2013 the software is looking for a round shape) </p> <ul> <li> <p>Search for the window Grabber Remote GUI for the left camera. </p> </li> <li> <p>Go to the tab Feature:</p> </li> </ul> <ul> <li>Move the \"Shutter\" slider to middle range until the glowing of refracted light on the left image got almost restrained.</li> <li>Move \"GAIN\" slider to ZERO</li> <li>Move a tiny bit the BLUE and RED sliders inside the \u201cWhite Balance\u201d option to get to an almost normal color. (set the one in the picture above) </li> </ul> <p>Go to the Features (adv) tab: </p> <ul> <li>Put the red ball in front of the robot (the ball should be visible on the left camera viewer). </li> </ul> <p>Increase the SATURATION slider until the red ball gets recognized (circle turns from RED to GREEN) inside the pf3dtracker viewer. </p> <p>When done this process the robot will be able to see the ball and you can launch finally the demo. </p> <ul> <li>RUN demoRedBall</li> </ul> <ul> <li>click on CONNECT ALL </li> </ul> <p>Warning</p> <p>BEWARE DO NOT PUT THE BALL TOO CLOSE FROM THE BODY/FACE!!!!!</p> <p>Warning</p> <p>THE ROBOT IS NOW MOVING TOWARD THE BALL AND TRY TO GRASP IT</p> <p>See the video tutorial on how to let the robot grasp the ball</p> <p> </p>"},{"location":"icub_tendons/","title":"Scope of document","text":"<p>The purpose of this manual is to describe how to mount/repair the tendons of iCub.</p>"},{"location":"icub_tendons/#the-body-parts","title":"The body parts","text":"<p>Please click on any of the iCub body parts below to get instructions on how to re-cable them.</p> <p>Neck</p> <p>Shoulder and Elbow</p> <p>Lower Arm</p> <p>Waist, Legs and Ankle</p>"},{"location":"icub_tendons/#icub-mechanical-versions","title":"iCub mechanical versions","text":"<p>Here is a table showing the visual differences of iCub from version 1 to 2.7.</p> iCub V1 iCub V2 iCub V2.5 iCub V2.5 - Backpack"},{"location":"icub_tendons/#cabling-differences","title":"Cabling Differences","text":"Part activated by tendons iCub V1 iCub V2 iCub V2.5 iCub V2.5 &amp; following (w/ backpack) NECK NO YES YES YES SHOULDER YES - V1 YES - V2 YES - V2 YES - V2 ELBOW YES YES YES YES WAIST YES YES YES YES LOWER ARM (Forearm + Hand) YES - V1 YES - V1 YES - V2 YES - V2 HIP YES YES YES YES ANKLE YES YES NO NO"},{"location":"icub_tendons/hand_cabling_V1/","title":"LOWER ARM V1 CABLING","text":""},{"location":"icub_tendons/hand_cabling_V1/#cad-design","title":"CAD DESIGN","text":"<p>Let's have an overview of the mechanical CAD from different view angles and their specific names on CAD assembly.</p> Left Forearm V1 Right Forearm V1"},{"location":"icub_tendons/hand_cabling_V1/#1-basic-principles","title":"1 Basic Principles","text":"<p>In the following document we describe how to connect the hand joints with the motors positioned in the forearm. The basic scheme is very simple and based on the following ideas:</p> <p>\u2212    Each motor rotates a pulley (P) </p> <p>\u2212    A (optionally coated) cable is twined around the pulley. The cable is fixed to the pulley by passing through a hole in the pulley (H).</p> <p>\u2212    The cable exits the motor by passing trough holes H1 and H2.</p> <p>\u2212    The cable enters into a tube (T1, T2, T3, T4) which guides its path trough the wrist. All the tubes are positioned on suitable sockets in correspondence of the holes (H1, H2).</p> <p>\u2212    Optionally the cable passes trough tensioners (Te1 and Te2) in between T1/T2 and T3/T4. Again the tensioners are provided with suitable sockets.</p> <p>\u2212    The cable exits the tube by entering into holes H3 and H4 once more equipped with suitable sockets for the tubes.</p> <p>Refer to the following example pictures:</p>"},{"location":"icub_tendons/hand_cabling_V1/#11-general-rules-to-be-followed","title":"1.1 General Rules to be Followed","text":"<p>When mounting cables, pay attention to the fact that rotating the motor in a clockwise direction should correspond to a closure of the finger. The definition of clockwise rotation is given in the picture below. This rule is valid for all joints but distal joints; in the case of distal joints the closure of joints depends on some issues that will be discussed later on.</p>"},{"location":"icub_tendons/hand_cabling_V1/#12-general-tips-and-tricks","title":"1.2 General Tips and Tricks","text":"<p>\u2212    The uncoated cable is a bundle of smaller wires. When the cable is cut, this bundle may be corrupted (especially at the cable ending) by trying to pass the cable trough holes. A drop of glue on the cable ending may be useful.</p> <p>\u2212    Ideally the cable should be twined around the pulley P exactly at the middle of it. In particular, when the joint is in the middle of its range of movements the cable should leave the pulley P exactly at the level of the holes H1 and H2. If this is not the case, the friction of the cable at the level of H1 and H2 may break the cable after short usage.</p> <p>\u2212    Always check that the tubes are inside their sockets. If this is not the case cables will break easily due to high friction in correspondence of the input and output holes.</p> <p>\u2212    The tension of the cable is fundamental for having fingers working correctly. Always consider the possibility of using tensioners for increasing the cable tension.</p>"},{"location":"icub_tendons/hand_cabling_V1/#2-what-do-i-need-to-cable","title":"2 WHAT DO I NEED TO CABLE","text":"<p>Here you will find the overall table describing the the mandatory sheaths to be used in the correct place.</p>   | Finger                 | Typology       | Label | Length (mm) | | ---------------------- | -------------- | ----- | ----------- | | **Thumb**              | Proximal short | 6+S   | 74          | |                        |                | 6-S   | 74          | |                        | Proximal long  | 6+L   | 124         | |                        |                | 6-L   | 124         | |                        | Distal         | 4     | 132         | |                        | Oppose         | S0    | 50          | |                        | Oppose         | S2    | 57          | | **Index**              | Proximal short | 8+S   | 80          | |                        |                | 8-S   | 53          | |                        | Proximal Long  | 8+L   | 125         | |                        |                | 8-L   | 140         | |                        | Distal         | 5     | 140         | | **Middle**             | Proximal short | 7+S   | 75          | |                        |                | 7-S   | 60          | |                        | Proximal long  | 7+L   | 125         | |                        |                | 7-L   | 143         | |                        | Distal         | 3     | 135         | | **Ring**               | Distal         | 2     | 112         | | **Pinkie**             | Distal         | 9     | 112         | | **Ring&amp;Pinkie slider** | Distal short   | 0+S   | 73          | |                        |                | 0-S   | 60          | |                        | Distal long    | 0+L   | 80          | | **Fingers**            | abduction      | T0    | 38          | |                        | abduction      | T2    | 27          | |                        | abduction      | T3    | 38          | |                        | abduction      | T4    | 44          |   <p>Tip</p> <p>Remember that symbol + = finger closure and symbol - = finger aperture.</p>"},{"location":"icub_tendons/hand_cabling_V1/#3-how-to-cable-fingers-hand","title":"3 HOW TO CABLE - FINGERS &amp; HAND","text":""},{"location":"icub_tendons/hand_cabling_V1/#31-thumb-oppose","title":"3.1 Thumb oppose","text":"<p>To build the thumb oppose you just need 2 pieces of the sheath IITCODE 13963</p> Label Dimension (mm) IITCODE - SHEATH S0 50 13963 S2 57 13963 <p>And approximatively 40cm of IITCODE 1815 to route it.</p> IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0.63mm, not coated, AISI 316 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm <p>Here is a more detail specification of where to find the 2 pieces:</p> Left Hand Right Hand <p>S0 exits the motor case from the hole near the motor (H2). Enters the finger in the hole which is internal to the palm (H3).</p> <p>S2 exits the motor case from the hole near the ball bearing (H1). Enters the finger in the hole which is external to the palm (H4).</p> <p>Note</p> <p>Cable turns around the pulley with the thumb in the straight position (half thumb path) in order to permit the two opposite movements. </p> <p>Please follow this link for an extended HOWTO route the cable.</p>"},{"location":"icub_tendons/hand_cabling_V1/#32-fingers-abduction","title":"3.2 Fingers Abduction","text":"<p>To build the fingers abduction you just need 4 pieces of the sheath IITCODE 2375</p> Sheaths Dimension (mm) Label T1 38 T0 T2 27 T2 T3 38 T3 T4 44 T4 <p>and approximatively 40cm of IITCODE 1815 to route it.</p> IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0.63mm, not coated, AISI 316 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm <p>Here is a more detail specification of where to find the 3 pieces:</p> Left Hand Right Hand <p>Please follow this link for an extended HOWTO route the cable.</p>"},{"location":"icub_tendons/hand_cabling_V1/#33-proximal-joints","title":"3.3 Proximal Joints","text":"<p>The 3 proximal joints :</p> <ul> <li>Thumb</li> <li>Index</li> <li>Middle</li> </ul> <p>located here:</p> LEFT FOREARM RIGHT FOREARM <p>are all wired with the cable 0.63mm uncoated from CARLSTAHL GmbH as per the following table:</p> IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316 <p>Every sheath in which the cable pass through (+ and - ) is made of:</p> IITCODE Alias Description 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm <p>Please follow this link for an extended HOWTO route the cable.</p>"},{"location":"icub_tendons/hand_cabling_V1/#331-thumb-proximal","title":"3.3.1 Thumb Proximal","text":"<p>Here are the sheaths needed for the Thumb proximal Joint.</p> Dimension Label Notes 74(mm) 6+S Exits the motor case from the hole near the ball bearing (H1) 74(mm) 6-S Exits the motor case from the hole near the motor (H2) 124(mm) 6+L Enters the finger in the hole near the other fingers(H3) 124(mm) 6-L Enters the finger in the hole near the wrist (H4) <p>Note</p> <p>For proximal cablings you need to mark with a suitable pen the cable most internal in the finger (palm opposite side). Then leave the cable and make a knot. Then you must pull the cable (the finger will be closed) and you can make the knot on the other cable nearest the palm, without marking with the pen. </p>"},{"location":"icub_tendons/hand_cabling_V1/#332-index-proximal","title":"3.3.2 Index Proximal","text":"<p>Here are the sheaths needed for the Index Proximal Joint.</p> Dimension Label Notes 80(mm) 8+S Exits the motor case from the hole near the ball bearing (H1) 53(mm) 8-S Exits the motor case from the hole near the motor (H2) 125(mm) 8+L Enters the finger in the hole close to the palm side (H3) 140(mm) 8-L Enters the finger in the hole close to the back of the hand side (H4)"},{"location":"icub_tendons/hand_cabling_V1/#333-middle-proximal","title":"3.3.3 Middle Proximal","text":"<p>Here are the sheaths needed for the Middle Proximal Joint.</p> Dimension Label Notes 75(mm) 7+S Exits the motor case from the hole near the ball bearing (H1) 60(mm) 7-S Exits the motor case from the hole near the motor (H2) 125(mm) 7+L Enters the finger in the hole close to the palm side (H3) 143(mm) 7-L Enters the finger in the hole close to the back of the hand side (H4)"},{"location":"icub_tendons/hand_cabling_V1/#34-distal-joints","title":"3.4 Distal Joints","text":"<p>The 5 distal joints (theoretically 5 but in practice just 4 motors need to be wired):</p> <ul> <li>Thumb</li> <li>Index</li> <li>Middle</li> <li>Ring and Pinkie</li> </ul> <p>Located here:</p> LEFT FOREARM RIGHT FOREARM <p>Are wired with the following cables:</p> IITCODE Alias Description Joint 2391 U7194561 Stainless steel microcable, cable construction 7x19mm, nom. dia 0.45mm, outer dia 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH Thumb  Index MiddleRing &amp; Pinkie (from slider to fingers) 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. dia 0.63mm, not coated, AISI 316 Ring &amp; Pinkie (slider movement) <p>Please follow this link for an extended HOWTO route the cable.</p>"},{"location":"icub_tendons/hand_cabling_V1/#341-thumb-distal","title":"3.4.1 Thumb Distal","text":"<p>The cable needed for the Thumb Distal Joint is IITCODE 2391 and the sheath:</p> Dimension Label Notes 132(mm) 4 Exits the motor case from the hole inside the forearm (H1)"},{"location":"icub_tendons/hand_cabling_V1/#342-index-distal","title":"3.4.2 Index Distal","text":"<p>The cable needed for the Index Distal Joint is IITCODE 2391 and the sheath:</p> Dimension Label Notes 140(mm) 5 Exits the motor case from the hole inside the forearm (H1)"},{"location":"icub_tendons/hand_cabling_V1/#343-middle-distal","title":"3.4.3 Middle Distal","text":"<p>The cable needed for the Middle Distal Joint is IITCODE 2391 and the sheath:</p> Dimension Label Notes 135(mm) 3 Exits the motor case from the hole inside the forearm (H1)."},{"location":"icub_tendons/hand_cabling_V1/#344-ring-pinkie-distal","title":"3.4.4 Ring &amp; Pinkie Distal","text":"<p>This joint differs from the others since its movement is realized with a slider. The motor rotates so as to move the slider (clockwise rotations correspond to moving the slider proximally, i.e. closer to the elbow). The slider pulls a couple of wires so as to close the ring and little finger. </p> <p>These 2 fingers are so actuated by 3 wires - 2 for the distal cables inside the fingers and 1 inside the motor shaft which moves the slider.</p> <p>The 2 cables needed for the R&amp;P Distal Joint (from slider to fingers) are IITCODE 2391 and the 1 cable needed for the slider movements is IITCODE 1815 . The sheaths needed are:</p> Dimension Label Notes 60(mm) 0-S or 0- Exits the motor case from the hole closer to the motor. Enters the hole in the slider near the hand (H5) 80(mm) 0+L Exits the motor case from the hole close to the ball bearing and arrives to the tensioner 73(mm) 0+S Exits from the tensioner and enters the hole in the slider near the elbow (H4) 112(mm) 2 Exits from the slider (H10) and enters the finger which is closer to the hole - ring. 112(mm) 9 Exits from the slider (H11) and enters the finger which is closer to the hole - pinkie. <p>Tip</p> <p>Before connecting the sheath to the support insert and exit the cable, otherwise after this operation it would be more complicated.</p> <p>Here you can see the schematic of the cabling. The sheaths entering the fingers are represented in blue, while the sheaths for the slider movement are in red. The gray block is the tensioner.</p> <p>Please follow this link for an extended HOWTO route the cable.</p>"},{"location":"icub_tendons/hand_cabling_V1/#4-how-to-cable-wrist","title":"4 HOW TO CABLE - WRIST","text":"<p>The wrist movements (roll, pitch and yaw) are achieved with three motors located in the forearm. The wrist roll (or pronosupination) is achieved directly, i.e. without any cable driven joint.</p> <p>The wrist pitch and yaw are instead cable driven. The actuation is achieved with two motors which jointly collaborate to the pitch and yaw degrees of freedom. The actuation is differential with the following relationship:</p> <p>wrist_pitch = M1</p> <p>wrist_yaw = M1 + M2</p> <p>where M1 and M2 are the angular positions of the the two motors contributing to the movements. </p>   | Wrist motors left arm                                  | Section view left arm                                   | | ------------------------------------------------------ | ------------------------------------------------------- | |  |  |   <p>The overall cables of the wrist are all build from IITCODE 1815 with the following specifications:</p> IITCODE Alias/Provider Code Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0.63mm, not coated, AISI 316"},{"location":"icub_tendons/hand_cabling_V1/#41-wrist-motor-tendons","title":"4.1 Wrist Motor tendons","text":"<p>From the pictures below you will be able to locate and identify the tendons inside the Right Forearm building the active part of the wrist tendons.</p> <p>From the pictures below you will be able to locate and identify the tendons inside the Left Forearm building the active part of the wrist tendons.</p> <p>To get more details on how to rewire them, please follow this link.</p>"},{"location":"icub_tendons/hand_cabling_V1/#42-tensioner-iitcode-3745","title":"4.2 Tensioner - IITCODE 3745","text":"<p>To properly tense the tendons of the Forearm it is mandatory to add the tensioner IITCODE 3745- alias CAD of the assembly:  RC_TLR_007_G_014_00 - it is made by the following pieces:</p>   | IITCODE | Revision | Alias               | Description     | | :------ | :------- | :------------------ | :-------------- | | 3756    | 2        | RC_TLR_007_P_042_00 | TENSIONER BODY  | | 3757    | 1        | RC_TLR_007_P_041_00 | TENSIONER SCREW | | 2121    |          | RC_TLR_007_P_044_00 | LOCK NUT        | | 3758    | 1        | RC_TLR_007_P_067_00 | TENSIONER SCREW | | 2136    |          | RC_TLR_007_P_068_00 | LOCK NUT        |   <p>Note</p> <p>Note that RED nut and the RED extremity of the tensioner assembly are left hand-threaded (wrist side). Pay attention to the direction of turning.</p>"},{"location":"icub_tendons/hand_cabling_V1/#43-wrist-passive-tendons","title":"4.3 Wrist Passive tendons","text":"<p>From the pictures below you will be able to locate and identify the 2 tendons inside the wrist building the passive part of the wrist movements.</p> <p>To get more details on how to rewire them, please follow this link.</p>"},{"location":"icub_tendons/hand_cabling_V2/","title":"LOWER ARM V2 CABLING","text":""},{"location":"icub_tendons/hand_cabling_V2/#cad-design","title":"CAD DESIGN","text":"<p>Let's have an overview of the mechanical CAD from different view angles and their specific names on CAD assembly.</p> Left Forearm V2 Right Forearm V2 in CAD repository (maybe CREO): RC_TLR_007_A_001_LEFT_FOREARM.ASM + RC_TLR_012_A_001_LEFT_HAND.ASM in CAD repository (maybe CREO): RC_TLR_010_A_001_RIGHT_FOREARM.ASM + RC_TLR_011_A_001_RIGHT_HAND.ASM"},{"location":"icub_tendons/hand_cabling_V2/#1-what-do-i-need-to-cable","title":"1    WHAT DO I NEED TO CABLE","text":"<p>Here you will find the overall tables describing the necessary parts needed when routing the cables onto the 11 motors (12 motors inside the Lower Arm but just 11 are cabled) and the mandatory sheaths to be used in the correct place.</p>"},{"location":"icub_tendons/hand_cabling_V2/#11-finger-sheaths","title":"1.1 Finger sheaths","text":"IITCODE Alias Description 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm 2386 TEFLON_SHEATH Insulating sheath, AWG22, inner dia 0,709 -0/+0,102 mm, material thickness 0,152 -0/+0,102mm, Teflon, transparent <p>Danger</p> <p>inside sheath 13963 please DO NOT (NEVER) USE Teflon sheath!!!</p>"},{"location":"icub_tendons/hand_cabling_V2/#111-sheaths-length-labelling","title":"1.1.1   Sheaths length &amp; labelling","text":"<p>Please refer to this table to find out which sheath you need to install at the right place and the correct label to add on top of it:</p> Finger Typology Label Length (mm) IITCODE - sheath Thumb Proximal 6+ 185 13963 Thumb Proximal 6- 185 13963 Thumb Short Prox + pict. above 9 2375 Thumb Short Prox - pict. above 11 2375 Thumb Distal N4 57 2375  <code>(+Teflon)</code> Thumb Short Dist pict. above 11.5 2375 Thumb oppose S0 50 2375  <code>(+Teflon)</code> Thumb oppose S2 57 2375  <code>(+Teflon)</code> Index Proximal 8+ 224 13963 Index Proximal 8- 224 13963 Index Distal N5 105 2375  <code>(+Teflon)</code> Middle Proximal 7+ 224 13963 Middle Proximal 7- 224 13963 Middle Distal N3 105 2375  <code>(+Teflon)</code> Ring Distal N2 95 2375  <code>(+Teflon)</code> Pinkie Distal N9 95 2375  <code>(+Teflon)</code> Fingers abduct T0 90 (1) 2375 Fingers abduct T2 27 2375 Fingers abduct T4 44 2375 <p><code>(+Teflon) refers to the IITCODE 2386</code></p> <p>Note</p> <p>(1) the length 90 mm of T0 comes from the previous version where there was: T0+T3+tensioner (38+38+14 mm).</p> <p>Warning</p> <p>For the proximal sheath, please label BOTH the start of the sheath (base of the motor at the level of the elbow) and at the end of it.</p>"},{"location":"icub_tendons/hand_cabling_V2/#12-finger-hand-cables","title":"1.2 Finger &amp; hand cables","text":"IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316 2391 U7194561 Stainless steel micro-cable, cable construction 7x19mm, nom. diameter 0.45mm, outer diameter 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH"},{"location":"icub_tendons/hand_cabling_V2/#121-cables-length","title":"1.2.1   Cables length","text":"<p>Please refer to this table to find out which cable you need to install at the right place:</p> Finger Typology Length (cm) IITCODE - cable Thumb oppose 50 1815 Thumb Proximal 100 1815 Index Proximal 100 1815 Middle Proximal 100 1815 Thumb Distal 40 2391 Index Distal 40 2391 Middle Distal 40 2391 Ring Distal 40 2391 Pinkie Distal 40 2391 Fingers Abduction 50/60 1815"},{"location":"icub_tendons/hand_cabling_V2/#2-how-to-cable-fingers-hand","title":"2    HOW TO CABLE - FINGERS &amp; HAND","text":""},{"location":"icub_tendons/hand_cabling_V2/#21-proximal-joints","title":"2.1 Proximal joints","text":"<p>The 3 proximal joints : </p> <ul> <li>Thumb</li> <li>Index</li> <li>Middle</li> </ul> <p>located here:</p> LEFT FOREARM RIGHT FOREARM <p>are all wired with the cable 0.63mm uncoated from CARLSTAHL GmbH as per the following table:</p> IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316 <p>Every sheath in which the cable pass through (+ and - ) is made of:</p> IITCODE Alias Description 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm <p>Danger</p> <p>inside sheath 13963 please DO NOT USE Teflon sheath!!!</p> <p>Note</p> <p>IITCODE  13963 is alternative to the 4545 (old one - not in use ANYMORE) and it was introduced only for cost efficiency.</p> <p>Please follow this link for an extended HOWTO route the cable.</p>"},{"location":"icub_tendons/hand_cabling_V2/#211-thumb-peculiarity","title":"2.1.1   THUMB peculiarity","text":"<p>The THUMB is a finger a bit particular in the wiring compared to the index and the middle because - as it is the finger with the most degrees of freedom- it needs to pass a series of pulleys at the base of it in order to add also the thumb oppose joint movement inside the articulation.</p> <p></p> <p>The IITCODE 2375 as specification described below :</p> IITCODE Alias Description 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm <p>Is needed for the 3 pieces circled in red on the picture above. Here are the specs for each one of them:</p> Number Type Length (mm) 1 distal short 11.5 2 prox short (-) 11 3 prox short (+) 9 <p>Please follow this link for an extended HOWTO route the cable.</p> <p>Once the 3 proximal joints are cabled, the lateral view of the forearm should look like the picture below. The 6 sheaths are pointed by the red arrows.</p> <p></p>"},{"location":"icub_tendons/hand_cabling_V2/#22-distal-joints","title":"2.2 Distal joints","text":"<p>The 5  proximal joints (theoretically 5 but in practice just 4 motors need to be wired): </p> <ul> <li>Thumb</li> <li>Index</li> <li>Middle</li> <li>Ring and Pinkie</li> </ul> <p>Located here:</p> RIGHT FOREARM LEFT FOREARM <p>Are all wired with the cable 0.61mm coated from CARLSTAHL GmbH as per the following table:</p> IITCODE Alias Description 2391 U7194561 Stainless steel micro-cable, cable construction 7x19mm, nom. dia 0.45mm, outer dia 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH <p>Every sheath is made of both the following pieces:</p> IITCODE Alias Description 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm 2386 TEFLON_SHEATH Insulating sheath, AWG22, inner dia 0,709 -0/+0,102 mm, material thickness 0,152 -0/+0,102mm, Teflon, transparent <p>Please follow this link for an extended HOWTO route the cable.</p>"},{"location":"icub_tendons/hand_cabling_V2/#23-thumb-oppose","title":"2.3 Thumb Oppose","text":"<p>To build the thumb oppose you just need 2 pieces of the sheath IITCODE 2375</p> Label Dimension (mm) IITCODE - SHEATH S0 50 2375  <code>(+Teflon)</code> S2 57 2375  <code>(+Teflon)</code> <p>And approximatively 50cm of IITCODE  1815 to route it.</p> IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm <p>Here is a more detail specification of where to find the 2 pieces:</p> Left Hand Right Hand <p>Please follow this link for an extended HOWTO route the cable.</p> <p>Remember that the shorter sheat is S0 and the longer one is S2.</p>"},{"location":"icub_tendons/hand_cabling_V2/#24-fingers-abduction","title":"2.4 Fingers Abduction","text":"<p>To build the fingers abduction you just need 3 pieces of the sheath IITCODE 2375</p> Label Dimension(mm) IITCODE - SHEATH T0 90 2375 T2 27 2375 T4 44 2375 <p>Danger</p> <p>inside sheath 2375 please DO NOT USE Teflon sheath!!!</p> <p>and approximatively 50cm of IITCODE 1815 to route it.</p> IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm <p>Here is a more detail specification of where to find the 3 pieces:</p> Left Hand Right Hand <p>Please follow this link for an extended HOWTO route the cable.</p>"},{"location":"icub_tendons/hand_cabling_V2/#3-how-to-cable-wrist","title":"3    HOW TO CABLE - WRIST","text":""},{"location":"icub_tendons/hand_cabling_V2/#31-wrist-tendons-length","title":"3.1     Wrist tendons length","text":"<p>Here is the list of the 10 tendons needed to build the wrist movements:</p>    | Tendon | IITCODE | Length | Alias            | | ------ | ------- | ------ | ---------------- | | 1      | 6400    | 72 mm  | RC_IIT_019_G_019 | | 2      | 6402    | 84 mm  | RC_IIT_019_G_020 | | 3      | 6404    | 101 mm | RC_IIT_019_G_021 | | 4      | 6413    | 124 mm | RC_IIT_019_G_022 | | 5      | 6414    | 107 mm | RC_IIT_019_G_023 | | 6      | 6415    | 113 mm | RC_IIT_019_G_024 | | 7      | 6416    | 112 mm | RC_IIT_019_G_025 | | 8      | 6417    | 107mm  | RC_IIT_019_G_026 | | 9      | 6418    | 53 mm  | RC_IIT_019_G_027 | | 10     | 6419    | 45 mm  | RC_IIT_019_G_028 |"},{"location":"icub_tendons/hand_cabling_V2/#32-construction-table","title":"3.2 Construction table","text":"<p>The overall cables of the wrist are all build from IITCODE 4482 (of Length defined in the table above) and 2 crimps IITCODE 4722, here is the table reporting the specifics of those pieces:</p> IITCODE Number of pieces Alias/Provider Code Description 4482 1 CG077081 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,81mm, not coated, AISI 304 4722 2 RC_TLR_010_P_100 THIMBLE FOR CABLE 0.8mm"},{"location":"icub_tendons/hand_cabling_V2/#33-right-forearm-wrist-motor-tendons","title":"3.3 Right Forearm - Wrist motor tendons","text":"<p>From the pictures below you will be able to locate and identify the 8 tendons inside the Right Forearm building the active part of the wrist tendons.</p> <p>To get a more details on how to rewire them, please follow this link</p>"},{"location":"icub_tendons/hand_cabling_V2/#34-left-forearm-wrist-motor-tendons","title":"3.4 Left Forearm - Wrist motor tendons","text":"<p>From the pictures below you will be able to locate and identify the 8 tendons inside the Left Forearm building the active part of the wrist tendons.</p> <p>To get a more details on how to rewire them, please follow this link</p>"},{"location":"icub_tendons/hand_cabling_V2/#35-tensioner-iitcode-3514","title":"3.5 Tensioner - IITCODE 3514","text":"<p>To properly tense the 8 tendons of the Forearm it is mandatory to add the tensioner IITCODE 3514 - alias CAD of the assembly: RC_TLR_010_G014 - it is made by the following pieces:</p>   | IITCODE | Revision | Alias            | Description     | | ------- | -------- | ---------------- | --------------- | | 3559    | A3       | RC_TLR_010_P_050 | TENSIONER BODY  | | 3560    | A1       | RC_TLR_010_P_046 | TENSIONER SCREW | | 3561    |          | RC_TLR_010_P_049 | LOCK NUT        | | 3562    | A1       | RC_TLR_010_P_048 | TENSIONER SCREW | | 3563    |          | RC_TLR_010_P_047 | LOCK NUT        |"},{"location":"icub_tendons/hand_cabling_V2/#36-wrist-passive-tendons","title":"3.6 Wrist - Passive tendons","text":"<p>From the pictures below you will be able to locate and identify the 2 tendons inside both the Right Wrist and Left Wrist building the passive part of the wrist movements.</p> RIGHT WRIST LEFT WRIST <p>To get more details on how to rewire them, please follow this link.</p>"},{"location":"icub_tendons/hand_cabling_V2/#37-test-motion","title":"3.7 TEST - MOTION","text":"<p>Every single motor listed below needs to be tested at the end of the cabling to ensure the perfect motion.</p> MOTOR LABEL MOTOR FUNCTION volt to open volts to close 2M0 pronosuppination 0.5V-1.5V 0.5V-1.5V 2M1 inside wrist motor 0.5V-1.5V 0.5V-1.5V 2M2 outside wrist motor 0.5V-1.5V 0.5V-1.5V 2M3 hand fingers 1.5-2V\u00a0 1.5-2V 3M0 thumb oppose 0.5-1V(0)\u00a0 2.5Vmax(90) 3M1 thum prox 0.5V-1V 0.5V-1V 3M2 thumb distal 2V-2.5V 2V-2.5V 3M3 index prox 0.5V-1.5V 0.5V-1.5V 4M0 index distal 1.5-2V 1.5-2V 4M1 midlle prox 0.5V-1.5V 0.5V-1.5V 4M2 middle distal 1-1.5V 1-1.5V 4M3 pinkie and ring 1V-1.5V 1V-1.5V"},{"location":"icub_tendons/lower_arm/","title":"Definition of \"Lower Arm\"","text":"<p>We define the \"Lower Arm\" as the assembly of the Forearm and the Hand.</p> <p>Definition</p> <pre><code>LOWER ARM = FOREARM + HAND\n</code></pre> <p>The Lower Arm is composed of 12 motors (Forearm: 10 + Hand: 2)</p> <p>Let's describe the functionality of those motors:</p> <p>Forearm: (10)</p> <p>Pronosupination (1)</p> <p>Wrist: (2) = pan + tilt</p> <p>Thumb:  (2) = proximal + distal</p> <p>Index: (2) = proximal + distal</p> <p>Middle: (2) = proximal + distal</p> <p>Pinky-ring fingers: (1) = distal</p> <p>Hand: (2)</p> <p>Fingers abduction (1)</p> <p>Thumb oppose (1)</p>"},{"location":"icub_tendons/lower_arm/#1-version-1","title":"1    VERSION 1","text":"<p>Let's have an overview of the mechanical CAD from different view angles.</p> Left Forearm V1 Right Forearm V1 <p>Please follow this link to reach the HOWTO page to repair the Version 1 of the Lower Arm.</p>"},{"location":"icub_tendons/lower_arm/#2-version-2","title":"2    VERSION 2","text":"<p>Let's have an overview of the mechanical CAD from different view angles.</p> Left Forearm V2 Right Forearm V2 <p>Please follow this link to reach the HOWTO page to repair the Version 2 of the Lower Arm.</p>"},{"location":"icub_tendons/lower_arm_V1/","title":"HOWTO REPAIR ANY CABLE FROM A FOREARM or HAND - VERSION 1","text":""},{"location":"icub_tendons/lower_arm_V1/#1-overview","title":"1 OVERVIEW","text":"<p>Let's have an overview of the mechanical CAD from different view angles.</p> Left Forearm V1 Right Forearm V1"},{"location":"icub_tendons/lower_arm_V1/#11-rules-of-thumb-for-a-good-start","title":"1.1 Rules of Thumb for a good start:","text":"<p>1 - Visual inspection (remove the covers - around the forearm and above the hand - and check for broken cables)</p> <p>2 - Identification (which part needs to be repaired)</p> <p>3 - Cleaning and Removing the broken cable</p>"},{"location":"icub_tendons/lower_arm_V1/#2-distal-joints","title":"2 Distal Joints","text":"<p>There are 2 types of distal Joints on this version of the forearm:</p> <ul> <li>The ones which go inside a motor shaft to get anchored and, as soon as the motor is spinning, the cable rolls around the pulley and closes the joint. Those motors are perfectly identical - only the positions differ:</li> </ul> <p>Thumb, Index &amp; Middle fingers</p> <ul> <li>The ones which are attached to the slider:</li> </ul> <p>Ring and Pinkie fingers</p>"},{"location":"icub_tendons/lower_arm_V1/#21-location","title":"2.1 Location","text":"WHERE JOINT POSITION Thumb distal easy to find: no slider above or hiding it. It is also right next to the motor with the cage Index and Middle they are located beneath the slider  (other side of the wrist, external) Ring and Pinkie they are attached onto the moving part of the slider (internal) <p>WATCH OUT</p> <p>FOR the Left forearm : the motor positions are \"mirrored\" respect to the right ones.</p>"},{"location":"icub_tendons/lower_arm_V1/#22-cabling","title":"2.2 Cabling","text":""},{"location":"icub_tendons/lower_arm_V1/#221-preparation","title":"2.2.1 Preparation","text":"<p>The minimum requirement to start recabling:</p> IITCODE Alias Description 2391 U7194561 Stainless steel micro cable, cable construction 7x19mm, nom. dia 0.45mm, outer dia 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH"},{"location":"icub_tendons/lower_arm_V1/#222-knot-creation","title":"2.2.2 Knot creation","text":"STEP BY STEP GUIDE FOR A GOOD KNOT Start by cutting one piece of 40cm from the cable IITCODE 2391.Make a knot at one extremity. use 2 pliers to close it hard. The plier closest to the knot is just opened-free to let the cable to run over it but is here to block the knot, the second one pull the cable to tighten the knot. Place the pliers on the same side, in order to not damage the cable. drop a tear of glue on the knot and dry it. REMOVE the excess with a tissue - double check that the knot is perfectly dry before to proceed. cut the excess of cable FINISHED!!! Insert the knot until it remains inside the socket of the pulley"},{"location":"icub_tendons/lower_arm_V1/#223-thumb","title":"2.2.3 Thumb","text":"<p>Here you can find a procedure for recabling the Thumb Distal Joint of the right hand of the robot.</p> <p>WATCH OUT</p> <p>FOR the Left forearm : the motor positions are \"mirrored\" respect to the right ones.</p> Pictures step by step guide In order to recable this joint, just insert the new cable IN side the hole (red circle - blue arrow) - the hole is in the internal side of the pulley cage. Once inserted, the cable should get OUT at the base of the phalange (red arrow). From the base of the phalange, insert the cable in the two pulleys following the path (red), ensuring that the cable remains parallel while looping (see bottom picture). For closing the cable, make it exit from the hole at the base of the nail and secure it in its socket with a knot 1-2cm away from the exit of the nail. By using a flat screwdriver the size of the throat, turning it the direction shown above (front view of the hand with palm down):  you should be able to see the cable get sucked up until finally you can see the finger closing entirely. Make sure the finger can easily get closed and opened by turning CW and CCW from mid range closing. FINISHED!!!"},{"location":"icub_tendons/lower_arm_V1/#224-index-or-middle","title":"2.2.4 Index or Middle","text":"<p>Here you can find a procedure for recabling the Index or Middle Distal Joints of the right hand of the robot.</p> <p>WATCH OUT</p> <p>FOR the Left forearm : the motor positions are \"mirrored\" respect to the right ones.</p> Pictures step by step guide You must consider to move away the slider which covers both motors, to be able to see clearly the hole where the cable will go - for that purpose, please remove the 4 screws indicated in the picture. After having removed the screws you should be able to move sideways the slider, being able more easily to fit the cable into the retaining socket, but mainly see both internal holes (blue circle for middle distal and red circle for index distal). Put the cable inside the correct hole, depending on which cable you are going to restore (middle finger - red hole &amp; index finger - blue hole). Push it until it gets OUT from the base of the first phalange of either index or middle depending on the cable you want to fix. Twin the cable as shown and make a knot 1-2cm away from the exit of the nail. By using a flat screwdriver the size of the throat, turning it the direction shown above (front view of the hand with palm down):  you should be able to see the cable get sucked up until finally you can see the finger closing entirely. Make sure the finger can easily get closed and opened by turning CW and CCW from mid range closing. FINISHED!!!"},{"location":"icub_tendons/lower_arm_V1/#225-ring-and-pinkie","title":"2.2.5 Ring and Pinkie","text":"<p>These 2 fingers actually form a single distal joint and are in fact driven by a single motor.</p> <p>Note</p> <p>Those fingers need to be done together in order to make sure that both cable close simultaneously.</p> <p>The 2 fingers are so actuated by 3 wires - 2 for the distal cables inside the fingers and 1 inside the motor shaft which moves the slider. For each cabling please follow the procedures below.</p>"},{"location":"icub_tendons/lower_arm_V1/#225a-cabling-for-the-motor-side","title":"2.2.5a  Cabling for the motor side","text":"<p>Here you can find the procedure for the cabling of the motor side - responsible for the slider movement:</p> Pictures Steb by step guide Take one meter of cable IITCODE 1815 and after removing the broken cable (s) from the mechanism, follow the steps below that show the photos below:   - 1 img. identify the motor   - img. 2 unscrew the 2 screws that hold it in place - img. 3 pass the cable 1815 (1m) through the appropriate hole in the motor pulley.  - img. 4-5-6 once the 1815 cable has been passed through the motor, make sure that the final result of the winding is as shown in figure 6. <p>1  2</p> 3 4 5 6 Insert the 1815 cable in the sheaths 0+S (ball bearing side) and 0-S (motor side). The blue one is 0-S sheath and the red one is 0+S. Now you have to put back the motor in your site. Pass the 0+ and 0- cables through the guide holes as described in the image Detail of 0- cable passage. Put an about 6 mm thickness piece in between the slider and the Ergal part (yellow). Detail of the slide in position 0 with the cables 0+ and 0- passed through the holes. Pull the cables that have been passed through the sled. Mark the exit point of the cables from the slide with a felt-tip pen, keeping the cables under tension. The marked points will indicate the exact position of the cable retention node,for this reason it is necessary to mark them as close as possible to the outlet holes of the slide. Move the slide in the opposite direction to that of the 6mm thickness in order to leave the point previously marked for the knot on the 0+ cable visible and tie the knot. Now it is possible to move the slide back to the previous position by making the knot on the cable 0-"},{"location":"icub_tendons/lower_arm_V1/#225b-cabling-for-the-fingers","title":"2.2.5b Cabling for the fingers","text":"Pictures step by step guide 1. Prepare 2 cables of 40 cm of IITCODE 2391 and make sure you make the knot as taught above 2.  The starting points of the cabling are the 2 holes of the slider 3 .pass both cables inside the parallel holes and then in thiers sheats 4. the exit of both cables is at the base of the phalange 5. cable routing (same rules as other fingers). To be able to pass the cable at the base of the nail it is important to create space by removing the nail (plastic cover) and moving forward the fingertip for 1 cm from its base. 6. please write with a marker at the base of the nails where the knot should be in order to have a perfect synchronous closing for both fingers. 7. Now close manually the 2 fingers to get some slack to the cable and pull it out a bit to see where you should create the knot - at the very end of the mark on the cable. 8. If you did good, when releasing the fingers they should be symmetrical FINISHED!!!"},{"location":"icub_tendons/lower_arm_V1/#3-proximal-joints","title":"3 Proximal Joints","text":""},{"location":"icub_tendons/lower_arm_V1/#31-location","title":"3.1 Location","text":"<p>Below you can see the back views of the forearms (palm down). The motor positions are mirrored.</p> LEFT FOREARM RIGHT FOREARM real pic real pic <p>If ever you realize that one of the following cable is broken bear in mind:</p> <p>Tip</p> <p>The start of the wiring for each proximal is identical (wiring around the motor pulley), the index and middle proximal joints are cabled exactly the same way, just the thumb is a bit trickier.</p>"},{"location":"icub_tendons/lower_arm_V1/#32-cabling","title":"3.2 Cabling","text":""},{"location":"icub_tendons/lower_arm_V1/#321-preparation","title":"3.2.1 Preparation","text":"<p>The minimum requirement to start recabling the proximal joints is:</p> IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316"},{"location":"icub_tendons/lower_arm_V1/#321-cabling-of-the-motor-pulley-fingers","title":"3.2.1 Cabling of the motor pulley &amp; fingers","text":"<p>Let' start with the cabling of the motor pulley.</p> Pictures step by step guide Take 1 meter of IITCODE 1815 The following steps are common for the three fingers (index, middle, thumb). However, the holes for the thumb in the frame are slightly different (see next table). Turn the pulley in order to have the threads already facing (pointing toward) the holes inside the pink frame and the hole inside the pulley itself lying at horizontal. insert the cable inside the pulley and equitably half the cable on both side of the pulley. Respect the only one rule: 2 full turns around the pulley for the hole close to the ball bearing (blue cable) and 1 full turn for the part of the cable that will go into the hole the closest from the motor (red cable). <p>Tip</p> <p>YOU may need to use the cable , glue it a the tip (2 cm long) on both side. With a plier make 2 times 90 degree angles on the cable at about 3-4 mm from one another. see picture to manage to extract the cable once it passes in between the thread and the neck of the frame. !!!PICTURE NEEDED!!!!</p> <p>Now we proceed with the cabling of the fingers.</p> Pictures step by step guide After wrapping the cable on the pulley as shown before, insert the two cable extremities inside the frame holes for the Index &amp; Middle. For the thumb, the frame holes are designed inclined by 45 deg, therefore the cables will not enter the frame perpendicularly as the previous case. Push the two sides of the cable inside the sheath (+) and (-) for each finger. The 2 sides of the cables should get out: For the Thumb: the cables exit from the base of the finger and enter inside two sheaths. For Index &amp; Middle the cables exit at the base of their respective finger. Final cabling: For the Thumb, pass the cables around the pulley as shown. Start with the blue one. Fix the ends of the cables with a knot. Same procedure for the other fingers and make a knot at the end. FINISHED!!! <p>Tip</p> <p>The final cabling is tricky. First, remember to CLOSE the tensioner of each cable before starting the cabling. If you leave the tensioners open, the cabling will not work. For making the final knot, put a mark on the blue cable and knot it. Slowly turn the motor CCW/CW while pulling the red extremity, ensuring that the cable is correctly running on the motor pulley. When the finger is completely closed pull the red cable and put a mark where the knot will be. Proceed by making the knot the closest to the mark. Finally, you can use the tensioners for removing the slack.</p>"},{"location":"icub_tendons/lower_arm_V2/","title":"HOWTO REPAIR ANY CABLE FROM A FOREARM or HAND - VERSION 2","text":""},{"location":"icub_tendons/lower_arm_V2/#1-lower-arm-version-2","title":"1    LOWER ARM VERSION 2","text":"<p>Let's have an overview of the mechanical CAD from different view angles.</p> Left Forearm V2 Right Forearm V2"},{"location":"icub_tendons/lower_arm_V2/#11-rules-of-thumb-for-a-good-start","title":"1.1 Rules of Thumb for a good start:","text":"<p>1 - Visual inspection (remove the covers - around the forearm and above the hand - and look for broken cables)</p> <p>2 - Identification (which part needs to be repaired)</p> <p>3 - Cleaning and Removing the broken cable</p> <p>4 - Follow the instructions below to repair</p>"},{"location":"icub_tendons/lower_arm_V2/#12-disconnection","title":"1.2 Disconnection","text":"<p>A good question on which people may have when first try to repair the Forearm is: \"Do I need to disconnect the Lower Arm?\"</p> <p>The answer is as follow:</p> What is broken? REMOVING OR NOT distal joint (Thumb, Index, Middle, Ring or Pinkie) NOT necessary every other joint (all proximal, fingers abduction and Thumb oppose ) MANDATORY <p>Please refer to this following link to get know HOWTO disconnect the Lower Arm V2.</p>"},{"location":"icub_tendons/lower_arm_V2/#2-distal-joints","title":"2    Distal Joints","text":"<p>If ever you realize that one of the following cable is broken bear in mind:</p> <p>There are 2 types of distal Joint on this version of the forearm:</p> <ul> <li>The simplest ones - which go inside a motor shaft to get anchored - as soon as the motor is spinning the cable rolls around the pulley and close the joint. Those motors are perfectly identical - only the positions differ :</li> </ul> <p>Thumb, Index &amp; Middle distal joints</p> <ul> <li>The 2 trickiest ones which are actually a double distal joint in one motor.</li> </ul> <p>Ring and Pinkie Fingers</p>"},{"location":"icub_tendons/lower_arm_V2/#21-location","title":"2.1 Location","text":"<p>The first question to answer will be \"Where are those cables located?\"</p> <p>Here is the table to locate all the distal joints on a forearm (left in this case)</p> LOCATION JOINT POSITION Index and Middle they are located ATOP the forearm when it lies palm face DOWN Thumb distal AND Ring and Pinkie They are located ATOP when the forearm lies palm face UP <p>WATCH OUT</p> <p>For the Right forearm : the motor positions are \"mirrored\" respect to the left ones.</p> <p>Motor Rotations and Fingers Movements</p> <p>The arrow represents the sense of rotation to close the finger. It is important, after the cabling, to verify that the finger closes when the motor is rotated according to the respective arrow. You can rotate the motor with a flat screwdriver to do so.</p> RIGHT FOREARM LEFT FOREARM"},{"location":"icub_tendons/lower_arm_V2/#22-wiring","title":"2.2 WIRING","text":""},{"location":"icub_tendons/lower_arm_V2/#221-preparation","title":"2.2.1   Preparation","text":"<p>The minimum requirement to start re-cabling distal joints is:</p> IITCODE Alias Description 2391 U7194561 Stainless steel micro-cable, cable construction 7x19mm, nom. diameter 0.45mm, outer diameter 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH"},{"location":"icub_tendons/lower_arm_V2/#222-knot-creation","title":"2.2.2   Knot Creation","text":"STEP BY STEP GUIDE FOR A GOOD KNOT Start by cutting one piece of 40cm from the cable IITCODE 2391.Make a knot at one extremity. Use 2 pliers to close it hard. The plier closest to the knot is just opened-free to let the cable to run over it but is here to block the knot, the second one pull the cable to tighten the knot. Drop a tear of glue on the knot and dry it. REMOVE the excess with a tissue - double check that the knot is perfectly dry before to proceed. Cut the excess of cable. FINISHED!!!"},{"location":"icub_tendons/lower_arm_V2/#223-wiring-explanation","title":"2.2.3   Wiring Explanation","text":""},{"location":"icub_tendons/lower_arm_V2/#thumb","title":"THUMB","text":"<p>We will proceed by showing you how to re-cable the distal thumb on the LEFT  Forearm - Just be aware that the motors for the RIGHT Forearm are mirrored as per the WATCH OUT above explained.</p> pictures step by step guide 1. Insert the knot until it remains inside the socket of the pulley 2. Just insert the cable inside the hole (red circle) 3. The cable should get OUT from here - BE PATIENT!!! 4. The cable will then run inside the sheath until it reaches the base of the thumb 5. Wire this way 6. Make the final knot - you need to make it very close to the finger nail hole (1-2cm away max) - PLEASE DO NOT USE GLUE ON THE FINAL KNOT 7. Just use a screwdriver to make the thumb start closing YOU ARE DONE!!! CONGRATULATIONS!!! Please close the fingertip and its nail and put back in place the lateral bar <p>WATCH OUT</p> <p>FOR the Right forearm : the motor positions are \"mirrored\" respect to the Left ones.</p>"},{"location":"icub_tendons/lower_arm_V2/#index-or-middle","title":"INDEX or MIDDLE:","text":"<p>We will proceed by showing you how to re-cable both Index distal and Middle finger from the LEFT  Forearm - Just be aware that the motors for the RIGHT Forearm are mirrored as per the WATCH OUT above explained.</p> Pictures step by step guide 1. Insert the knot until it remains inside the socket of the pulley 2. Just insert the cable inside the hole (red circle) 3. The cable should get OUT from here - BE PATIENT!!! 4. The cable will then run inside the sheath until it reaches the base of the Middle or Index (view from the palm side) 5. Wire this way. 6. Please remove the screw holding the nail onto the fingertip - move the fingertip sensor away from the base of the fingertip (1cm away max) 7. Make the final knot - you need to make it very close to the finger nail hole (1-2cm away max) 7. Just use a screwdriver to make the thumb start closing.Just recall to do not force with the screwdriver if the movement looks like stuck, do some rotation clock/counter-clock wise in order to unstuck it. YOU ARE DONE!!! CONGRATULATIONS!!! Please close the fingertip and its nail and put back in place the lateral bar <p>WATCH OUT</p> <p>FOR the Right forearm : the motor positions are \"mirrored\" respect to the Left ones.</p>"},{"location":"icub_tendons/lower_arm_V2/#ring-and-pinkie","title":"RING AND PINKIE:","text":"<p>Note</p> <p>Those fingers need to be done together in order to make sure that both cables close simultaneously.</p> WHERE step by step guide 1. Prepare 2 cables of about 40 cm of IITCODE 2391 and make sure you make the knot as taught above. !!!watch out!!! the 2 holes are a bit off one to another: make sure, with a fat screwdriver, that the pulley is NOT 180 degrees rotated or else the cables could jump one on another during the closing phase. 2. Insert both cables into their respective holes and start wiring as follow. 3. Push the 2 cables in the sheath until they get out from the 2 holes circled. 4. Cable routing.To be able to pass the cable at the base of the nail it is important to remove the nail and move forward the fingertip for 1 cm from its base. picture if possible 5. Please write with a marker at the base of the nails where the knot should be in order to have a perfect simultaneous closing for both fingers. 6. finally make the knot -  - PLEASE DO NOT USE GLUE <p>Tip</p> <p>The insertion of the cables into their holes, passing through the pulleys, is tricky. If you are struggling, cut the cable extremity with a 45 deg angle, so it will be easier for it to get in position.</p>"},{"location":"icub_tendons/lower_arm_V2/#3-proximal-joints","title":"3    Proximal Joints","text":""},{"location":"icub_tendons/lower_arm_V2/#31-location","title":"3.1 location","text":"LEFT FOREARM RIGHT FOREARM <p>If you ever realize that one of the following cable is broken bear in mind:</p> <p>Tip</p> <p>The start of the wiring for each proximal is identical (wiring around the motor pulley). The index and middle proximal joints are cabled exactly the same way, just the thumb is a bit trickier.</p>"},{"location":"icub_tendons/lower_arm_V2/#32-wiring","title":"3.2 WIRING","text":""},{"location":"icub_tendons/lower_arm_V2/#321-preparation","title":"3.2.1   Preparation","text":"<p>The minimum requirement to start re-cabling the proximal joints is:</p> IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316"},{"location":"icub_tendons/lower_arm_V2/#322-cabling-the-motor-pulley","title":"3.2.2   Cabling the Motor Pulley","text":"LOCATION step by step guide Take 1 meter of IITCODE 1815. Turn the pulley in order to have the threads already facing (pointing toward) the holes inside the pink frame and the hole inside the pulley itself lying at horizontal. Insert the cable inside the pulley and equitably half the cable on both sides of the pulley. In order to differentiate the two cable parts, we will call them red and blue.  !!!TIP!!! In order to keep in position the cable  split in two halves, pull it like shown in the last pic Respect the only one rule: 2 full turns around the pulley for the hole close to the ball bearing (blue cable) and 1 full turn for the part that will go into the hole the closest from the motor (red cable).  In order to keep the cable in position after the turns, you can push it with a screwdriver like shown in this last picture <p>Tip</p> <p>YOU may need to glue the cable at the tip (2cm long) on both sides. With a plier make 2 times 90 degree angles on the cable at about 3-4mm from one another, in order to create a hook. Extract the cable once it passes between the thread and the neck of the frame. </p> <p>Tip</p> <p>When inserting the cable in the pulley, make sure that the pulley holes are in phase with the frame holes. In other words, the pulley threads need to be aligned with the 2 holes in the frame. </p> LOCATION step by step guide !!!!WARNING!!! the cabling for the thumb passes first by a pair of pulleys before returning to a perfectly identical cabling as Index and Middle. After wrapping the cable on the pulley, insert the 2 cable extremities inside the frame holes. For the thumb, the frame holes are designed inclined by 45 deg. Push the 2 sides of the cable inside the sheath (+) and (-) for each finger. The 2 sides of the cables should get out: For the THUMB only: the cabling for the thumb passes first by a pair of pulleys before returning to a perfectly identical cabling as Index and Middle, as shown below. For all the proximal joints the final cabling starts at the base of their respective finger. Cable as follow and block each side of the cable with the nut screw M1.6x3 Tense each side of the cable by releasing the nut screw and pinch and rotate. Close the nut screw. Make a knot at the base of the cable exit, a little further away from it (\u00b15 mm) AND keep in mind that the knot will have to remain in the slot. FINISHED!!! <p>Danger</p> <p>PLEASE DO NOT USE GLUE ON THE FINAL KNOT</p>"},{"location":"icub_tendons/neck/","title":"NECK V2","text":"<p>Here is the table showing the visual differences in between the First version of the iCub neck and the updated version 2 neck (NECK V2)</p>  Neck V1 - First 2 DOFs   Neck V2 - First 2 DOFs  <p>The second release of the neck has 2 tendons and two differential joints to actuate the first 2 DoFs of the neck compared to the 2 serial joints of the previous version of the neck (V1).</p> <p>It makes it more robust, powerful and reliable.</p>"},{"location":"icub_tendons/neck/#1-mechanical-assembly-of-the-2-tendons","title":"1    Mechanical assembly of the 2 tendons:","text":"<p>Fast Forward</p> <p>If you already have a spare tendon from your maintenance kit please jump to 2</p> <p>Prepare 2 cables with the components and specifics described below: </p> IITCODE Alias Descption 1001 U0778110 Stainless steel microcable, cable construction 7x7mm - (Coated ext 1.0 mm / core 0.81 mm) - CARL STAHL GMBH 2717 RC_IIT_010_P_064 D ext/int = 2.4 mm/0.85 mm - length 3.5 mm -- material X5CrNiMo1712-AIS1316 <p>Head CABLE \u201cA\u201d: IITCODE: 5965 -- Alias: RC_IIT_019_G_018.</p> <p> </p> <p>Head CABLE \u201cB\u201d: IITCODE: 5964 -- Alias : RC_IIT_019_G_017.</p> <p> </p> <p>Note that the \u201cX\u201d marks in the picture above is the area where the Teflon coating needs to be peeled off.</p> <p>All dimensions are in mm.</p>"},{"location":"icub_tendons/neck/#2-mounting-procedure","title":"2    Mounting Procedure","text":""},{"location":"icub_tendons/neck/#21-block-version-identification","title":"2.1 Block version identification","text":"Where yields the difference Cable Block 1 Cable Block 2 Tightening System 2 nut screws M2.5x2.5 + Plate 2 screws M2x3"},{"location":"icub_tendons/neck/#22-rules-of-thumb-rot-for-a-perfect-start","title":"2.2 Rules of Thumb (RoT) for a Perfect START:","text":"<p>Blocking</p> <p>Always block the cable in the peeled off Teflon section.</p> <p>Positioning</p> <p>The longest part of the cable should be facing toward the front of the robot and vice-versa the shortest part should be pointing toward the rear of the robot.</p> <p>Releasing</p> <p>Make sure that all tensioners are fully opened.</p> <p>Tip</p> <p>To block the cable with Cable Block 1 do the following:</p> <p>1- Insert the little plate by the front of the neck and push it with any little tool in order to put it in the middle of the throat</p> <p>2- Make sure the nut screws are already placed in their hole for one turn in their thread.</p> <p>3- Use a magnet to lift it up in the excavation in the middle of the throat. (see picture below).In this way the throat is free to receive the cable.</p> <p>4- Insert the cable and use the 2 nut screws (M2.5x2.5) to press the metallic plate above the cable.</p> <p>5- Check that the cable firmly remains in position even if pulling the cable out.</p> <p></p>"},{"location":"icub_tendons/neck/#23-route-cable-a","title":"2.3 Route Cable \u201dA\u201d","text":"<p>Start with the longest part of the cable which rolls around the main pulley and turn around the pulley (2) to finally rolls around pulley (3). Use pulley Y to both tense and give more slack to the cable to put the crimp the head of the crimp into the lower tensioner. once tense on side of the cable simply turn around pulley (1) the other side of the cable for a \u00be turn and finally insert the crimp onto the lower tensioner of the pulley (4). </p>"},{"location":"icub_tendons/neck/#24-route-cable-b","title":"2.4 Route Cable \u201cB\u201d","text":"<p>Follow the diagram   above to rewire cable B in the same way as cable A but using the pulley X.</p>"},{"location":"icub_tendons/neck/#25-final-tensioning","title":"2.5 Final Tensioning","text":"<p>Adjust the tension of both cables with the 4 tensioners. 1 and 2 for Cable A,    3 and 4 for Cable B</p>"},{"location":"icub_tendons/remove/","title":"DISCONNECTION V1 AND V2","text":""},{"location":"icub_tendons/remove/#1-lower-arm-v1","title":"1 LOWER ARM V1","text":""},{"location":"icub_tendons/remove/#11-do-i-need-to-disconnect-the-lower-arm-version-1","title":"1.1 DO I NEED TO DISCONNECT THE LOWER ARM VERSION 1?","text":"<p>The answer is :</p> <p>It depends the problem you encounter, Please refer to the table below to find out either you need or not to disconnect the lower arm</p> what is broken? REMOVING OR NOT distal joint (Thumb, Index, Middle, Ring or Pinkie distal joints) NOT necessary every other joint (all proximal joints, fingers abduction, Thumb oppose and Ring and Pinkie finger motor joint) MANDATORY"},{"location":"icub_tendons/remove/#12-how-do-i-operate-4-lower-arm-v1","title":"1.2 HOW DO I OPERATE 4 LOWER ARM V1?","text":"<ul> <li> Skin biceps removal - leave the 3 lateral internal screws so the skin can hang on</li> <li> Biceps back cover removal - lateral screws and 3 triceps screws</li> <li> Disconnect skin</li> <li> Disconnect the MC4 connections</li> <li> remove the 3 screws holding the Lower ARM to the elbow</li> </ul> Pictures Skin biceps removal  1  Skin biceps removal  2  Skin biceps removal 3  Biceps back cover removal  1  Biceps back cover removal 2 - skin is hanging   Biceps back cover removal 3  Disconnect skin 1 Disconnect MC4 connections 1  Disconnect MC4 connections 2  Disconnect MC4 connections 3  Remove final 3 screws"},{"location":"icub_tendons/remove/#2-lower-arm-v2","title":"2 LOWER ARM V2","text":""},{"location":"icub_tendons/remove/#21-do-i-need-to-disconnect-the-lower_arm-v2","title":"2.1 DO I NEED TO DISCONNECT THE LOWER_ARM V2?","text":"<p>The answer is :</p> <p>It depends the problem you encounter, Please refer to the table below to find out either you need or not to disconnect the lower arm</p> what is broken? REMOVING OR NOT distal joint (Thumb, Index, Middle, Ring or Pinkie) NOT necessary every other joint (all proximal joints, fingers abduction and Thumb oppose ) MANDATORY"},{"location":"icub_tendons/remove/#22-how-do-i-operate-for-lower-arm-v2","title":"2.2 HOW DO I OPERATE FOR LOWER ARM V2?","text":"<ul> <li> Front skin biceps removal</li> <li> Biceps front cover removal - lateral screws and 4 screws</li> <li> Back skin biceps removal</li> <li> Biceps back cover removal</li> <li> Disconnect skin</li> <li> Lower part of the upper arm cover removal -  remove lateral screws and disconnect skin</li> <li> Remove the 4 screws holding the L shape MC4-PLUS pack of boards</li> <li> Disconnect the MC4-PLUS connections</li> <li> Remove the 3 screws holding the Lower ARM to the elbow</li> </ul> Pictures Front skin biceps removal  1 Front skin biceps removal  2 Biceps  front cover removal  1 Biceps front cover removal  2 Biceps front cover removal 3  Back skin biceps removal  Biceps back cover removal  Disconnect skin 1 Disconnect skin 2  Remove 4 screws holding the L-shape piece  Disconnect MC4-PLUS connections  Remove final 3 screws"},{"location":"icub_tendons/shoulder_elbow/","title":"Shoulder &amp; Elbow","text":"<p>This chapter describes the wiring procedure for the cables of the shoulders and elbows, for every version of iCub made from version 1 to version 2.5, either in mounting phase or during a maintenance.</p>"},{"location":"icub_tendons/shoulder_elbow/#1-cable-construction","title":"1    Cable Construction","text":"![ICUB_SHOULDER_cables_all](img/shoulder/ICUB_SHOULDER_cables_all.png)  1  : length 272 mm - Diam. 1.5/1.75  2  : length 256 mm - Diam. 1.5/1.75  3  : length 279 mm - Diam. 1.5/1.75   4  : length 250 mm - Diam. 1.5/1.75  5  : length 235 mm - Diam. 1.5/1.75  6  : length 136 mm - Diam. 1.5/1.75  7  : length 163 mm - Diam. 1.2/1.50  8  : length 121 mm -  Diam. 1.2/1.50  9  : length 110 mm - Diam. 1.2/1.50  10: length 154 mm - Diam. 1.2/1.50 <p>Cables from 1 to 6 are RC_IIT_019_G_00X - X from 1 to 6 - each made of U7191517 (IITCODE 2390) with different lengths (see the list above) and 2 crimps RC_TLR_003_P_101 (IITCODE 3492). The assembly resulting cable can be purchased from with IITCODE from 4758 to 4763.</p> IITCODE Alias Description 4758 RC_IIT_019_G_001 SHOULDER ROTATION CABLE 1 4759 RC_IIT_019_G_002 SHOULDER ROTATION CABLE 2 4760 RC_IIT_019_G_003 SHOULDER ROTATION CABLE 3 4761 RC_IIT_019_G_004 SHOULDER ROTATION CABLE 4 4762 RC_IIT_019_G_005 SHOULDER ROTATION CABLE 5 4763 RC_IIT_019_G_006 SHOULDER ROTATION CABLE 6 2390 U7191517 Stainless steel microcable, cable construction 7x19mm, nom. dia 1,5mm, outer dia 1,75mm, Polyamide coated, AISI 316 - CARL STAHL GMBH 3492 RC_TLR_003_P_101 Thimble for cable 1.75mm (Diam int/ext/L 1.6/4.6/6 mm) - material X5CrNiMo1712 - AISI 316 1895 IIT_003_P_006_00 LEFT PULLEY - CRIMP COVER 1896 IIT_003_P_007_00 RIGHT PULLEY - CRIMP COVER <p>For Cable 7-8-9-10 measures see above (respectively IITCODE from 13736 to 13739). Alternatively you could build your own, made from U7191215 (IITCODE 2389) and 2 crimps (IITCODE 3877) BUT note that it is really important to shrink down to 4mm the crimp that will be inside the tensioner holder</p> IITCODE Alias Description 13736 RC_IIT_019_G_029 U7191215/SE000094 - 163mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 13737 RC_IIT_019_G_030 U7191215/SE000094 - 121mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 13738 RC_IIT_019_G_031 U7191215/SE000094 - 110mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 13739 RC_IIT_019_G_032 U7191215/SE000094 - 154mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 2389 U7191215 Stainless steel microcable, cable construction 7x19mm, nom. dia 1,2mm, outer dia 1,5mm, Polyamide coated, AISI 316 - CARL STAHL GMBH 3877 RC_TLR_005_P_101 Thimble for cable Dia 1.5mm (Inner dia 1.25mm) <p>The cabling sequence for the shoulder is the following:</p> <p>(1 - 2) - (3 - 4) - (8 - 7) - (6 - 5)</p>"},{"location":"icub_tendons/shoulder_elbow/#2-left-shoulder","title":"2    Left Shoulder","text":"<p>Rules for a good start</p> <p>1.Always remove the broken cable</p> <p>2.Pay attention of putting the tensionner upside down so that the crimp does not exit</p> <p>3a.Keep in Mind that the shoulder is a set of 4 pairs of antagonistic cables : (1-2), (3-4), (8-7), (6-5)</p> <p>3b.And by so,to put back in place one pair of cable you need to make sure that the tensioners for both cables are loose</p> Block of pulleys Tensioner fully opened Cavity of the tensioner hidden - crimp can't escape"},{"location":"icub_tendons/shoulder_elbow/#21-left-shoulder-rotation-cable-1-and-2","title":"2.1 Left Shoulder Rotation Cable 1 and 2","text":"<p>If you have to repair cable 1 and/or cable 2, it is convenient to first:</p> <ol> <li>Remove the chest cover (follow this procedure) in order to have better access to the pulleys</li> <li>Loose also the cables 5-6-7-8 in order to easily turn the pulleys of cables 1&amp;2 and thus tension them</li> <li>Tension cables 1 and 2, attach the other cables and finally tension them</li> </ol> <p>In order to access the tensioners of cables 1 and 2, you have to remove the small metal cover on both pulleys, as shown below, by unscrewing the M2x5 screw holding them:</p> Tensioner cover Tensioner cover CAD model <p>Let's see the cabling of tendons 1 &amp; 2 in detail:</p> <p></p> <p>Follow the diagram above to route the cable N1. Once the head of the crimp reach the small pulley. Add atop of it the left crimp cover in ABS (IIT CODE: 1895)</p> Crimp cover above the small pulley Left crimp cover <p>Danger</p> <p>You need to remove both tensioners of cable 2 and 3 in order to change one of them - meaning re-cabling pairs (1-2) and (3-4)</p> <p>Route cable N2 as per the diagram above.</p> <p>Now you can tense both screws for tension cable 1 and 2</p> <p>Tip</p> <p>Do cycles of 5 turns for each screws in order to find an equal tensioning</p> <p>Make sure you face the crimps as shown below before tensioning, in order to have access to them. The down pulley should be rotated like shown:</p>"},{"location":"icub_tendons/shoulder_elbow/#22-left-shoulder-elevation-cable-3-and-4","title":"2.2 Left Shoulder Elevation Cable 3 and 4","text":"<p>As per cable N1, just route cable N3 following the diagram above and prevent the crimp from escaping by adding the left cover crimp (IITCODE : 1895)</p> <p>Route cable N4 as per the diagram above.</p> <p>Now you can tense both screws for tension cable 3 and 4</p> <p>Tip</p> <p>Do cycles of 5 turns for each screws in order to find an equal tensioning</p>"},{"location":"icub_tendons/shoulder_elbow/#important-notes-for-cable-from-8-to-5","title":"IMPORTANT NOTES for Cable from 8 to 5VERSION 1VERSION 2","text":"<p>From cable 8 to 5</p> <p>To mount the cables 8 - 7 - 6 - 5, it is important to start with all of them already disconnected. You   first need to replace the broken cable(s) by starting to enter the head crimp   (4mm size \u2013 smaller one or ball crimp) of the cable 7 and 8 inside their respective   tensioner. You will need later to start wiring cable 7 and 8 in their future   path BUT to do so it is necessary to create SPACE FOR THE CRIMPS TO PASS.</p> <p>There are 2 designs for the   shoulder so it is necessary to see the difference in between both of them to know how to untighten the good pieces and screws to create that SPACE</p> ![ICUB-SHOULDER](./img/shoulder/ICUB_SHOULDER_LEFT_Cable_5-6-7-8.png) <ol> <li>Remove the beige pulley (remove the 4 screws M2x12) until you don't remount cable 5</li> <li>Reach the 2 screws M4x12 on the green pulley and just untighten them until you can pass both crimp 8 and 7 following the routing explain below.</li> <li>Close the gap in order to prevent the cables 8 and 7 to exit - tighten the 2 screws M4x12</li> <li>Start wiring</li> </ol> <p></p> <ol> <li>Loose the the 2 screws M4x12 to slide a bit the block of 2 pulleys (grey and yellow) to give space until you can pass both crimp 8 and 7 following the routing explain below.</li> <li>Close the gap in order to prevent the cables 8 and 7 to exit - tighten the 2 screws M4x12</li> <li>Start wiring</li> </ol>"},{"location":"icub_tendons/shoulder_elbow/#23-left-shoulder-elevation-cable-8-and-7","title":"2.3 Left Shoulder Elevation Cable 8 and 7","text":"<p>In order to insert these cables, you need to turn the 2 pulleys and align the teeth as shown in the picture above.</p> <p>Once both crimps jumped over the 2 teeth holding the crimp in position - you can start tightening the screws of the tensioners 7 and 8.</p>"},{"location":"icub_tendons/shoulder_elbow/#24-left-shoulder-elevation-cable-6-and-5","title":"2.4 Left Shoulder Elevation Cable 6 and 5","text":"<p>Those 2 cables are quite straight forward to mount, just follow the 2 following pictures.</p> ![ICUB-SHOULDER](img/shoulder/ICUB_SHOULDER_LEFT_Cable_6.png) ![ICUB-SHOULDER](img/shoulder/ICUB_SHOULDER_LEFT_Cable_5.png) <p>Once both crimps jumped over the 2 teeth holding the crimp in position you can start tightening the screws of the tensioners 6 and 5.</p>"},{"location":"icub_tendons/shoulder_elbow/#3-left-elbow-cabling","title":"3    Left Elbow cabling","text":"<p>Those 2 cables are not specifically difficult to route but unfortunately you need to operate cautiously to do NOT damage the electronical boards located beneath the upper arm.</p> <p></p> <p>Warning</p> <p>EITHER you remove the Lower Arm by Following the instructions for Lower Arm V1 or Lower Arm V2 OR You are helped by someone else to hold the Lower Arm (Forearm + Hand).</p> ![ICUB_ELBOW](img/shoulder/ICUB_Elbow_LEFT_Cable_9-10.png) <p>Rules of routing</p> <ol> <li>Remove the lower part of the upper arm cover if  NOT done yet<ol> <li>Remove the lateral plate (the ONE with NO sensor) by unmounting the 2 screws holding it.</li> <li>Turn the main shaft by the help of a screw driver to apply enough torque to make it spin, until you reach the same situation as the pictures above (this is the view from below of the elbow)</li> <li>Replace the broken cable(s) by starting to enter the head crimp   (4mm size \u2013 smaller one or ball crimp) of the cable 9 and 10 inside their respective tensioner.</li> <li>Pass both heads of crimp before reattaching the Lateral Plate.</li> <li>Position the head of crimp in their socket</li> <li>start tightening the screws of both tensioner.</li> </ol> </li> </ol>"},{"location":"icub_tendons/shoulder_elbow/#4-right-shoulder","title":"4    Right Shoulder","text":"<p>Advice</p> <p>Take  look at the beginning of this web page to have all the information related to the dimensions of cables and how to get or build them.</p> <p>The cabling sequence for the shoulder is the following:</p> <p>(1 - 2) - (3 - 4) - (8 - 7) - (6 - 5)</p> <p></p> <p>Rules for a good start</p> <p>1.Always remove the broken cable</p> <p>2.Pay attention of putting the tensionner upside down so that the crimp dont exit</p> <p>3a.Keep in Mind that the shoulder is a set of 4 pairs of antagonistic cables : (1-2), (3-4), (8-7), (6-5)</p> <p>3b.And by so,to put back in place one pair of cable you need to make sure that the tensionner for both cables are loose</p> Block of pulleys Tensionner fully opened Cavity of the tensionner hidden - crimp can't escape"},{"location":"icub_tendons/shoulder_elbow/#41-right-shoulder-rotation-cable-1-and-2","title":"4.1 Right Shoulder Rotation Cable 1 and 2","text":"<p>If you have to repair cable 1 and/or cable 2, it is convenient to first:</p> <ol> <li>Remove the chest cover (follow this procedure) in order to have better access to the pulleys</li> <li>Loose also the cables 5-6-7-8 in order to easily turn the pulleys of cables 1&amp;2 and thus tension them</li> <li>Tension cables 1 and 2, attach the other cables and finally tension them</li> </ol> <p>In order to access the tensioners of cables 1 and 2, you have to remove the small metal cover on both pulleys, as shown below, by unscrewing the M2x5 screw holding them:</p> Tensioner cover Tensioner cover <p>Let's see the cabling of tendons 1 &amp; 2 in detail:</p> <p></p> <p>Follow the diagram above to route the cable N1. Once the head of the crimp reach the small pulley. Add atop of it the right crimp cover in ABS (IIT CODE: 1896)</p> Crimp cover above the small pulley Right crimp cover <p>Danger</p> <p>You need to remove both tensioner of cable 2 and 3 in order to change one of them - meaning re-cabling pairs (1-2) and (3-4)</p> <p> </p> <p>Route cable N2 as per the diagram above.</p> <p>Now you can tense both screws for tension cable 1 and 2</p> <p>Tip</p> <p>Do cycles of 5 turns for each screws in order to find an equal tensioning</p> <p>Make sure you face the crimps as shown below before tensioning, in order to have access to them. The down pulley should be rotated like shown:</p>"},{"location":"icub_tendons/shoulder_elbow/#42-right-shoulder-elevation-cable-3-and-4","title":"4.2 Right Shoulder Elevation Cable 3 and 4","text":"<p>As per cable N1, just route cable N3 following the diagram above and prevent the crimp from escaping by adding the right cover crimp (IITCODE : 1896)</p> <p>Route cable N4 as per the diagram above.</p> <p>Now you can tense both screws for tension cable 3 and 4</p> <p>Tip</p> <p>Do cycles of 5 turns for each screws in order to find an equal tensioning</p>"},{"location":"icub_tendons/shoulder_elbow/#important-notes-for-cable-from-8-to-5_1","title":"IMPORTANT NOTES for Cable from 8 to 5VERSION 1VERSION 2","text":"<p>From cable 8 to 5</p> <p>To mount the cables 8 - 7 - 6 - 5, it is important to start with all of them already disconnected. You   first need to replace the broken cable(s) by starting to enter the head crimp   (4mm size \u2013 smaller one or ball crimp) of the cable 7 and 8 inside their respective   tensioner. You will need later to start wiring cable 7 and 8 in their future   path BUT to do so it is necessary to create SPACE FOR THE CRIMPS TO PASS.</p> <p>There are 2 designs for the   shoulder so it is necessary to see the difference in between both of them to know how to untighten the good pieces and screws to create that SPACE</p> ![ICUB-SHOULDER](./img/shoulder/ICUB_SHOULDER_RIGHT_V1.png) <ol> <li>Remove the beige pulley (remove the 4 screws M2x12) until you don't remount cable 5</li> <li>Reach the 2 screws M4x12 on the green pulley and just untighten them until you can pass both crimp 8 and 7 following the routing explain below.</li> <li>Close the gap in order to prevent the cables 8 and 7 to exit - tighten the 2 screws M4x12</li> <li>Start wiring</li> </ol> <p></p> <ol> <li>Loose the the 2 screws M4x12 to slide a bit the block of 2 pulleys (grey and yellow) to give space until you can pass both crimp 8 and 7 following the routing explain below.</li> <li>Close the gap in order to prevent the cables 8 and 7 to exit - tighten the 2 screws M4x12</li> <li>Start wiring</li> </ol>"},{"location":"icub_tendons/shoulder_elbow/#43-right-shoulder-elevation-cable-8-and-7","title":"4.3 Right Shoulder Elevation Cable 8 and 7","text":"<p>Once both crimps jumped over the 2 teeth holding the crimp in position - you can start tightening the screws of the tensioners 7 and 8.</p>"},{"location":"icub_tendons/shoulder_elbow/#44-right-shoulder-elevation-cable-6-and-5","title":"4.4 Right Shoulder Elevation Cable 6 and 5","text":"<p>Those 2 cables are quite straight forward to mount, just follow the 2 following pictures.</p> ![ICUB-SHOULDER](img/shoulder/ICUB_SHOULDER_RIGHT_Cable_6.png) ![ICUB-SHOULDER](img/shoulder/ICUB_SHOULDER_RIGHT_Cable_5.png) <p>Once both crimps jumped over the 2 teeth holding the in position you can start tightening the screws of the tensioners 6 and 5</p>"},{"location":"icub_tendons/shoulder_elbow/#5-right-elbow-cabling","title":"5    Right Elbow cabling","text":"<p>Those 2 cables are not specifically difficult to route but unfortunately you need to be cautious to proceed undamaging the electronical board located beneath the upper arm.</p> <p></p> <p>Warning</p> <p>EITHER you remove the Lower Arm by Following the instructions for Lower Arm V1 or Lower Arm V2</p> <p>OR You are helped by someone else to hold the Lower Arm.</p> ![ICUB_ELBOW](img/shoulder/ICUB_Elbow_RIGHT_Cable_9-10.png) <p>Rules of routing</p> <ol> <li>Remove the lower part of the upper arm cover if  NOT done yet<ol> <li>Remove the lateral plate (the ONE with NO sensor) by unmounting the 2 screws holding it.</li> <li>Turn the main shaft by the help of a screw driver to apply enough torque to make it spin, until you reach the same situation as the pictures above (this is the view from below the elbow)</li> <li>Replace the broken cable(s) by starting to enter the head crimp   (4mm size \u2013 smaller one or ball crimp) of the cable 9 and 10 inside their respective tensioner.</li> <li>Pass both heads of crimp before reattaching the Lateral Plate.</li> <li>Position the head of crimp in their socket</li> <li>start tightening the screws of both tensioner.</li> </ol> </li> </ol>"},{"location":"icub_tendons/waist_legs/","title":"Waist, Stand Locker and Legs Cabling Manual","text":""},{"location":"icub_tendons/waist_legs/#1-cable-construction","title":"1    Cable construction","text":"![waist](./img/waist/cables_all.png)  11  : length 709 mm - Diam. 1.5/1.75  12  : length 488 mm - Diam. 1.5/1.75  13  : length 630 mm - Diam. 1.5/1.75   14  : length 729 mm -  Diam. 1.5/1.75   15  : length 450 mm -  Diam. 1.5/1.75   16  : length 530 mm -  Diam. 1.5/1.75   29  : length \u00a0\u00a023 mm - Diam. 1.5/1.75  <p>Each cable from the list above is made of U7191517 (IITCODE 2390) with its belonging lengths and 2 crimps RC_TLR_003_P_101 (IITCODE 3492).</p> IITCODE Alias Description 2390 U7191517 Stainless, cable construction 7x19mm, Polyamide coated - CARL STAHL GMBH 3492 RC_TLR_003_P_101 Thimble for cable 1.75mm (Diam int/ext/L 1.6/4.6/6 mm) - material X5CrNiMo1712-AISI316 <p>Alternatively, each cable can be seen as an assembly with its respective IITCODE and alias taken from CAD named RC_IIT_019_G_0XX - where XX is number from 11 to 16.</p> IITCODE Alias Revision Description 4768 RC_IIT_019_G_011 1 WAIST BACK CABLE 11 4769 RC_IIT_019_G_012 1 WAIST FRONT CABLE 12 4770 RC_IIT_019_G_013 1 WAIST TOP CABLE 13 4771 RC_IIT_019_G_014 1 HIP FLEXION CABLE 14 4772 RC_IIT_019_G_015 1 ANKLE FLEXION CABLE 15 6377 RC_IIT_019_G_016 1 ANKLE FLEXION V2 CABLE 16 <p>Cable 29 instead is aliased RC_IIT_090_G_005. At the moment this cable is home-made.</p>"},{"location":"icub_tendons/waist_legs/#2-waist","title":"2    WAIST","text":"<p>This chapter describes the steps required for the wiring of the cables 11 - 12 - 13 which allow the movement of the waist of the robot, both during construction and in maintenance/repair phase.</p> <p>VERY IMPORTANT NOTE</p> <p>If you have only the cable 12 broken please proceed directly to 2.3</p> <p>Whatever the other cases of figure you run into, the only way to substitute/replace the broken cables is to follow the next steps.</p>"},{"location":"icub_tendons/waist_legs/#21-chest-back-and-back-pack-covers-dismounting","title":"2.1 CHEST, BACK and BACK PACK COVERS DISMOUNTING","text":"<p>A - CHEST cover removal</p> pictures step by step guide STEP 1:remove the 6 screws M2x5 (red arrows) (3 on each side of the skin patch of the chest cover)If you do not have skin on torso cover go on to the next step.STEP 2:flip over the skin in order to access the 2 screws beneath it.Remove the 2 screws M3x6STEP 3:hold the chest cover and remove the 2 crews M3x8 at the level of the shoulder (green circles) pictures of the connector STEP 4:disconnect the the electrical cable connecting the robot to the skin board inside the coverIf you do not have skin on torso cover go on to the next step. <p>depending of your version you will need to move sideways the back cover or the backpack. version without backpack</p> <p>B1 - NO BACKPACK VERSION</p> pictures step by step guide STEP 1:Unscrew the power cord on the back of iCub (black circle)STEP 2:Remove the 2 ring screws (green circles)STEP 3:remove the 4 screws M3x6 to be able to move sideways the back cover <p>B2 - BACKPACK VERSION</p> pictures step by step guide picture of robot with connections STEP 1: disconnect the overall cables attached to the back pack -&gt; STEP 2:remove the top cover of the back packsome version have a screw in the yellow circle some just a magnetIf you have the version with the screw - remove it and just flip the cover and you are done. STEP 3:Either you use the real battery pack-&gt; untighten the 2 lateral screwsor the dummy battery pack-&gt; remove the 2 lateral screw M2.5x10. STEP 4:slide the 2 two pieces and remove them STEP 5:remove the buttons' cache by unmounting the screw M2x6 STEP 6:loose the 2 screws M2.5x8 holding the switches/ethernet board and push it inwards!!!NEED PICTURE TO SHOW THAT!!! STEP 7:On the previous mention board, try to pop out the stand-off above the 2 push buttons.they will be in the way when we will try to remove the backpack cover later on, we may break them if remove wrongly STEP 8:remove the 4 screws (red circles) holding the back pack in place.NECK : 2 screws M3x8bottom back pack cover : 2 screws M3x12Theoretically, you should already have removed the 2 ring screwsbut if you forget, please do it now!! STEP 9:remove the backpack watch out!!! STEP 10:disconnect the 3 connectors (2 on switch board - to drive the 2 fans atop the backpack- and 1 on power board to drive the fans on the right side of the backpack) STEP 11:cut the tie wrap -&gt; the back cover can be left away until we will need to remount it STEP 12:remove the 4 screws holding the battery pack holder.2 screws M3x8 (yellow circle)2 screws M3x6 (red circle)!!! the battery pack holder can move almost freely from now on !!! <p>YOU would probably asking me why did we need to remove all of this for? And the answer is that unfortunately the cover are preventing us for either tense the cables or access to some pieces.</p> <p>IF YOU HAVE **ONLY**CABLE 13 BROKEN JUST GO DIRECTLY HERE</p> <p>C - remove the back pulley</p> <p>Watch</p> <p>once the pulley or one side of the cable 13 is removed the rotation of the torso is totally free, someone else help is more than appreciated to hold it firmly the robot in this process.</p> what we have what we want pictures step by step guide STEP 1:loose the screws inside of the tensionersto get some slack on the cable.You should be able to make he cable jump around the STEP 2:You should be able to make the cable jump over the pulley STEP 3:Remove the central screw of this pulley RC_TLR_001_P_243 STEP 4:Use 2 fat flat screwdrivers to make the pulley popping up.-&gt; photo needed <p>D- create the require space</p> pictures step by step guide In order to change the cable 11,  it is necessary, when you still have the upper body attached to the robot  to create some space in between those 2 pieces to be able to fit the cable that you need to replace. STEP 1:Remove the central piece which will hold the cable 11. 4 screws M2.5v5 STEP 2:Untighten just enough to have 2mm gap in between the head screw and the plate STEP 3:Untighten just enough to have 2mm gap in between the head screw and the plate STEP 4:You should be able to move slightly the upper bodyfrom the torso and create some space (2mm max - just the minimum required to pass the body of the cable in between the 2 pieces)."},{"location":"icub_tendons/waist_legs/#22-waist-back-cable-11","title":"2.2 WAIST BACK - Cable 11","text":"![waist](./img/waist/Waist_cable_11.png) <p>Warning</p> <p>routing cable 11 is quite simple in process of construction because you don't have yet the upper body mounted atop of the waist BUT become particularly tedious in phase of repair due to the presence of this latter. If you haven't removed the cover above the torso and the back (or backpack cover), please follow this link</p> <p>How to lock securedly the crimp: when you finalize your wiring it is important to realize that the tensioners are actually designed to prevent the crimp from escaping. As most of the cable inside the robot use the property of antagonism cabling it is important to have them both firmly tighten.</p> <p>Rule</p> <p>The crimp is always rotated upside down in order to prevent the crimp cable from popping out. The drawback of this positioning is that you always need to remove both tensioner and the screw to leave the crimp getting in the through and put back the tensioner above it to finalize the wiring.</p> ![waist](./img/waist/crimp_locking.jpg) <p>Procedure:</p> <p>Take the cable and draw with a marker the middle of it. Place the cable onto the slot of the pulley (Photo 1). Put the squared plate above the cable and secure it with 4 screws with hexagonal head size M2.5x5 (Photo 2)</p> <p></p> <p>Warning</p> <p>For people having the upper body still hanging CLOSE the gap </p> <p>Turn the cable around the pulley taking care to cross it at the opposite side of the plate (Photo 3 - 4).</p> ![waist](./img/waist/Waist_cable_11_foto3_4.png) <p>Each side of the cable go up and pass into the little side pulley (Photo 5 - 6)</p> <p>Tip</p> <p>Use a 2mm hexagonal screwdriver to spin the motor shaft (Photo N.9)  - on both sides of iCub hips - allowing you to rotate the internal pulley (where yield the tensioners) and have it in a proper angle.</p> ![waist](./img/waist/Waist_cable_11_foto5_6.png) <p>To finish the wiring, position the head of the crimps inside their respective tensioners on both side of the inner part of the hips (Photo 7 - 8). Please use the rule for a proper locking of the crimp link</p> ![waist](./img/waist/Waist_cable_11_foto7_8.png) <p>To bring the joint a proper position to start correctly the routing of cable 12, please use the head screw inside the hips (Photo 9) simultaneously or one hip at a time by few degree every now and then. To arrive on the position (Photo 10)</p> ![waist](./img/waist/Waist_cable_11_foto9-10.png)"},{"location":"icub_tendons/waist_legs/#23-waist-front-cable-12","title":"2.3 WAIST FRONT \u2013 Cable 12","text":"![waist](./img/waist/Waist_front.PNG) <p>Procedure:</p> <p>Take the cable and draw with a marker the middle of it. Place the cable into the slot of the pulley (Photo 12)</p> ![waist](./img/waist/Waist_cable_11_foto11-12.png) <p>Put the rectangular plate above the cable and secure it with 4 screws M2.5x5 hexagonal head (Photo 13). Turn the cable around the pulley taking care to cross the cable above the pulley (Photo 14).</p> ![waist](./img/waist/Waist_cable_11_foto13-14.png) <p>To finish the wiring, position the head of the crimps inside their respective tensioners on both side of the inner part of the hips (Photo 15 - 16). Please use the rule for a proper locking of the crimp link</p> ![waist](./img/waist/Waist_cable_11_foto15-16.png) <p>Finally, To put an end to the wiring of cable 11 and 12, just tense the 4 tensioners on which the crimps are located. Take care of tensing every one of them little by little in order to share the tension inside the tensioners in the same way.</p> ![waist](./img/waist/Waist_cable_foto17.png) <p>At this point, the cables of the wiring of the waist 11 and 12 is terminated and therefore it is possible to proceed with the positioning of the upper body above the latter.</p>"},{"location":"icub_tendons/waist_legs/#24-waist-top-cable-13","title":"2.4 WAIST TOP \u2013 Cable 13","text":"![waist](./img/waist/Waist_top.PNG) <p>Procedure:</p> <p>Take the cable and draw with a marker the middle of it. Place it in the slot on the piece RC_TLR_001_P_243 (Photo 18).Put the plate RC_USAL_001_P_219 on the cable and secure it with 4 screws M2.5x5 hexagonal head (Photo 19).</p> ![waist](./img/waist/Waist_top18_19.PNG) <p>Turn the cable around the RC_TLR_001_P_243 piece taking care to cross it around the pulley, the opposite side to the plate (Photo 20).Then pass the cable through the grooves of the pulleys RC_USAL_001_P_119 (Photo 21) </p> ![waist](./img/waist/Waist_top20_21.PNG) <p>To Finish the wiring, draw the cable along the pulley RC_USAL_001_P_124, and place the crimp in the appropriate tensioner RC_USAL_001_P_131 (Photo 22). Do the same for the other side of the cable and cross the cable before reaching the tensioner (Photo 23).</p> ![waist](./img/waist/Waist_top22_23.PNG)"},{"location":"icub_tendons/waist_legs/#3-leg-cabling","title":"3    LEG CABLING","text":"<p>This chapter describes the steps required both during construction and in maintenance phase to route of the cables 14 of the hip of the robot and cables 15 or 16 of the ankle present on robot with lower body version 1.</p>"},{"location":"icub_tendons/waist_legs/#31-hip-flexion-cable-14","title":"3.1 HIP FLEXION \u2013 Cable 14","text":"![waist](./img/waist/Wiring-LEG_Cable_14.PNG) <p>Preparation:</p> <p>The cable has to be previously peeled off, at a distance of 435 mm from crimp, for a total of 50 mm. (see below)</p> ![waist](./img/waist/Wiring-LEG_Cable_14_built.PNG) <p>Tip</p> <p>the latter version of iCub have a cover, you may need to remove it before proceeding(see picture below). To do that remove the 2 screws of the cover. To unscrew them it is important to see them, use a hexagonal screw driver 2mm and turn the motor shaft from the other side of the motor(see picture below).</p> <p></p> <p>Procedure:</p> <p>Take the cable and place the part stripped in the slot on the piece RC_IIT_001_P_314, then center and block it with the help of the plate RC_IIT_001_P_328 (Photo 24). The shortest part of the cable is the one going outside of the robot.</p> ![waist](./img/waist/Wiring-LEG_24_25.PNG) <p>Take the inner part of the cable (the right one so to speak \u2013 or the longest) and make one turn around the pulley RC_IIT_001_P_314 (Photo 25). If done correctly you should have the 2 crimps reunited down below the hip (photo N.26). At this point proceed route the cables by making an 8 shape, by crossing the cables and follow the wiring (photo N.28) (shortest part - yellow cable) and insert both crimp inside their respective tensioner -  piece RC_USAL_001_P_131 (Photo 27).</p> ![waist](./img/waist/Wiring-LEG_26_27_28.PNG)"},{"location":"icub_tendons/waist_legs/#41-ankle-flexion-cable-15-or-cable-16","title":"4.1 ANKLE FLEXION - Cable 15 or Cable 16","text":"<p>Those 2 cables are only on some previous iCub design V1.</p> <p>Follow the following diagram in order to rewire correctly.</p> ANKLE FLEXION - cable 15 ANKLE FLEXION - cable 16 <p>Tip</p> <p>remove the blocker-cover to adjust the cable - when finally wired and the foot 90 degree respect to leg, put it back and tighten firmly the screws holding it in place.</p> ANKLE FLEXION - cable 15 ANKLE FLEXION - cable 16"},{"location":"icub_tendons/waist_legs/#5-stand-fast-robot-locker","title":"5    STAND \u2013 FAST ROBOT LOCKER","text":"<p>This chapter describes the construction of fast locker to connect the robot to the stand seat</p>"},{"location":"icub_tendons/waist_legs/#51-stand-cable-29","title":"5.1 STAND  - Cable 29","text":"<p>Procedure:</p> <p>Take the cable and put it so that the crimp goes into the slot of the piece RC_IIT_090_P_009 (Photo 29-30).</p> ![waist](./img/waist/Stand_Cable_29_foto29_30.PNG) <p>Attach the hook, or the piece PKWS4SLIDER with two screws 3x5 TSV, to RC_IIT_090_P_009 piece (Photo 31).Place on the part of the cable RC_IIT_090_P_007 piece and then the adjustment mechanism for proper closure piece RC_IIT_090_P_007 (Photo 31-32)</p> ![waist](./img/waist/Stand_Cable_29_foto31_32.PNG) <p>At this point, proceed by entering what has been previously mounted into the slot of the support RC_IIT_090_P_005 (Photo 33).Complete the installation by screwing the threaded part of the piece RC_IIT_090_P_006 with the piece  RC_IIT_090_P_008 (Photo 34)</p> ![waist](./img/waist/Stand_Cable_29_foto33_34.PNG)"},{"location":"icub_tendons/wrist_hand_cabling_V1/","title":"Wrist and Hand Cabling V1","text":""},{"location":"icub_tendons/wrist_hand_cabling_V1/#1-wrist","title":"1 WRIST","text":""},{"location":"icub_tendons/wrist_hand_cabling_V1/#11-wrist-motor-tendons","title":"1.1 Wrist motor tendons","text":""},{"location":"icub_tendons/wrist_hand_cabling_V1/#111-location-identification","title":"1.1.1 Location &amp; identification","text":"<p>From the pictures below you will be able to locate and identify the tendons inside the Right Forearm building the active part of the wrist tendons.</p> <p>From the pictures below you will be able to locate and identify the tendons inside the Left Forearm building the active part of the wrist tendons.</p> <p>Note</p> <p>Note that the cabling of (1,2) &amp; (5,6) and (3,4) &amp; (7,8) is identical for symmetry. </p> <p>Note</p> <p>Note also that cable E1 &amp; E2 are indeed a one cable with two different labels at its extremities, as we will    see below.</p>"},{"location":"icub_tendons/wrist_hand_cabling_V1/#112-cabling","title":"1.1.2 Cabling","text":"<p>First of all, in order to increase the cable tension it is useful to unscrew the 2 couples of screws located as shown in the pictures below, depending on which cables we are working on. After having completed all the described operations the cable tension can be increased by tightening the screws again.</p> Left arm palm down Right arm palm down <p>In the case you found out that one of the 8 cables of the wrist broken, here the sequence you need to follow to restore it.</p> pictures step by step guide FIRST THING: which side of the wrist is broken? The internal (refer to cables 1 to 4)or the external one (refers to cables 5 to 8)? Can you see the differences?YOU may have guessed on your own but the answer is only that the external one is beneath the 3 proximal motors which makes it more complicated to reach and repair; apart from that it is exactly identical - so to proceed  we will first see how to move the proximal motor, if you need to repair the external wrist motor, and follow up with the explanation of the tendon in a more generical way, as both motors are wired in the same way.If you need to repair tendons from 1 to 4 please just proceed to STEP 2 STEP 1: remove the 6 screws M1.6x5 and flip over the 3 motors to be able to access visually beneath them. STEP 2: remove or loose the 2 screws M2.5x8 holding the motor. From now on you can work freely. STEP 3:  remove the broken part of the cable still inside the tensioner.  !!!WARNING!!!  once removed, either you put back the brand new cable inside or else just simply gather the part removed from the tensioner assembly and re-screw it back in until further notice in order to DO NOT LOSE PIECES!!! We can now start wiring!!! STEP 4:  Let's begin with the motor pulley. Take a piece of uncoated cable (more or less 20 cm). Let its extremities be E1 and E2. Pass the cable trough the hole (H) in the pulley. Block the cable on the hole H with some cyanoacrylic glue. STEP 5:  Twine the cable on the pulley. The number of turns around the pulley has to be decided on the basis of the entrance and exit pulleys: the cable should be tangential to the pulleys. Block the cable on the motor with some tape. This will allow you to maintain the cable positioned on the pulley. This wiring is identical for the cables E5-E6. STEP 6: Wrist pulley (E3-E7): take a piece of cable. Tie in a knot at one extremity. Take the other extremity (E3) and pass it trough the hole H3 on the pulley on the wrist side. Exit the pulley trough the hole H4. STEP 7: Wrap the cable as shown. The wiring of E7 is identical. STEP 8: Wrist pulley (E4-E8): take a piece of cable. Tie in a knot at one extremity. Take the other extremity (E4) and pass it trough the hole H1 on the pulley on the wrist side. Exit the pulley trough the hole H2. STEP 9: Wrap the cable as shown. The wiring of E8 is identical. We are finally getting to an end. Now that you know how to re-wire every single cable of the wrist you need to insert the tensioners. STEP 10: Pass E3 through the tensioner (LHS1) and tie a knot (KN3). This knot should be positioned taking into account the length of the tensioner. Remove E1 from the tape that blocks it on the motor and pass it trough the tensioner (RHS1). Tie in a knot (KN1) on E1. This knot should be positioned so as to have the tensioner in the middle of the  admissible range of movements. Repeat for cables E2 &amp;E4. STEP 11: Tight the tensioners by screwing in the extremities."},{"location":"icub_tendons/wrist_hand_cabling_V1/#12-wrist-passive-tendons","title":"1.2 Wrist passive tendons","text":""},{"location":"icub_tendons/wrist_hand_cabling_V1/#121-location-identification","title":"1.2.1 Location &amp; identification","text":"<p>From the pictures below you will be able to locate and identify the 2 tendons inside both the Right Wrist and Left Wrist building the passive part of the wrist movements. </p> <p>The pink cable is cable 9 and the red one is cable 10.</p> Left wrist Right wrist"},{"location":"icub_tendons/wrist_hand_cabling_V1/#122-cabling","title":"1.2.2 Cabling","text":"<p>Here the sequence you need to follow to restore the 2 little cables from the base of the wrist - we will write down the procedure using the left arm as base pictures but use the previous pictures above to mirror the explanations.</p> <p>Which is the length of each cable? (Need measurements in lab) </p> pictures step by step procedure !!!KEEP IN MIND - whenever you need to replace one of the 2 cables you FIRST need to release the tensioners .  Just put one side of the crimp of each cable inside its tensioner and follow the path until its blue stopper.  The X (cross) in the pictures represents a knot at the end of the cable. Cable 9 needs to be inserted inside the hole H1, while cable 10 in the hole H2. To block the cable ends you first need to unscrew the stopper (red circles), then insert the cable and screw it back. Tie in a knot in order to prevent any cable slippage. Once done: tighten the screws of both tensioners until you reach a strict tensing on the cables."},{"location":"icub_tendons/wrist_hand_cabling_V1/#2-hand","title":"2 HAND","text":""},{"location":"icub_tendons/wrist_hand_cabling_V1/#21-location","title":"2.1 Location","text":"<p>The Hand wiring consists of the Thumb Oppose and the Fingers Abduction. In the picture below you can see where the cables and their respective motors are located (Left hand palm down).</p> <p>The minimum requirement to start recabling those 2 joints is:</p> IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316"},{"location":"icub_tendons/wrist_hand_cabling_V1/#22-thumb-oppose","title":"2.2 Thumb Oppose","text":"<p>Here are the instructions for rewiring the Thumb Oppose Joint at the base of the Left Hand.</p> pictures step by step guide STEP 1:  The only way to start correctly this wiring is to remove the palm. Please remove the 3 screws M2x6 inside the palm (circled in red) and the 2 at the base of the wrist M1.6x4 (blue).  STEP 2:  we will now focus on the wiring along the pulley. Cut ~ 40cm of cable. Move with a screwdriver the pulley in order to have the hole (red circle) flat horizontally. Insert the cable, equilibrate evenly the cable on both sides of the pulley. The cable exits are S0 and S2 (blue circles). STEP 3:  Make  1 turn around the pulley CCW to go into S2 ball bearing side 2 turns around the pulley CW to reach S0 motor side. !!!TIP: You may find convenient to remove the plate to round the cable around the pulley more easily. STEP 4:  Insert both side of the cable inside S2 and S0 until they sprout out from the palm side STEP 5:  Insert the cables in the central pulley at the base of the thumb as shown. STEP 6:  Use a 0.7mm hexagonal key (or screwdriver) to block the cables with the set screws. !!!!CONGRATULATIONS YOU ARE DONE!!!"},{"location":"icub_tendons/wrist_hand_cabling_V1/#23-fingers-abduction","title":"2.3 Fingers Abduction","text":"| Sheaths | Length | Label | | ------- | ------ | ----- | | T1      | 38(mm) | T0    | | T2      | 27(mm) | T2    | | T3      | 38(mm) | T3    | | T4      | 44(mm) | T4    |   <p>Here are the instructions for recabling the Fingers Abduction joint of the Left Hand. For the right one the procedure is mirrored.</p> pictures step by step guide First we need to remove the hand dorsum: remove the screw M2x6 holding the dorsum cover and turn upside down the cover from the external part. Now it is necessary to remove the palm. Please remove the 3 screws M2x6 inside the palm (circled in red) and the 2 at the base of the wrist M1.6x4 (blue). Once removed the palm, remove the overall 4 set screws.Use a 0.7mm hexagonal - screwdriver or key. Remove the overall remaining pieces of the broken cable before starting to restore it and inspect inside the cage. Remove every single board above the knuckles - the MAIS board (green) and the fingertips Hall sensors (white). In details: 1. Unplug every single chipset from the main board.!!!TIP: Please write down with a marker the initial of the finger chipset you unplug - it is sometimes messy when remounting everything to find out which chipset is for which finger2. Remove the power connector4. With caution please remove the MAIS Board (by removing its tape) - on the bottom side of the board there is an inductor that sometimes got broken when remove carelessly.  Let's get to business and Let's start wiring! Let's start from the back of the hand. Take a piece of cable (more or less 40cm) and pass it trough the central hole in the pulley (red circle). Optionally you can block the cable on the pulley putting a drop of cyanoacrylic glue into the hole. Twine the cable on the pulley. The number of turns around the pulley has to be decided on the basis of the entrance and exit holes: the cable should enter the holes tangentially. Thus, insert the cable extremities, into the two holes H1 and H2 (red circles). Pass one cable extremity trough the sheath T1 and the other one trough T2. Position the extremities of the sheaths on the sockets of the 2 exit holes in the motor support. Note: the sheath extremity should be inserted correctly in its socket. Focusing on the side of the cable inserted in the sheath T1, pass it through the tensioner and insert the sheath extremity in the tensioner socket. Then, continue the path inserting the cable through the sheath T3 until reaching a hole H3 in the hand frame (blue circle). Finally, insert the cable in the hole and position the extremity of T3 on the socket in correspondence of the hole. Twine the cable around the pulley at the base of the index finger. Pass the cable ending trough the hole H7 and exit from H8. Block the cable on the pulley with the screw S9.  Tie a knot about 1 cm away from the pulley. Going back to the other cable extremity inserted in the sheath T2, position the extremity of T2 on the socket in correspondence of the hole H4. Finally, insert the cable in the hole. Twine the cable around the pulley at the base of the pinkie finger. Pass the cable ending trough the hole H9 and exit from H10. Block the cable on the pulley with the screw S10. Twine the cable around the little pulley and then around the pulley at the base of the ring finger.   Pass the cable ending trough the hole H11 and exit from H12. Block the cable on the pulley with the screw S11. Pass the cable trough the hole H5 and the sheath T4. Position the extremity of the sheath on the socket of H5. Note: the tube extremity should be inserted correctly in its socket.  Pass the cable trough the hole H6 and position the extremity of T4 on the socket of H6. At this point we close the loop, reaching again the first pulley located at the base of the index.  Twine the cable around the pulley and pass the cable ending trough the hole H13 and exit from H14. Block the cable on the pulley with the screw S12.  Tie a knot about 1cm away from the pulley. Now unscrew all the screws blocking the cable on the pulleys (S9, S10, S11 and S12). Note that this operation can be done only at a specific configuration of the fingers. At this configuration the screws are accessible thanks to suitable holes on the palm. In the picture you can see the final cable configuration on the first pulley at the base of the Index. The 2 parts of the cabled are represented by different colors. Now tension the cable:  1) Pull the blue cable from its ending. Check that the sheath is inside its sockets at H1 and H3 and block the cable extremity with the screw S9.  2) Pull the red cable from its ending. Check that the sheath is inside its sockets at H4, H5 and H6. Block the cable with the screw S10, S11 and S12. Final test:  Use the head screw from the pulley motor to check if the fingers get opened-closed whenever you turn it CW or CCW. !!!!CONGRATULATIONS YOU ARE DONE!!!  Use every unmounting step to put back in place every part of the hand. <p>Tip</p> <p>Tensioning the cable is very important. Even when all the screws are not tight, it may result difficult to tension the cable in all of its parts. This is due to the sharp edges of the pulley which do not allow a uniform distribution of the tension.</p> <p></p> <p>Tip</p> <p>For the Fingers Abduction always start from the index as previously shown.</p> <p>Tip</p> <p>Each pulley at the base at the fingers has a Pin. If passing trough the holes is complicated, you can remove the finger from the palm. After this operation the pulley can be made more accessible by rotating it around its Pin. In the picture below you can see the pin of the Index pulley.</p> <p></p>"},{"location":"icub_tendons/wrist_hand_cabling_V2/","title":"Wrist and Hand Cabling V2","text":""},{"location":"icub_tendons/wrist_hand_cabling_V2/#1-wrist","title":"1    WRIST","text":""},{"location":"icub_tendons/wrist_hand_cabling_V2/#11-wrist-tendons-lengths","title":"1.1 Wrist tendons' Lengths","text":"<p>Here is the list of the 10 tendons needed to build the wrist movements.</p>    |Tendon   |IITCODE   |Length   |Alias   | |---|---|---|---| | 1 | 6400 | 72 mm | RC_IIT_019_G_019 | | 2 | 6402 | 84 mm | RC_IIT_019_G_020 | | 3 | 6404 | 101 mm | RC_IIT_019_G_021 | | 4 | 6413 | 124 mm | RC_IIT_019_G_022 | | 5 | 6414 | 107 mm | RC_IIT_019_G_023 | | 6 | 6415 | 113 mm | RC_IIT_019_G_024 | | 7 | 6416 | 112 mm | RC_IIT_019_G_025 | | 8 | 6417 | 107mm | RC_IIT_019_G_026 | | 9 | 6418 | 51 mm | RC_IIT_019_G_027 | | 10 | 6419 | 43 mm | RC_IIT_019_G_028 |"},{"location":"icub_tendons/wrist_hand_cabling_V2/#12-wrist-motor-tendons","title":"1.2 WRIST MOTOR TENDONS","text":""},{"location":"icub_tendons/wrist_hand_cabling_V2/#121-location-and-identification","title":"1.2.1   Location and Identification","text":"<p>From the pictures below you will be able to locate and identify the 8 tendons inside the Right Forearm building the active part of the wrist tendons.</p> <p>From the pictures below you will be able to locate and identify the 8 tendons inside the Left Forearm building the active part of the wrist tendons.</p>"},{"location":"icub_tendons/wrist_hand_cabling_V2/#122-cabling","title":"1.2.2   Cabling","text":"<p>In the case you found out 1 of the 8 first cables of the wrist broken, here is the sequence you need to follow to restore it.</p> Pictures step by step guide FIRST THING FIRST: Which side of the wrist is broken?The internal (refers to cables 1 to 4) or the external one (refers to cables 5 to 8)? Can you see some visual differences?YOU may have guessed on your own, but the answer is only that the external motor is beneath the 3 proximal motors, which makes it more complicated to reach and repair.  Apart from that, it is exactly identical - so to proceed we will first see how to move the proximal motors and follow up with the explanation of the tendon repair in a more generical way. If you need to repair tendons from 1 to 4 please just proceed to STEP 2 STEP 1: Remove the 6 screws M1.6x5 and flip over the 3 motors to be able to access visually the motor beneath them. STEP 2: Remove the 2 screws M2.5x10 holding the motor.From now on, you can work freely. STEP 3: Remove the broken part of the cable still inside the tensioner.  !!!WARNING!!! It is the utmost importance that youDO NOT MIX the 3 parts of the tensioner.ALWAYS KEEP THEM TOGETHER the main part and its 2 screwing side  STEP 4: At the level of the wrist pulley, just remove the broken cable and replace it : EASY for cable 5 and 6BUT LESS EASY for cable 1 and 2, because you need to remove the mechanical part preventing you from inserting and removing the head crimp. To do so, just remove the 2 screws M2x6 and slide the block to retrieve and replace the head crimp.Once done, put back on place the block and the 2 screws. We can now start wiring!!! STEP 5:Let's begin with the motor pulley, here is the way to wire them both (as they are perfectly identical). LEFT ARMThe BLUE cables for the Left Forearm are:  4 and 7The RED cables for the Left Forearm are: 3 and 8 RIGHT ARMThe BLUE cables for the Right Forearm are:3 and 8The RED cables for the Right Forearm are:4 and 7 STEP 6: Put a 2 tie wraps one for each side (or cable) in order to prevent them from getting untwisted. picture motor almost closed on support STEP 7:Put back in place the motor with its 2 screws M2.5x10. Leave 1mm in between the motor and the support. We will cover this aspect later. STEP 8:Let's wire the wrist pulleys (either for 1,2 or 5,6)Here is the detailed wiring for the left arm, please mirror it for the right arm.The wiring is quite simple. We are finally getting to an end. Now that you know how to rewire every single one of the wrist cables you need to insert the tensioners. Let's make the example of the 4 cables 1 to 4. STEP 9:Remove the tie wrap at the level of the motor wrist,for let's say cable 3. Open one side of the tensioner and start putting the ring, then the threaded pieceof the tensioner, finish by screwing the ring onto the threaded piece. Do the exact same for the cable 1. STEP 10:Screw both pieces into the main tensioner part - Let's say just 2 threads on both sides, just to make it hold until we tense it. STEP 11:Repeat STEP 9 and STEP 10 with cables 2 and 4. STEP 12:Use 2 pliers to hold on the tips of the threaded pieces' tensioner and use with any toolfitting the hole inside the main part of the tensioner AND finally screw them.!!! TIP !!!depending on how you are facing the cablesjust screw CW or CCW for half a turn tounderstand if the 2 threaded pieces are going inside the main piece or if they get out - THEY NEED TO GET IN OBVIOUSLY. Repeat the above step on both tensioners until you get a quite nice tensing (but not super tense, this will be done right next). FINAL STEP:Tense the 2 screws that we left a bit opened on STEP 7."},{"location":"icub_tendons/wrist_hand_cabling_V2/#13-wrist-passive-tendons","title":"1.3 WRIST - PASSIVE TENDONS","text":""},{"location":"icub_tendons/wrist_hand_cabling_V2/#131-location-and-identification","title":"1.3.1   Location and Identification","text":"<p>From the pictures below you will be able to locate and identify the 2 tendons inside both the Right Wrist and Left Wrist building the passive part of the wrist movements.</p> RIGHT WRIST LEFT WRIST"},{"location":"icub_tendons/wrist_hand_cabling_V2/#132-cabling","title":"1.3.2   Cabling","text":"<p>Here the sequence  you need to follow to restore the 2 little cables from the base of the wrist - we will write down the procedure using the left arm as base pictures but use the previous pictures above to mirror the explanations.</p> Pictures step by step procedure !!!KEEP IN MIND!!!whenever you need to replace one of the 2 cablesyou FIRST need to release the tensioners . CABLE 10:  it is really straight forward - just put one side of the crimp of cable 10 inside the tensioner (blue circle) and put the other side inside the holding tooth. CABLE 9:  it is just a bit more complicated because you need to first remove the screw to be able to lodge the crimp inside the tensioner and put back in place the tensioner in the throat and insert the screw. Once done: tighten the screws of both tensionersuntil you reach a strict tensing on the cables."},{"location":"icub_tendons/wrist_hand_cabling_V2/#2-hand","title":"2    HAND","text":""},{"location":"icub_tendons/wrist_hand_cabling_V2/#21-location","title":"2.1 Location","text":"<p>The minimum requirement to start re-cabling those 2 joints is:</p> IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter  0,63mm, not coated, AISI 316"},{"location":"icub_tendons/wrist_hand_cabling_V2/#22-thumb-oppose","title":"2.2  THUMB OPPOSE","text":"<p>As usual, you will find here after the instructions for rewiring the Thump oppose joint at base of the Left Hand.</p> Pictures step by step guide STEP 1: The only way to start correctly this wiringis to remove the palm.Please remove the 3 screws M2x6 (circled in red) inside the palm  and the 2 screws M2x4 (circled in blue) at the base of the wrist. STEP 2:We will now focus on the wiring along the pulley.Cut 50 to 60cm of ITTCODE 1815.Move with a screwdriver the pulley in order to have the hole flat horizontally.Insert the cable, divide equally the cable from part to part of the pulley. STEP 3:DO 1 turn around the pulley CCW to go into S2ball-bearing side 2 turns around the pulley CW to reach S0motor side!!!TIP: You may find convenient to remove the plate to round the cable around the pulley more easily. STEP 4: Insert both sides of the cable inside S2 and S0 until they sprout out from the palm side. Remember that S0 is the shorter sheath and S2 is the longer one. BE CAREFUL! The right hand is not symmetrical. !!!!TIP: once both sides of the cables are out at the baseof the palm, you may find convenient to verify the turns around the pulley ( you could use 2 pieces of foam hear plugs to prevent the cable from unwired itself) - Make sure the plate is screwed back into normal state. STEP 5: The cable from S0 goes directly into hole T1.The cable from S2 makes 1 FULL TURN aroundthe pulley before going into T2. STEP 6: Use a 0.7mm hexagonal key (or screwdriver) to block the cables. !!!TIP: you may find useful to first block one side and afterwards use a plier to exert a strong pulling of the wire to tense this other side of the cable and block it. Repeat the the same process on the other side. FINAL CHECK: If the cabling is correct, when rotating the motor CW the finger should open (hand wide open) !!!!CONGRATULATIONS YOU ARE DONE!!!"},{"location":"icub_tendons/wrist_hand_cabling_V2/#23-fingers-abduction","title":"2.3 FINGERS ABDUCTION","text":"<p>PREFACE: This cable is THE most complicated to replace - rewire, mainly because you need to unmount a lot of parts BUT on the other hand it is also the most reliable - You may never need to replace it.</p> Pictures step by step guide STEP 1:remove the screw M2x6 holding the dorsum coverand turn upside down the cover from the external part. The dorsum cover should get removed. STEP 2:The only way to start correctly this wiring is to remove the palm.Please remove the 3 screws M2x6 inside the palm (circled in red) and the 2 screws M2x4 (circled in blue) at base of the wrist. STEP 3:remove the overall set screws.Use a 0.7mm hexagonal - screwdriver or key. STEP 4:remove the overall remaining pieces of the broken cable before starting to restore it.Inspect inside the cage - remove the 2 screws M1.6x5.Let's get to business and Let's start wiring! STEP 5:start wiring:2 Full Turns (blue) CCW around the pulley and it gets out into tube T21 Full Turn (red) CW around the pulley and it gets out into tube T0. !!!TIP!!! It could be a good idea to block the wiring around the pulley thx to some foam earplug or some paper. Here is a picture of the overall path of the cable inside the 3 tubes constituting the path of the cable. STEP 6:remove every single board above the knuckle. STEP 6a:remove the screw and flip over the board with the little chipsets. STEP 6b:1. Unplug every single chipset from the main board!!!TIP: Please write down with a marker the initial of the finger chipset you unplug - it sometimes a bit messy when remounting everything to find out which chipset is for which finger.2. remove the power connector3. remove the 3 screws (2 M1x5 and 1 M1.6x6)4. With caution please remove the MAIS Board - on the bottom side of the board there is an inductor that sometimes got broken when removed carelessly. STEP 6c:remove the 2 screws M1.6x6 Let's start with wiring the cable from T2 STEP 7:Here is the picture of the routing of the cable you need to realize.To do that, it is necessary to allow the pulleys to rotate around their pin. STEP 7a:PINKIE FINGER1. you need to untighten ENTIRELY the axes screws on both sides of the finger (on the palm side it can be removed - pay attention that the ball bearing may fall as well,  just remember to replace it when remounting -  BUT REFRAIN TO REMOVE on top side - or else you will lose the center of the finger) 2. try to move the pulley along its pin until you succeed to insert the cable into it.3. Put back on the axes screws and retighten them. STEP 7b:RING FINGERSame 3 first steps as the Pinkie finger.4. Finally insert the cable into the hole leading to T4. STEP 8: Before starting to wire the base of the index fingerit is really important to block the cable at the base of the pinkie finger - in this way we wont unintentionally untwine the wiringat the level of the motor pulley.1. Insert the set-screw onto the pinkie finger and tighten it.. Let's start wiring the index base pulley STEP 9:As for pinkie and ring fingers: 1. untighten the 2 axes screws in order to be able to move the pink (color) pulley sideways around its PIN2. Pass the cable coming from T4 (red) inside the pulley hole. STEP 10:1. wire the cable from T0 (blue)2. re-center the pinky pulley3. put the axes screw back on. Let's start tensing the cable STEP 11:1. take one plier - pinch at the exit of the cable from the pinky pulley and twist it to retrieve the excess of cable which will have for consequence to tense this part of the cable - the overall fingers should get closer to each other2. put the set-screw A and B3. Tense the other side of the cable (blue part) the same way4. put the set-screw C STEP 12:Final test:1. remove the 2 blocks (foam ear plug or paper jamming) from the pulley motor2. use the head screw from the pulley motor to check if the fingers get opened-closed whenever you turn it CW or CCW. IF YES -YOU ARE DONE - USE every unmounting step to put back in place every part of the hand"},{"location":"icub_testing/encoders_manual/","title":"Robot Testing - Encoders and Joints limit (manual)","text":"<p>This page shows how to manually run tests on the robot using the icub-tests package and Robot Testing Framework.</p>"},{"location":"icub_testing/encoders_manual/#preliminary-actions","title":"Preliminary actions","text":"<p>In order to use the tests available for icub, it is necessary to compile the robotology-superbuild with the <code>ROBOT_TESTING_FRAMEWORK</code> flag enabled. This will create a folder in the source code where you will find the suites to run for testing encoders and joint limits.</p>"},{"location":"icub_testing/encoders_manual/#test-encoders","title":"Test Encoders","text":""},{"location":"icub_testing/encoders_manual/#optical-encoders-drift","title":"Optical Encoders Drift","text":"<p>This test moves each joint for 1000 cycles and prints out the motor encoder sinusoid. It is important to check if the encoder eventually drifts -meaning that the optical disk is dirty and it needs to be cleaned. The drifting can be seen as a slope in the plot:</p> <p>A correct example of non-drift is:</p>"},{"location":"icub_testing/encoders_manual/#motor-encoder-consistency","title":"Motor Encoder Consistency","text":"<p>This test performs a comparison between the joint encoder and the motor encoder parameters. The resulting plots should be overlapped.</p> <p>Go to the <code>icub-tests</code> directory:</p> <pre><code>cd robotology-superbuild/src/icub-tests/suites\n</code></pre> <p>Open the file <code>encoders-icub.xml</code> and test one part at the time by commenting the others. For each part test first the optical_encoders_drift and then MotorEncoderConsistency.</p> <p>Now, from the previous folder, go into </p> <pre><code>cd contexts/icub\n</code></pre> <p>and check the files .ini related to the part that you are testing - this files contain the info about motion range, tolerance and number of cycles.</p> <p>Now run the command</p> <pre><code>robottestingframework-testrunner -v -s encoders-icub.xml\n</code></pre> <p>\ud83d\udcbe It will automatically save the results in a text file on the same folder where I launched the test. The terminal gives then instructions about how to plot the data with gnuplot (run <code>sudo apt install gnuplot</code> if needed). Launch 1 joint at the time ([col=1:1], then [col=2:2] ecc..). For the encoder drift test, the correct plot should show a unique band without any drift. It means that all the encoder readings are correct. For the Motor Consistency test, the resulting plots should be overlapped.</p> <p>\u26a0\ufe0f There may be some problems with the relative paths of the .ini files, to solve this you can edit the <code>encoders-icub.xml</code> file as follows:</p> <pre><code>&lt;test type=\"dll\" param=\"--from contexts/icub/optical_encoders_drift_left_arm.ini\"&gt;  OpticalEncodersDrift &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icub/optical_encoders_drift_right_arm.ini\"&gt; OpticalEncodersDrift &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icub/optical_encoders_drift_left_leg.ini\"&gt;  OpticalEncodersDrift &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icub/optical_encoders_drift_right_leg.ini\"&gt; OpticalEncodersDrift &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icub/optical_encoders_drift_torso.ini\"&gt;     OpticalEncodersDrift &lt;/test&gt;\n\n&lt;test type=\"dll\" param=\"--from contexts/icub/motorEncoderConsistency_left_arm.ini\"&gt;  MotorEncodersConsistency &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icub/motorEncoderConsistency_right_arm.ini\"&gt; MotorEncodersConsistency &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icub/motorEncoderConsistency_left_leg.ini\"&gt;  MotorEncodersConsistency &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icub/motorEncoderConsistency_right_leg.ini\"&gt; MotorEncodersConsistency &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icub/motorEncoderConsistency_torso.ini\"&gt;     MotorEncodersConsistency &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icub/motorEncodersConsistency_face.ini\"&gt;     MotorEncodersConsistency &lt;/test&gt; \n&lt;test type=\"dll\" param=\"--from contexts/icub/motorEncodersConsistency_head.ini\"&gt;     MotorEncodersConsistency &lt;/test&gt;\n</code></pre> <p>\u26a0\ufe0f If the test fails starting, repeat it tuning the tolerance value <code>tol</code> but stay below 1.5 deg (\u26a0\ufe0f error! We should perform a PID test BEFORE!!! and tol should be a smaller number). If the test fails, meaning that the plots are not good, the encoder might need to be cleaned/substituted.</p>"},{"location":"icub_testing/encoders_manual/#joints-limit-test","title":"Joints limit test","text":"<p>Go to the icub-tests directory:</p> <pre><code>cd robotology-superbuild/src/icub-tests/suites\n</code></pre> <p>Edit with gedit the file <code>jointsLimits_robotEth.xml</code> and test one part at the time by commenting the others. </p> <p>Now go into </p> <pre><code>cd contexts/icubEth\n</code></pre> <p>and check the files .ini related to the part that you are testing - this files contain the info about speed, tolerance and out of bound positions.</p> <p>Now run the command</p> <pre><code>robottestingframework-testrunner -v -s jointsLimits_robotEth.xml -o part_name.txt\n</code></pre> <p>\ud83d\udcbe It will save the results in a text file on the Desktop. If you run the command without this part <code>&gt; /home/icub/Desktop/part_name.txt</code> the results will be automatically saved in the current folder as <code>result.txt</code> BUT it will be overwritten every time.</p> <p>\u26a0\ufe0f There may be some problems with the relative paths of the .ini files, to solve this you can edit the <code>jointsLimits_robotEth.xml</code> file as follows:</p> <pre><code>&lt;test type=\"dll\" param=\"--from contexts/icubEth/joint_limits_right_arm.ini\"&gt; JointLimits &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icubEth/joint_limits_left_arm.ini\"&gt; JointLimits &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icubEth/joint_limits_right_leg.ini\"&gt; JointLimits &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icubEth/joint_limits_left_leg.ini\"&gt; JointLimits &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icubEth/joint_limits_torso.ini\"&gt; JointLimits &lt;/test&gt;\n&lt;test type=\"dll\" param=\"--from contexts/icubEth/joint_limits_head.ini\"&gt; JointLimits &lt;/test&gt;\n</code></pre> <p>\u26a0\ufe0f If the tests fails, repeat it tuning the tolerance value <code>tol</code> but stay below 2.5%.</p>"},{"location":"icub_versions/","title":"iCub Versions Table","text":""},{"location":"icub_versions/#currently-known-icub-versions","title":"Currently known iCub versions","text":"iCub version Features Notes v1.0 This version was distributed during the RobotCub open call. It has the following features: <p> 1. Only the upper arms are covered.  2. No force sensors available.  3. No touch sensors available. </p> v1.1 Main features are: <p> 1. Sensorized hand joints (MAIS boards are mounted on the back of the hand).  2. Six axes force sensors at each limb. This allows impedance/compliance control as described here. 3. Fully covered (upper arm, forearm, torso, hip, legs). v1.1.1 This is an intermediate version. The only difference with the previous is that the main control board has changed from eCAN (or CFW1) to CFW2 v1.2 This version has tactile sensors. Main features are: <p> 1. Sensorized palm. 2. Sensorized fingertips </p> v1.3 This version has tactile sensors added on the forearms. v1.4 This version has tactile sensors added on the upper arm and chest. v1.7 This version is characterized by a slight difference in the kinematics of the wrist. v2.0 This version has: <p> 1. Incremental encoders (optical) directly mounted on the motors (fast side of the reduction gear).  2. Completely redesigned fore-arm and hands assemblies.  Completely redesigned head assembly for higher performances (stronger neck motors, zero-backlash eye movement)  3. Mounts complete set of sensitive skin. v2.3 This version is a v2.0 + talking-Head (it's now obsolete, head with motors for lips and jaw) v2.4 This version replaces v2.3, is a v2.5 upperbody only with intel i7 11<sup>th</sup> on com express type 10 module in the backpack (UKIT010) + talking-Head (it's now obsolete, head with motors for lips and jaw) v2.5 This version has: <p>  1. Hands v2.0  2. Stronger legs (with the possibility to mount series elastic elements on the knee and on the ankle)  v2.5.5 This version is a v2.5 + a backpack for batteries v2.6 v2.5.5 with new face expression (RFE master board) v2.7 v2.6 with high-performance IMU on the waist v2.8 v2.7 with beam-splitter in the eye for hosting event driven and frame based sensors v2.9 obsolete v2.10 v2.7 with the 4K FRAMOS-IMX678 cameras, NVidia Orin NX (UKIT009) and intel i7 11<sup>th</sup> on com express type 10 module in the backpack Special Version Features Notes v1.x.1 where x &gt; 1 This is the relative 1.x (x&gt;1) version with a V2 head assembly mounted onto a V1 body v1.x.2 where x &gt; 1 This is the relative 1.x (x&gt;1) version with a V2 hands assembly mounted onto a V1 body with V1 head v1.x.3 where x &gt; 1 This is the relative 1.x (x&gt;1) version with a V2 head and V2 hands assemblies mounted onto a V1 body v3.0 Experimental iCub, 1.2 m high with serial kinematic chains in the shoulders and more powerfull motors in the legs v3.1 v3.0 with new 4k basler cameras, nvidia xavier and intel i7 11<sup>th</sup> on com express type 10 module (UKIT009)"},{"location":"icub_wiring/","title":"Scope of document","text":"<p>The purpose of this document is to give detailed documentation about the wiring of the robot, board and motor placement and the board connection.</p>"},{"location":"icub_wiring/#the-icub-wiring-for-each-robot-version","title":"The iCub wiring for each robot version","text":"<p>Please click on any of the link below to go to the right page.</p> <p>iCub 1.x</p> <p>iCub 2.x</p> <p>iCub 3.x</p>"},{"location":"icub_wiring/icub1_x/","title":"iCub 1.x","text":""},{"location":"icub_wiring/icub1_x/#icub-1x-wiring","title":"iCub 1.x Wiring","text":""},{"location":"icub_wiring/icub1_x/#logic-and-harness-icub-1","title":"Logic and Harness iCub 1","text":"<p>note</p> <p>The wiring schematics of iCub 1.x has been designed by using Orcad. You can find all the docs at the link below:</p> <ul> <li>iCub1.x Wiring</li> </ul>"},{"location":"icub_wiring/icub1_x/#logic-and-harness-icub-17","title":"Logic and Harness iCub 1.7","text":"<p>iCub 1.7.1 has iCubHead 2.0 and forearms and hands 2.0. Therefore the logic and harness are different from iCub1</p> <ul> <li>iCub1.7.1 Logic</li> <li>iCub1.7.1 Harness</li> <li>iCub1.7.1 Motor&amp;board placement</li> </ul>"},{"location":"icub_wiring/icub2_x/","title":"iCub 2.x","text":""},{"location":"icub_wiring/icub2_x/#icub-2x-wiring","title":"iCub 2.x Wiring","text":"<ul> <li>The logic schematics consist of the logical and electrical connections between boards, sensors and motors. </li> <li>The harness schematics are the drawings of all the cables and bundles.</li> <li>In the image below, you will find the position of all the harnesses that you find in the pdf. </li> <li>In order to find a cable in the Harness file of your robot, you should start looking at this picture to find out where you have to look at. </li> <li>The Motor&amp;Board_Placement is the document where you can find the wireframe of the robot with all the electronic boards, motors and sensors labels.</li> </ul>"},{"location":"icub_wiring/icub2_x/#ethernet-backbone","title":"ETHERNET backbone","text":"<p>The system architecture of iCub 2.x with ETHERNET backbone is depicted in the following image:</p>"},{"location":"icub_wiring/icub2_x/#logic-and-harness-icub-25-e33-eth-full-robot-with-com-exp-and-mc4-plus","title":"Logic and Harness iCub 2.5-E3.3 (ETH) - Full robot with COM-EXP and MC4-PLUS","text":"<ul> <li>iCub 2.5 Motor Board Placement </li> <li>iCub2.5-E3.3.2 Logic</li> <li>iCub2.5_E3.3.2 Harness </li> </ul>"},{"location":"icub_wiring/icub2_x/#logic-and-harness-icub-27-e36-full-robot-with-high-performance-imu-on-the-waist-and-new-face-expressions","title":"Logic and Harness iCub 2.7-E3.6 - Full robot with high performance IMU on the waist and new face expressions","text":"<ul> <li>iCub 2.7 Motor Board Placement </li> <li>iCub2.7_E3.6.2 Logic</li> <li>iCub2.7_E3.6.2 Harness</li> </ul>"},{"location":"icub_wiring/icub2_x/#can-backbone","title":"CAN backbone","text":""},{"location":"icub_wiring/icub2_x/#logic-and-harness-icub-2x-e200","title":"Logic and Harness iCub 2.x-E2.0.0","text":"<ul> <li>iCub 2 Logic</li> <li>iCub 2 Harness</li> <li>Motor and Board Placement</li> </ul>"},{"location":"icub_wiring/icub2_x/#logic-and-harness-icub-23_e230-full-robot-with-talking-head","title":"Logic and Harness iCub 2.3_E2.3.0 - Full robot with Talking Head","text":"<ul> <li>iCub 2.3 Talking Head Logic</li> <li>iCub 2.3 Talking Head Harness</li> <li>iCub 2.3 Talking Head Motor and Board Placement</li> </ul>"},{"location":"icub_wiring/icub2_x/#logic-and-harness-icub-25_e251-full-robot-with-seaslegs","title":"Logic and Harness iCub 2.5_E2.5.1 - Full robot with Seaslegs","text":"<ul> <li>iCub 2.5 Seaslegs Logic</li> <li>iCub 2.5 Seaslegs Harness</li> <li>iCub 2.5 Seaslegs Motor and Board Placement</li> </ul>"},{"location":"icub_wiring/icub3_x/","title":"iCub 3.x","text":""},{"location":"icub_wiring/icub3_x/#icub-3x-wiring","title":"iCub 3.x Wiring","text":"<p>The system architecture of iCub 3 is depicted in the following image:</p> <p>Warning</p> <p>The documentation is still incomplete</p>"},{"location":"icub_wiring/icub3_x/#logic-and-harness-icub-30-e00-full-robot","title":"Logic and Harness iCub 3.0 E0.0 Full Robot","text":"<ul> <li>iCub 3_Upperbody Logic_0.0.0</li> <li>iCub 3_Upperbody Harness_0.0.0</li> <li>iCub 3_LowerBody Logic 0.0.2</li> <li>iCub 3_LowerBody Harness 0.0.0 </li> </ul>"},{"location":"neck/","title":"Summary","text":""},{"location":"neck/#neck","title":"Neck","text":""},{"location":"neck/#neck-mk3","title":"Neck MK3","text":"<ul> <li>Overview of the Neck MK3</li> </ul>"},{"location":"neck/neck_mk3/","title":"Neck MK3","text":""},{"location":"neck/neck_mk3/#introduction","title":"Introduction","text":"<p>This documentation page describes the new ergoCub/iCub <code>Neck MK3</code>. The development of the project has been carried out in icub-tech-iit/study-icub-headedge.</p> <p>The MK3 solution sports a compact tendonless serial kinematics mechanism that was designed precisely to circumvent the issues observed with the tendons employed in the MK2 prototype.</p> <p>The neck is compatible with both the ergoCub and iCub heads, with only minimal differences in the assembly.</p>"},{"location":"neck/neck_mk3/#general-description","title":"General description","text":"<p>Neck MK3 follows a 'SERIAL' configuration of joints in this order from bottom to top: <code>pitch</code>, <code>roll</code>, <code>yaw</code>. The interfaces with the head and the chest have been adapted to match the previous ones.</p> <p>The selected motors for the joints are:</p> <ul> <li><code>FAULHABER_3216W024BXTH</code> for pitch and roll</li> </ul> <ul> <li><code>FAULHABER_2214S024BXTH</code> for yaw</li> </ul> <p>Compared to the previous neck version, the MK3 neck designed for ergoCub is 10 mm higher, when measured from the pitch joint axis as in the figure below:</p> <p>The differences between the neck designed for iCub and the one for ergoCub are concerned with only two parts:</p> Alias in ergoCub Alias in iCub Description Images IC_033_P_044 IC_034_P_038 This component features hardstops along the edge for the <code>pitch</code> joint. The difference between ErgoCub and iCub lies in the allowed range of motion to prevent interference: for ergoCub -45 to +22 degrees; for iCub -30 to +22 degrees Figure A IC_033_P_041 IC_034_P_033 This part differs between the necks designed for ErgoCub and iCub in several aspects, including the overall height (the ErgoCub version is 10 mm taller) and the shape. In fact, in the version designed for iCub, it was necessary to carve out a space to allow the head frame to pass during yaw movement, which would otherwise cause interference Figure B"},{"location":"neck/neck_mk3/#range-of-motion","title":"Range of Motion","text":""},{"location":"neck/neck_mk3/#ergocub","title":"ergoCub","text":"Joint degrees PITCH -45; +22 ROLL -50; +50 YAW -45; +45"},{"location":"neck/neck_mk3/#icub","title":"iCub","text":"Joint degrees PITCH -30; +22 ROLL -50; +50 YAW -45; +45"},{"location":"robot_calibration_types/amo_encoder_joint_calibration_10_details/","title":"Calibration type 10 details - AMO Encoder Joint Calibration","text":"<p>This section illustrates the details of the calibration procedure used for the <code>iCub 3/ergoCub</code> joints that mount an AMO encoder at the slow shaft. As already detailed in the <code>calibration-type-10-procedure</code> joints provided with the <code>AMO</code> encoder are currently calibrated so that it can be handled as an incremental encoder coupled with a quadrature encoder placed at the motor.</p>"},{"location":"robot_calibration_types/amo_encoder_joint_calibration_10_details/#calibration-workflow","title":"Calibration workflow","text":"<p>Complete pipeline for the <code>calibration type 10</code> using <code>AMO encoder</code> at the joint and <code>quadrature encoder</code> at the motor.</p> <p> </p> <p>As you can see in the above-reported state machine, after the calibration command is received by the EMS, a timer of 30 seconds gets triggered; afterward, we wait until the motor encoder calibration ends; finally, the procedure of the calibration type 10 commences.</p> <p>The procedure basically consists in moving the slow shaft towards one of the hardware limits as defined in the position set within the calibration parameter <code>calibrationZero</code>. The value of the PWM used is in turn defined through the parameter <code>calibration1</code>. The joint moves until the limit is reached within a time window and within a predefined maximum length, whose values are coded in the firmware.</p> <p>Finally, if the <code>hard-stop</code> limit position is found before the <code>CALIBRATION TIMEOUT</code> expires, the zero of the <code>AMO encoder</code> is updated with the found offset and the whole calibration completes correctly; otherwise, the joint is moved to the <code>NOT CONFIGURED</code> state, the PWM is set to <code>zero</code> and the motor switched to <code>IDLE</code>.</p> <p>The FW verifies if the joint has reached the hard position by checking that the encoder position does not change for 1 second, meaning that the relative increase of joint position is smaller than 6.5 deg (1200 iCubDegrees) within 1 second. The encoder position considered for the check is processed to filter out the spikes.</p>"},{"location":"robot_calibration_types/icub3_calibration_types/","title":"Calibration Types available on iCub 3","text":"<p>The table below aims to provide expert users with some technical information about calibration types on <code>iCub 3</code> robot.</p> Calibration name Description Procedure Notes Rotor-stator autocalibration Automatic procedure to find the offset between the index position in the motor and the position that corresponds to zero electrical degrees in the stator To be executed after the first mechanical assembly and every time for some reason the stator needs to be unmounted from its housing Rotor index calibration At every startup of the robot, the motor moves in order to find the index of the reflective encoder Joint zero calibration TBD AMO calibration The AMO sensor needs to be calibrated with an external device. The calibration parameters are stored on an EEPROM that is in the AMO board Every time the magnetic target or the AMO board are moved a bit from their position (the calibration takes into account the position between the target and the sensor mounted on the board) Joint Limits and Zero calibration Put the robot in the zero position and acquire the value of the AMO sensor Only once Joint startup calibration The joint moves to a specific position At every startup after rotor index calibration"},{"location":"robot_calibration_types/standard_calibration_types/","title":"Standard Calibration Types","text":"<p>The aims of this document is to provide expert users with some technical information about <code>joints</code> calibration types on our robots (e.g., <code>iCub</code>, <code>ergoCub</code>, <code>R1</code>) that are based on Ethernet, in order to set the desired <code>zero position</code> of the robot.</p> <p>The type of calibration depends on the encoders and on the mechanics of the joints.</p> <p>There exist currently 12 types of calibrations that will be explained in detail in the following sections.</p> <p>The calibration procedure is performed by the firmware each time the robot starts up and it makes use of the following calibration parameters written in calibration files:</p> <ul> <li><code>Calibration type</code>: it is the type of calibration. Its values should be included in [1,12]. Based on its value the meaning of the parameters <code>calibration1</code>, <code>calibration2</code>, <code>calibration3</code>, <code>calibration4</code>, <code>calibration5</code> changes. Usually they are expressed in machine units.</li> <li><code>calibrationZero</code>: for historical reasons, is the value in degree at <code>0.0 position</code>. Now for several calibrations it is not necessary, so its value is <code>0.0</code>.</li> <li><code>calibrationDelta</code>: this parameter can be changed by user to tuning the calibration, in order to set the zero of joint in the correct position (fine calibration).</li> </ul> <p>It is important to notice that the firmware does not deal with either <code>calibrationZero</code> or <code>calibrationDelta</code> parameters independently, but it has only the sum of the two: <code>calibrationZero + calibrationDelta</code>.  For this reason, if the calibration needs a particular value of <code>calibrationZero</code>, please insert that value, because it is mandatory.</p>"},{"location":"robot_calibration_types/standard_calibration_types/#general-procedure-for-retrieving-calibration-parameters","title":"General procedure for retrieving calibration parameters","text":"<ol> <li> <p>First off, you need to make sure that the boards have been reset after last calibration. If not, please swich off and swich on the boards.</p> </li> <li> <p>In the general.xml file set both <code>useRawEncoderValue</code> and <code>skipCalibration</code> parameters to <code>true</code></p> </li> <li> <p>Press the fault button, so that you are sure that the procedure runs safely.</p> </li> <li> <p>Launch <code>yarprobotinterface</code>. You will see that <code>yarprobotInterface</code> tells you to press fault button and wait until the user presses enter.</p> </li> <li> <p>Start the calibration procedure depending on the calibration type.</p> </li> </ol>"},{"location":"robot_calibration_types/standard_calibration_types/#general-rules-for-each-calibration-type","title":"General rules for each calibration type","text":"<ol> <li> <p>At the end of calibration, the joint has to be inside of user limits, if not the controller sets the joint in hardware fault.</p> </li> <li> <p>If during calibration something goes wrong, then the controller sets the joint in <code>hardware fault</code> or leaves the joint in <code>not configured</code> state.</p> </li> </ol>"},{"location":"robot_calibration_types/standard_calibration_types/#the-available-calibrations-in-details","title":"The available calibrations in details","text":"<p>Here are described the usage of the various calibration types; the <code>param</code> are in the calibrators files where you'll find a file for each part of the robot and looks like :</p> <pre><code> &lt;group name=\"CALIBRATION\"&gt;\n        &lt;param name=\"calibrationType\"&gt;      12         12          12          12           5           5           &lt;/param&gt;\n        &lt;param name=\"calibration1\"&gt;         30600   31535       46239        6687        3000        3000           &lt;/param&gt;\n        &lt;param name=\"calibration2\"&gt;         0           0           0           0        8192        8192           &lt;/param&gt;\n        &lt;param name=\"calibration3\"&gt;         0           0           0           0           0           0           &lt;/param&gt; \n        &lt;param name=\"calibration4\"&gt;         0           0           0           0           0           0           &lt;/param&gt;\n        &lt;param name=\"calibration5\"&gt;         0           0           0           0           0           0           &lt;/param&gt;                \n        &lt;param name=\"calibrationZero\"&gt;      0           0           0           0           0           0           &lt;/param&gt;\n        &lt;param name=\"calibrationDelta\"&gt;     0           0           0           0           0           0           &lt;/param&gt; \n\n        &lt;param name=\"startupPosition\"&gt;      0           0           0           0           0           0           &lt;/param&gt;        \n        &lt;param name=\"startupVelocity\"&gt;      10          10          20          20          20          20          &lt;/param&gt;        \n        &lt;param name=\"startupMaxPwm\"&gt;        3000        3000        3000        3000        0           0           &lt;/param&gt;        \n        &lt;param name=\"startupPosThreshold\"&gt;  90          90          2           2           2           2           &lt;/param&gt;        \n  &lt;/group&gt; \n</code></pre>"},{"location":"robot_calibration_types/standard_calibration_types/#calibration-5","title":"Calibration 5","text":"<p>This calibration is used on joints with incremental encoder that needs to reach a hardware stop to take the reference position.</p> <code>Calibration type</code> 5 <code>calibration1</code> the pwm used to reach the hardstop <code>calibration2</code> raw position at hardstop <code>calibration3</code> not used <code>calibration4</code> not used <code>calibration5</code> not used <code>calibrationZero</code> 0.0 (only correct value) <code>calibrationDelta</code> defined by user expressed in degree <p>Note</p> <p>The hardstop could be out of range of user limits, but it needs to be inside hardware limits; so the hardstop could be a hardware limit and the joint is calibrated after reaching it, but the controller verifies that the first received setpoint is inside user limits, else limits it to the nearest user limit.</p>"},{"location":"robot_calibration_types/standard_calibration_types/#calibration-6","title":"Calibration 6","text":"<p>This calibration can be used for joint with <code>MAIS</code> and <code>FAP</code> board encoders. On iCub robots, distal and proximal joints use <code>MAIS</code>, while <code>FAP</code> are employed on ergoCub fingers. This calibration is used also to calibrate the motor encoder setting its zero to a given position. In this way, the motor controller engine can check that the joint moves inside the rotor limits specified in the mechanical configuration file avoiding dangerous situations like winding to much cable and pushing against the hardware limit.</p> <code>Calibration type</code> 6 <code>calibration1</code> not used <code>calibration2</code> velocity expressed in iCubDegree/s <code>calibration3</code> 1 if distal joint, -1 if proximal joint. (Any other value is not accepted) <code>calibration4</code> mais/fap raw value read with open hand <code>calibration5</code> mais/fap raw value read with closed hand <code>calibrationZero</code> 0.0 (only value corrected) <code>calibrationDelta</code> defined by user expressed in degree <p>Info</p> <p>Calibration 6 MAIS uses <code>mais</code> raw values to calculate the joint encoder factor and the offset of 0.0 position. Moreover, it calibrates the motor incremental encoder moving the joint toward a target position in a way specified by the parameter <code>calibration3</code>. If it is <code>-1</code>, then the joint moves to the position written in <code>calibration4</code>, otherwise the joint moves to <code>calibration5</code>.</p> <p>Calibration 6 FAP, instead, does not calculate either the joint encoder factor or the offset of the 0.0 position because the calibration of the FAP absolute encoder is performed manually. Therefore, the fingers are manually moved by checking the raw values and then the <code>offset</code>, the <code>rotation</code>, and the <code>invertDirection</code> parameters are specified in the POS service configuration file, in order to have the fingers rotation comprised in the range [~0, ~90] deg, in the desired direction. When the FAP is calibrated and works properly (the procedure described above shall be done just once, after the hand is mounted), the calibration 6 procedure can start. The steps are the same as those in <code>calibration6 mais</code>. Therefore, the motor encoder gets calibrated by moving the joint to the target position depending on the value of <code>calibration3</code> parameter: if it is <code>-1</code>, then the joint moves to the position written in <code>calibration4</code>, otherwise the position expressed in <code>calibration5</code> is used as target. Thereby, the rationale of this procedure is to find the zero as well as the offset of the motor incremental encoder. The movement is performed using the velocity specified in <code>calibration2</code> parameter. If the joint reaches the target position then the calibration ends successfully.</p>"},{"location":"robot_calibration_types/standard_calibration_types/#calibration-7","title":"Calibration 7","text":"<p>This calibration is used for joint with absolute analog sensor. On iCub robot, this encoder is mounted on abduction fingers and on abduction thumb joints.</p> <code>Calibration type</code> 7 <code>calibration1</code> not used <code>calibration2</code> not used <code>calibration3</code> not used <code>calibration4</code> sensor raw value read with open hand <code>calibration5</code> sensor raw value read with closed hand <code>calibrationZero</code> 0.0 (only value corrected) <code>calibrationDelta</code> defined by user expressed in degree <p>Info</p> <p>In order to guarantee the maximum possible resolution and to provide the simples calibration procedure to the user, this calibration calculates the joint encoder factors and the offset of 0.0 position, using the raw values.</p>"},{"location":"robot_calibration_types/standard_calibration_types/#calibration-8-9","title":"Calibration 8, 9","text":"<p>Calibration <code>type 8</code> and <code>type 9</code> are similar since they are used in R1 tripod joints, which are actuated by linear actuators with incremental encoders. </p> <p>They are both hard-stop calibrations, but the difference is that <code>type 8</code> calibration (wrist) makes use of limit switches readable by the <code>MC4+</code> control board, while the torso tripod linear actuators (<code>type 9</code>) have limit switches as well, but they aren't readable by the control board. </p> <p>So, when the motor stops during the calibration, it is assumed that the hard-stop is reached.</p> <p>In both <code>type 8</code> and <code>type 9</code> hard-stop calibration a counter reaction mechanism prevents some joints to move much farther than others in order to prevent damages to the structure. So a joint is slowed down if it is going faster than the others.  If for some reason it insn't enough, the calibration fails.</p> <code>Calibration type</code> 8 or 9 <code>calibration1</code> pwm during calibration <code>calibration2</code> maximum encoder difference treshold between two calibrating motors (safety mechanism described above) <code>calibration3</code> not used <code>calibration4</code> not used <code>calibration5</code> not used <code>calibrationZero</code> 0.0 (only value corrected) <code>calibrationDelta</code> defined by user expressed in degree"},{"location":"robot_calibration_types/standard_calibration_types/#calibration-10","title":"Calibration 10","text":"<p>This calibration is used for joints with relative encoders, which are calibrated by moving against the hard-stop limit. It is used for example in R1 lower arm pronosupination and in iCub 3 when AMO sensors are used as relative encoders.</p> <p>Regarding iCub 3 and the AMO boards, the AMO magnetic target is subdivided into 64 or 32 sectors. The AMO sensor provides a 14-bit resolution per sector, for a total of 14+6=20 or 14+5=19 bits per revolution resolution, respectively. The <code>Gearbox_E2J</code> parameter must be configured with the number of sectors in the corresponding <code>mechanicals/part-mec.xml</code> file.</p> <p>Further details of how the workflow of the whole calibration type 10 is managed are outlined on this page.</p> <code>Calibration type</code> 10 <code>calibration1</code> PWM used to move to hard-stop limit <code>calibration2</code> not used <code>calibration3</code> not used <code>calibration4</code> not used <code>calibration5</code> not used <code>calibrationZero</code> position (in degrees) at the hard-stop limit <code>calibrationDelta</code> defined by user expressed in degree <p>Note</p> <p>On AMO-based robots (e.g., iCub 3, ergoCub), the AMO sensors can be completely disabled to favor the use of the quadrature encoders only by changing the value of the <code>amo</code> parameter to <code>none</code> within the <code>hardware/motorControl/*service.html</code> files.</p>"},{"location":"robot_calibration_types/standard_calibration_types/#calibration-12","title":"Calibration 12","text":"<p>This calibration is used for joint with absolute encoder, it is the newest version of calibration 3 and it simplifies the calibration procedure for the user; in fact the user needs only to write in calibration1 parameter the raw value read when joint is in 0.0 position and the firmware calculates the correct offset.</p> <code>Calibration type</code> 12 <code>calibration1</code> raw position at the zero position defined by user <code>calibration2</code> not used <code>calibration3</code> not used <code>calibration4</code> not used <code>calibration5</code> not used <code>calibrationZero</code> 0.0 (only value corrected) <code>calibrationDelta</code> defined by user expressed in degree"},{"location":"robot_calibration_types/standard_calibration_types/#calibration-14","title":"Calibration 14","text":"<p>This calibration is used for joints with the absolute encoder at the joint (which currently works with POS service / FAP encoder sensor) and with incremental encoder at the motor. Moreover, it is applied to joints whose motor is provided with hard-stop mechanical limits. Specifically, this type of calibration is used when you need to reach one of the two mechanical limits on the joint motor, aiming at calibrating the incremental encoder at the motor and accurately setting the hardware limits between which the rotor can move.</p> <p>Find below some steps aimed to help you determine the correct values of the parameters to be set in the calibration sections of the configuration files. First, set to <code>true</code> the boolean variables <code>skipCalibration</code> and <code>useRawEncoderData</code> in the file <code>general.xml</code>. This is meant to disable calibration at <code>yarprobotinterface</code> startup. Also, this will make the port <code>/ergocub/left_arm/state:o</code> print the raw values (i.e., uncalibrated) for the finger joint encoders.  Once done, you should check the values printed out by the port running in a terminal the command:</p> <pre><code>yarp read ... /ergocub/left_arm/state:o\n</code></pre> <p>and by doing this you can observe which should be the raw value of the offset for the encoder joint when the finger is at the hard-stop position (ideally finger full open). Thus, you should set this value (with the same sign of the value printed by the port) as the value for the parameter <code>calibration5</code>. After that, by observing how the values printed out by the port change, you would check if the <code>invert direction</code>, i.e. <code>calibration3</code> value, should be <code>1</code> or <code>0</code> and if a specific value of rotation should be added at <code>calibration4</code> in order to prevent the encoder from crossing the zero while finger joint is moving.</p> <code>Calibration type</code> 14 <code>calibration1</code> PWM used to move to hard-stop limit <code>calibration2</code> Final position (in iCubDegrees) at the hard-stop limit [motor zero] <code>calibration3</code> Invert direction boolean parameter <code>calibration4</code> Rotation (in iCubDegrees) parameter <code>calibration5</code> Offset (in iCubDegrees) parameter <code>calibrationZero</code> 0.0 (only value corrected) <code>calibrationDelta</code> defined by user expressed in degree <p>Note</p> <p>The <code>calibration14</code> rotation parameter cannot assume any value. Allowed values are: <code>0</code>, <code>32768</code>, <code>16384</code>, <code>-16384</code>, expressed in <code>iCubDegrees</code> as specified in the table above. Specifically, these values correspond to the following numbers in degrees: <code>0</code>, <code>180</code>, <code>90</code>, <code>-90</code>. Notice how these values are only accepted without decimals; therefore, only integer parts are checked. In fact, multiplying the degrees by the conversion factor, defined in the Legend section, generates outputs with decimals. Thus, it has been decided to round them up.</p> <p>Info</p> <p>Considering that this calibration works in close relation with absolute encoders, it is necessary to keep in mind the following note.   First, <code>calibration type 14</code> has been designed to work with finger joints and specifically it is currently tested on joints that use <code>FAP</code> encoders. However, it should work similarly with other types of absolute encoders. In particular, the parameters that should be modified are <code>calibration3</code>, <code>calibration4</code>, and <code>calibration5</code>.   Another detail to cite is also related to the aforementioned <code>FAP</code> parameters. Specifically, it has been chosen to pass those data in <code>iCubDegree</code>, but it is known that <code>POS</code> service, which manages the <code>FAP</code> encoder, use different datatype, especially for the rotation parameter that is defined by an <code>enum type</code>. Therefore, in the firmware, this conversion is managed.    In this manner, during the calibration phase, the absolute encoder is calibrated first, by setting the <code>offset</code> and adjusting it using <code>invertdirection</code> and <code>rotation</code> if different than zero.    Then, the algorithm moves the incremental encoder at the motor to the <code>hard limit</code> (at open or closed finger based on the PWM sign) at setting <code>calibration2</code> as the <code>motor zero</code>.    After that, <code>rotorPosMin</code>, and <code>rotorPosMax</code> passed in the mechanical configuration file, are set as the rotor limits. Thus, the motor will move only between those limits (expressed in degrees at motor).</p>"},{"location":"robot_calibration_types/standard_calibration_types/#legend","title":"Legend","text":"<ul> <li><code>iCubDegree</code>: the firmware uses iCubDegree instead of degree in order to use more resolution.</li> </ul> <p>Info</p> <p>1 Degree = 182.044 iCubDegree, where 182.044 is 65535/360; The value 182.044 is contained in the parameter \u201cEncoder\u201d of mechanical configuration files of each robot.</p> <ul> <li><code>Encoder conversion</code> factor: is the factor used by firmware to convert the value read from encoder to iCubDegree.</li> </ul>"},{"location":"robot_power/robot_power_button/","title":"Power push buttons","text":"<p>The power push buttons on the iCub 2.5 backpack and on the iCub3 back have different meaning depending on their colors. They have LEDs that can be steady or blinking.</p> LED Status Description Problem Action/Note OFF Power supply / battery off ? - check the power supply connection / check the battery charge  - switch on power supply / charge the battery STEADY RED Power ready No push buttons to switch on CPU or motors BLINKING RED Power ready Yes - overcurrent occurred - press and hold few seconds to try again and if overcurrent persists contact technical support STEADY GREEN Power on No correct operation BLINKING GREEN Power on transient No start-up phase, max 20s delay to steady state iCub 2.5 iCub 3 <p>On iCub3 and on R1 there is also a display that shows the voltage and current present, even the red/green icon with the same meaning as the push button LEDs (R1 doesn't have the colored buttons).</p> iCub 3 R1"},{"location":"robot_power/robot_power_button/#display-interface","title":"Display Interface","text":"<p>Lately, we released a new version of the Display UX/UI. The main screen is described in the image below for both iCub3, ergoCub, and R1:</p> <p></p> <p>If a fault occurs, the Display will switch to a different mode displaying a string that includes the error type and the last values of voltage and currents acquired at the moment of the fault.</p> <p>An example is shown below. On the left, the errors are related to CPU line, whereas on the right, we have errors related to BOARDS/MOTORS line.</p> <p></p>"},{"location":"robot_sensors/","title":"Sensors mounted on the iCub family of robots","text":"<p>This page provides information on how to access data streamed by the sensors and devices mounted on the robots. The sensors include cameras, force-torque sensors, controlboards, and many more.</p> <p>For details on the types of sensors and interfaces available see the YARP Network Wrapper Server convention.</p>"},{"location":"robot_sensors/#table-of-sensors-for-each-robot","title":"Table of sensors for each robot","text":"<ul> <li>iCub 2.7</li> <li>iCub 3</li> <li>ergoCub</li> </ul>"},{"location":"robot_sensors/ergocub_sensors/","title":"Sensors mounted on ergoCub","text":"<p>This page lists all the sensors mounted on ergoCub, and how to access their information.</p>"},{"location":"robot_sensors/ergocub_sensors/#head","title":"Head","text":"Type Sensor Name Device YARP Port Data pattern Publish rate (Hz) ControlBoard <code>head</code> MC4PLUS <code>/ergocub/head/state:o</code> (joint_encoders) 100 - - - <code>/ergocub/head/stateExt:o</code> Defined in stateExt.thrift 100 IMU <code>head/imu</code> RFE, BNO055 <code>/ergocub/head/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 Depth Camera <code>depthCamera</code> Intel Realsense D450 <code>/ergocub/depthCamera/rgbImage:o</code> ( (R channel)  (G channel)  (B channel) ) 30 - - - <code>/ergocub/depthCamera/depthImage:o</code> (depth_pixels_list) 30 Lidar <code>laser</code> Slamtec RP Lidar S2 <code>/ergocub/laser:o</code> Defined in LaserScan2D.thrift 100"},{"location":"robot_sensors/ergocub_sensors/#torso","title":"Torso","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>torso</code> EMS+2FOC <code>/ergocub/torso/state:o</code> (joint_encoders) 100 - - - <code>/ergocub/torso/stateExt:o</code> Defined in stateExt.thrift 100 Battery <code>battery</code> BMS <code>/ergocub/battery</code> (voltage current charge temperature status) 1 IMU <code>waist/inertials</code> XSense MTi-600 <code>/ergocub/waist/inertials/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/ergocub_sensors/#left-arm","title":"Left Arm","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>left_arm</code> EMS+2FOC, MC4PLUS, AMC+AMCBLDC <code>/ergocub/left_arm/state:o</code> (joint_encoders) 100 - - - <code>/ergocub/left_arm/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensor <code>left_arm/FT</code> FT45 <code>/ergocub/left_arm/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>left_arm/imu</code> STRAIN2, BNO055 <code>/ergocub/left_arm/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 - <code>left_arm/inertialMTB</code> MTB4, BNO055 <code>/ergocub/left_arm/inertialMTB/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/ergocub_sensors/#right-arm","title":"Right Arm","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>right_arm</code> EMS+2FOC, MC4PLUS, AMC+AMCBLDC <code>/ergocub/right_arm/state:o</code> (joint_encoders) 100 - - - <code>/ergocub/right_arm/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensor <code>right_arm/FT</code> FT45 <code>/ergocub/right_arm/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>right_arm/imu</code> STRAIN2, BNO055 <code>/ergocub/right_arm/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 - <code>right_arm/inertialMTB</code> MTB4, BNO055 <code>/ergocub/right_arm/inertialMTB/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/ergocub_sensors/#left-leg","title":"Left Leg","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>left_leg</code> EMS+2FOC <code>/ergocub/left_leg/state:o</code> (joint_encoders) 100 - - - <code>/ergocub/left_leg/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensors <code>left_leg/FT</code> FT45, FT58 <code>/ergocub/left_leg/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>left_leg/imu</code> STRAIN2, BNO055 <code>/ergocub/left_leg/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 - <code>left_foot_heel_tiptoe/imu</code> STRAIN2, BNO055 <code>/ergocub/left_foot_heel_tiptoe/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/ergocub_sensors/#right-leg","title":"Right Leg","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>right_leg</code> EMS+2FOC <code>/ergocub/right_leg/state:o</code> (joint_encoders) 100 - - - <code>/ergocub/right_leg/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensors <code>right_leg/FT</code> FT45, FT58 <code>/ergocub/right_leg/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>right_leg/imu</code> STRAIN2, BNO055 <code>/ergocub/right_leg/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 - <code>right_foot_heel_tiptoe/imu</code> STRAIN2, BNO055 <code>/ergocub/right_foot_heel_tiptoe/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/icub2.7_sensors/","title":"Sensors mounted on iCub 2.7","text":"<p>This page lists all the sensors mounted on iCub 2.7, and how to access their information.</p>"},{"location":"robot_sensors/icub2.7_sensors/#head","title":"Head","text":"Type Sensor Name Device YARP Port Data pattern Publish rate (Hz) ControlBoard <code>head</code> MC4PLUS <code>/icub/head/state:o</code> (joint_encoders) 100 - - - <code>/icub/head/stateExt:o</code> Defined in stateExt.thrift 100 ControlBoard <code>face</code> MC4PLUS <code>/icub/face/state:o</code> (joint_encoders) 100 - - - <code>/icub/face/stateExt:o</code> Defined in stateExt.thrift 100 IMU <code>head/inertials</code> RFE, BNO055 <code>/icub/head/inertials/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 Eyes cameras <code>head/cam</code> Dragonfly <code>/icub/head/cam/left</code> ( (R channel)  (G channel)  (B channel) ) 30 - - - <code>/icub/head/cam/right</code> ( (R channel)  (G channel)  (B channel) ) 30"},{"location":"robot_sensors/icub2.7_sensors/#torso","title":"Torso","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>torso</code> EMS+2FOC <code>/icub/torso/state:o</code> (joint_encoders) 100 - - - <code>/icub/torso/stateExt:o</code> Defined in stateExt.thrift 100 IMU <code>waist/inertials</code> MTB, BNO055 <code>/icub/waist/inertials/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/icub2.7_sensors/#left-arm","title":"Left Arm","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>left_arm</code> EMS+2FOC, MC4PLUS <code>/icub/left_arm/state:o</code> (joint_encoders) 100 - - - <code>/icub/left_arm/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensor <code>left_arm/FT</code> FT45 <code>/icub/left_arm/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>left_arm/inertials</code> STRAIN2, BNO055 <code>/icub/left_arm/inertials/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 Skin <code>left_hand</code> MAIS <code>/icub/left_hand/analog:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/icub2.7_sensors/#right-arm","title":"Right Arm","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>right_arm</code> EMS+2FOC, MC4PLUS <code>/icub/right_arm/state:o</code> (joint_encoders) 100 - - - <code>/icub/right_arm/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensor <code>right_arm/FT</code> FT45 <code>/icub/right_arm/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>right_arm/inertials</code> STRAIN2, BNO055 <code>/icub/right_arm/inertials/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 Skin <code>right_hand</code> MAIS <code>/icub/right_hand/analog:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/icub2.7_sensors/#left-leg","title":"Left Leg","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>left_leg</code> EMS+2FOC <code>/icub/left_leg/state:o</code> (joint_encoders) 100 - - - <code>/icub/left_leg/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensors <code>left_leg/FT</code> FT45 <code>/icub/left_leg/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>left_leg/imu</code> STRAIN2, BNO055 <code>/icub/left_leg/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 - <code>left_foot/imu</code> STRAIN2, BNO055 <code>/icub/left_foot/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/icub2.7_sensors/#right-leg","title":"Right Leg","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>right_leg</code> EMS+2FOC <code>/icub/right_leg/state:o</code> (joint_encoders) 100 - - - <code>/icub/right_leg/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensors <code>right_leg/FT</code> FT45 <code>/icub/right_leg/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>right_leg/imu</code> STRAIN2, BNO055 <code>/icub/right_leg/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 - <code>right_foot/imu</code> STRAIN2, BNO055 <code>/icub/right_foot/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/icub3_sensors/","title":"Sensors mounted on iCub 3","text":"<p>This page lists all the sensors mounted on iCub 3, and how to access their information.</p>"},{"location":"robot_sensors/icub3_sensors/#head","title":"Head","text":"Type Sensor Name Device YARP Port Data pattern Publish rate (Hz) ControlBoard <code>head</code> MC4PLUS <code>/icub/head/state:o</code> (joint_encoders) 100 - - - <code>/icub/head/stateExt:o</code> Defined in stateExt.thrift 100 IMU <code>head/imu</code> RFE, BNO055 <code>/icub/head/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 Eyes cameras <code>head/cam</code> Basler daA4200-30mci <code>/icub/head/cam/left</code> ( (R channel)  (G channel)  (B channel) ) 30 - - - <code>/icub/head/cam/right</code> ( (R channel)  (G channel)  (B channel) ) 30"},{"location":"robot_sensors/icub3_sensors/#torso","title":"Torso","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>torso</code> EMS+2FOC <code>/icub/torso/state:o</code> (joint_encoders) 100 - - - <code>/icub/torso/stateExt:o</code> Defined in stateExt.thrift 100 Battery <code>batttery</code> BMS <code>/icub/battery</code> 1"},{"location":"robot_sensors/icub3_sensors/#left-arm","title":"Left Arm","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>left_arm</code> EMS+2FOC, MC4PLUS <code>/icub/left_arm/state:o</code> (joint_encoders) 100 - - - <code>/icub/left_arm/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensor <code>left_arm/FT</code> FT45 <code>/icub/left_arm/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>left_arm/imu</code> STRAIN2, BNO055 <code>/icub/left_arm/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 - <code>left_arm/inertialMTB</code> MTB4, BNO055 <code>/icub/left_arm/inertialMTB/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/icub3_sensors/#right-arm","title":"Right Arm","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>right_arm</code> EMS+2FOC, MC4PLUS <code>/icub/right_arm/state:o</code> (joint_encoders) 100 - - - <code>/icub/right_arm/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensor <code>right_arm/FT</code> FT45 <code>/icub/right_arm/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>right_arm/imu</code> STRAIN2, BNO055 <code>/icub/right_arm/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 - <code>right_arm/inertialMTB</code> MTB4, BNO055 <code>/icub/right_arm/inertialMTB/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/icub3_sensors/#left-leg","title":"Left Leg","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>left_leg</code> EMS+2FOC <code>/icub/left_leg/state:o</code> (joint_encoders) 100 - - - <code>/icub/left_leg/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensors <code>left_leg/FT</code> FT45, FT58 <code>/icub/left_leg/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>left_leg/imu</code> STRAIN2, BNO055 <code>/icub/left_leg/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 - <code>left_foot_heel_tiptoe/imu</code> STRAIN2, BNO055 <code>/icub/left_foot_heel_tiptoe/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/icub3_sensors/#right-leg","title":"Right Leg","text":"Type Sensor name Device YARP Port Data pattern Publish Rate (Hz) ControlBoards <code>right_leg</code> EMS+2FOC <code>/icub/right_leg/state:o</code> (joint_encoders) 100 - - - <code>/icub/right_leg/stateExt:o</code> Defined in stateExt.thrift 100 Force-Torque Sensors <code>right_leg/FT</code> FT45, FT58 <code>/icub/right_leg/FT/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 IMU <code>right_leg/imu</code> STRAIN2, BNO055 <code>/icub/right_leg/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100 - <code>right_foot_heel_tiptoe/imu</code> STRAIN2, BNO055 <code>/icub/right_foot_heel_tiptoe/imu/measures:o</code> Defined in  multipleAnalogSensorsSerializations.thrift 100"},{"location":"robot_sensors/yarp_nws_convention/","title":"YARP network wrapper servers convention","text":""},{"location":"robot_sensors/yarp_nws_convention/#introduction","title":"Introduction","text":"<p>The iCub robot (and all the other models) exposes its functionalities (sensors and actuators) via YARP devices called YARP's Network Wrapper Servers (NWSs) that publish information over YARP ports. For historical reasons, for each type of functionality such as \"controlboards\" (i.e measure of joint-related sensors and capability of setting setpoints of low-level control loops), inertial measurement units, force torque sensors, multiple devices are used, one for each iCub's \"part\".</p> <p>The \"parts\" of iCub are:</p> <ul> <li><code>head</code></li> <li><code>left_arm</code></li> <li><code>right_arm</code></li> <li><code>torso</code></li> <li><code>left_leg</code></li> <li><code>right_leg</code></li> </ul> <p>Not all iCubs have all their six parts. There are iCub variants that are composed only by the <code>head</code>, or iCub variants that are composed only by the legs. In some contexts, even a special part called <code>alljoints</code> is defined and used, to represent all the different parts of the robot combined.</p> <p>To maintain generality, we will use the string <code>robotPortPrefix</code>, which can have different values, depending on the robot:</p> <ul> <li><code>icub</code> for physical iCub robots</li> <li><code>icubSim</code> for simulated iCub robots</li> <li><code>ergoCub</code> for physical ergoCub robots</li> <li><code>ergoCubSim</code> for simulated ergoCub robots</li> </ul> <p>Next, we will list the port convention for each type of functionality. For each part, the <code>name</code> string is used. The YARP port will then be composed as: <code>/&lt;robotPortPrefix&gt;/&lt;partName&gt;/...</code>. For example, functionalities associated to the iCub head start as <code>/icub/head</code>.</p>"},{"location":"robot_sensors/yarp_nws_convention/#controlboards","title":"Controlboards","text":"<p>The <code>ControlBoard</code> functionality is exposed via the <code>controlBoard_nws_yarp</code> device. It can be used to get and set input-output quantities associated to the part's joints, by communicating with the ETH boards of the robot.</p> <p>For each part, there will be a <code>controlBoard_nws_yarp</code> device that will open the following YARP ports:</p> <ul> <li> <p><code>/&lt;robotPortPrefix&gt;/&lt;partName&gt;/state:o</code> : Publishes encoders' information for the part</p> </li> <li> <p><code>/&lt;robotPortPrefix&gt;/&lt;partName&gt;/stateExt:o</code> : Publishes extended joint-level sensors information for the part (e.g. joint encoders, motor encoders, pwm values), using the structure defined in stateExt.thrift</p> </li> <li> <p><code>/&lt;robotPortPrefix&gt;/&lt;partName&gt;/rpc:i</code> : Exposes several information related to the part via a YARP RPC port</p> </li> <li> <p><code>/&lt;robotPortPrefix&gt;/&lt;partName&gt;/command:i</code> : Takes in input references for the low-level control loops</p> </li> </ul>"},{"location":"robot_sensors/yarp_nws_convention/#controlboard-client-device","title":"Controlboard client device","text":"<p>The YARP ports are not meant to be accessed directly, but should be accessed instead via the client device <code>remote_controlboard</code>. The device will expose sensors data and actuator commands thanks to the related Motor interfaces.</p>"},{"location":"robot_sensors/yarp_nws_convention/#inertial-measurements-units-imus","title":"Inertial Measurements Units (IMUs)","text":"<p>Inertial Measurements Units functionalities are exposed via the <code>multipleanalogsensorsserver</code> YARP device. The <code>inertials</code> string added to the YARP port name, to identify the device: <code>/&lt;robotPortPrefix&gt;/&lt;partName&gt;/inertials</code>.</p> <p>For each part, there will be a <code>multipleanalogsensorsserver</code> device that will open the following YARP ports:</p> <ul> <li> <p><code>/&lt;robotPortPrefix&gt;/&lt;partName&gt;/inertials/measures:o</code> : Publishes sensors information for the part, using the structure defined in multipleAnalogSensorsSerializations.thrift</p> </li> <li> <p><code>/&lt;robotPortPrefix&gt;/&lt;partName&gt;/inertials/rpc:o</code> : Exposes several information related to the part via a YARP RPC port</p> </li> </ul>"},{"location":"robot_sensors/yarp_nws_convention/#imu-client-device","title":"IMU Client device","text":"<p>Warning</p> <p>These YARP ports are not meant to be accessed directly, but should be accessed instead via the <code>multipleanalogsensorsclient</code> device.</p> <p>The client device will expose sensors related to the following Multiple Analog Sensors Interfaces, so they can be easily queried:</p> <ul> <li> <p><code>yarp::dev::IOrientationSensors</code></p> </li> <li> <p><code>yarp::dev::IThreeAxisGyroscopes</code></p> </li> <li> <p><code>yarp::dev::IThreeAxisLinearAccelerometers</code></p> </li> <li> <p><code>yarp::dev::IThreeAxisMagnetometers</code></p> </li> </ul>"},{"location":"robot_sensors/yarp_nws_convention/#force-torque-sensors","title":"Force-Torque Sensors","text":"<p>Force-Torque Sensors functionalities are exposed via the <code>multipleanalogsensorsserver</code> YARP device. The <code>FT</code> string added to the YARP port name, to identify the device: <code>/&lt;robotPortPrefix&gt;/&lt;partName&gt;/FT</code>.</p> <p>For each part, there will be a <code>multipleanalogsensorsserver</code> device that will open the following YARP ports:</p> <ul> <li> <p><code>/&lt;robotPortPrefix&gt;/&lt;partName&gt;/FT/measures:o</code> : Publishes sensors information for the part, using the structure defined in robotology/yarp@<code>master</code>/src/devices/multipleAnalogSensorsMsgs/multipleAnalogSensorsSerializations.thrift</p> </li> <li> <p><code>/&lt;robotPortPrefix&gt;/&lt;partName&gt;/FT/rpc:o</code> : Exposes several information related to the part via a YARP RPC port</p> </li> </ul>"},{"location":"robot_sensors/yarp_nws_convention/#ft-client-device","title":"FT Client device","text":"<p>Warning</p> <p>These YARP ports are not meant to be accessed directly, but should be accessed instead via the <code>multipleanalogsensorsclient</code> device.</p> <p>The client device will expose sensors related to the following Multiple Analog Sensors Interfaces:</p> <ul> <li> <p><code>yarp::dev::ISixAxisForceTorqueSensors</code></p> </li> <li> <p><code>yarp::dev::ITemperatureSensors</code></p> </li> </ul>"},{"location":"robot_sensors/yarp_nws_convention/#cameras","title":"Cameras","text":""},{"location":"robot_sensors/yarp_nws_convention/#eyes","title":"Eyes","text":"<p>RGB cameras mounted in the eyes of iCub are exposed via the <code>frameGrabber_nws_yarp</code> YARP device. The port names do not follow the convention mentioned above, but use the naming <code>/&lt;robotPortPrefix&gt;/cam/&lt;side&gt;</code>. the <code>side</code> string can be either <code>left</code> or <code>right</code>, depending on the eye.</p> <p>For each eye, there will be a <code>frameGrabber_nws_yarp</code> that will open the following YARP ports:</p> <ul> <li><code>/&lt;robotPortPrefix&gt;/cam/&lt;side&gt;</code>: Publishes the camera's RGB image</li> <li><code>/&lt;robotPortPrefix&gt;/cam/&lt;side&gt;/rpc</code> : Exposes several information related to the part via a YARP RPC port</li> </ul>"},{"location":"robot_sensors/yarp_nws_convention/#camera-client-device","title":"Camera client device","text":"<p>Warning</p> <p>These YARP ports are not meant to be accessed directly, but should be accessed instead via the <code>remote_framegrabber</code> device.</p> <p>The client device will expose the sensors thanks to the related Media Interfaces.</p>"},{"location":"robot_sensors/yarp_nws_convention/#depth-cameras","title":"Depth cameras","text":"<p>Depth cameras, such as the Intel Realsense series of devices, have their capabilities exposed by the <code>RgbdSensor_nws_yarp</code> device. The port names do not follow the convention mentioned above, but use the naming <code>/&lt;robotPortPrefix&gt;/&lt;cameraName&gt;</code>. <code>&lt;cameraName&gt;</code> is a string that is set as <code>depthCamera</code> if only one RGBD device is mounted on the robot.</p> <p>The <code>RgbdSensor_nws_yarp</code> device will open the following YARP ports:</p> <ul> <li><code>/&lt;robotPortPrefix&gt;/&lt;cameraName&gt;/image:o</code>: Publishes the camera's RGB image</li> <li><code>/&lt;robotPortPrefix&gt;/&lt;cameraName&gt;/depth:o</code> : Publishes the camera's depth image as a list of floating point values</li> <li><code>/&lt;robotPortPrefix&gt;/&lt;cameraName&gt;/rpc</code> : Exposes several information related to the part via a YARP RPC port</li> </ul>"},{"location":"robot_sensors/yarp_nws_convention/#rgbd-camera-client-device","title":"RGBD Camera client device","text":"<p>Warning</p> <p>These YARP ports are not meant to be accessed directly, but should be accessed instead via the <code>RGBDSensorClient</code> device.</p> <p>The client device will expose sensors related to the following interfaces: - <code>yarp::dev::IRGBDSensor</code> - <code>yarp::dev::IDepthVisualParams</code> - <code>yarp::dev::IRgbVisualParams</code></p>"},{"location":"sw_installation/","title":"Software Installation","text":"<p>This section contains detailed instructions for installing the iCub software. The iCub software includes both the software that runs inside the iCub robot and in the machines that are part of the iCub setup, and the software that can be installed on external machines to simulate or communicate with the iCub robot. The majority of the base iCub software is written in the C++ programming language.</p> <p>As of 2020, the most common way of consuming the iCub software is by compiling it from source code. There are two possible methods to compile the iCub software from source code. The first one (\"superbuild\") is to install the software via the <code>robotology-superbuild</code>, a distribution of software mantained at IIT and other related software. The second one (\"manual\") is to manually install each software package required for iCub software on its own. The recommended way to consume iCub software for users that are not part of the iCub development is to stick to released versions of the iCub software, in particular to the distributions of software released every three months, as described in Software Distros. Documentation for compiling the iCub software from source are available in the Installation from sources menu section.</p> <p>Depending on the operating system you want to use, it may be available also the possibilities of installing the iCub software via pre-compiled binaries instead of manually compiling the source code. Documentation for this workflow is available in the Installation from pre-compiled binaries menu section.</p> <p>Regardless of how you installed your software, you can check if it has been installed correctly by following the instructions in the Check your installation page.</p> <p>The standard installation procedure is appropriate for normal developers system, but some machines on the iCub setup, in particular the <code>icub-head</code> system that is installed in the head of the iCub robot, requires specific software installation instructions. You may find those in the \"Installation on specific systems on iCub setup\" menu section.</p>"},{"location":"sw_installation/check_your_installation/","title":"Check your installation","text":"<p>This page will guide your through simple steps to check that you have correctly installed YARP and the iCub software. We assume you have followed all installations steps.</p>"},{"location":"sw_installation/check_your_installation/#check-yarp","title":"Check YARP","text":"<p>First step is to have a yarpserver running.</p> <p>In a terminal type:</p> <pre><code>yarpserver\n</code></pre> <p>Depending on the system the console will look something like this:</p> <p></p> <p>If you type on a web browser <code>http://127.0.0.1:10000</code> you get information about the name server (registered ports, info, etc.).</p> <p>We can just check functionality by running a simple example. On another terminal type:</p> <pre><code>yarp\u00a0read\u00a0/portread\n</code></pre> <p>on a third terminal:</p> <pre><code>yarp\u00a0write\u00a0/portwrite\n</code></pre> <p>and on yet another terminal:</p> <pre><code>yarp\u00a0connect\u00a0/portwrite\u00a0/portread\n</code></pre> <p>you'll see the effect on the name server:</p> <pre><code>yarp:\u00a0registration\u00a0name\u00a0/portwrite\u00a0ip\u00a0127.0.0.1\u00a0port\u00a010012\u00a0type\u00a0tcp\nyarp:\u00a0registration\u00a0name\u00a0/portread\u00a0ip\u00a0127.0.0.1\u00a0port\u00a010002\u00a0type\u00a0tcp\n</code></pre> <p>Now, anything typed on the yarp write will be sent and printed on the read side.</p>"},{"location":"sw_installation/check_your_installation/#check-icub","title":"Check iCub","text":"<p>You can run the iCub simulator on Gazebo. To this end, we need to grab some Gazebo specific configuration files.</p> <p>Open a terminal and type in the following to get configured:</p> <pre><code>git clone https://github.com/vvv-school/tutorial_joint-interface.git\ncd tutorial_joint-interface\ncmake -S . -B build\ncmake --build build --target install\n</code></pre> <p>Finally, you can launch the simulator:</p> <pre><code>gazebo tutorial_joint-interface.sdf\n</code></pre> <p>The simulator should open up in a new window:</p> <p></p> <p>Now you can move each joint individually using the <code>yarpmotorgui</code> tool.</p> <p>On a different terminal type:</p> <pre><code>yarpmotorgui --robot icubSim\n</code></pre> <p>Unselect the legs and click on \u2714\ufe0f OK</p> <p></p> <p>Select the <code>left_arm</code> and drag the position of each joint to move the arm:</p> <p></p> <p></p> <p>You can now view the output from the cameras. On different consoles, run two viewers:</p> <pre><code>yarpview\u00a0--name\u00a0/view/left\nyarpview\u00a0--name\u00a0/view/right\n</code></pre> <p>and connect them:</p> <pre><code>yarp connect /icubSim/cam/left/rgbImage:o /view/left\nyarp connect /icubSim/cam/right/rgbImage:o /view/right\n</code></pre> <p></p>"},{"location":"sw_installation/check_your_installation/#play-a-recorded-sequence","title":"Play a recorded sequence","text":"<p>You can also use the dataSetPlayer to replay a recorded sequence. This will reproduce all the sensory information available on the real robot during a simple experiment. Follow the instructions at https://yarp.it/latest/group__yarpdataplayer__example.html.</p> <p></p>"},{"location":"sw_installation/check_your_installation/#tutorials","title":"Tutorials","text":"<p>Now you are ready to try our tutorials available at http://www.icub.eu/doc/icub-main/icub_tutorials.html.</p>"},{"location":"sw_installation/conda_binaries/","title":"Install iCub software from pre-compiled binaries via conda package manager","text":"<p>We provide binary packages for Linux, macOS and Windows of the software contained in the robotology-superbuild via the conda package manager, relying on the community-mantained <code>conda-forge</code> channel and for some packages on on our own <code>robotology</code> conda channel.</p>"},{"location":"sw_installation/conda_binaries/#install-a-conda-distribution","title":"Install a conda distribution","text":"<p>If you do not have a conda distribution on your system, we suggest to use the minimal <code>miniforge</code> distribution, that uses <code>conda-forge</code> packages by default.</p> <p>To install <code>miniforge</code>, please follow the instructions <code>install-miniforge</code> in robotology-superbuild documentation.</p>"},{"location":"sw_installation/conda_binaries/#create-an-environment","title":"Create an environment","text":"<p>Differently from <code>apt</code> and <code>homebrew</code>, the <code>conda</code> package manager is an <code>environment</code>-oriented package manager, meaning that packages are not installed in some global location, but rather you install packages in an <code>environment</code> (that is just a directory in your filesystem), so that you can easily have multiple different environments with different packages installed on your system. To read more about this, check https://docs.conda.io/projects/conda/en/4.6.1/user-guide/tasks/manage-environments.html .</p> <p>For this reason, to use the robotology conda packages it is suggested to first create a conda environment, and then install in it all the packages you want to use. To create a new environment called <code>robotologyenv</code>, execute the following command: <pre><code>conda create -n robotologyenv\n</code></pre></p> <p>Once you created the <code>robotologyenv</code> environment, you can \"activate\" it for the current terminal (i.e. make sure that the installed packages can be found) by the command: <pre><code>conda activate robotologyenv\n</code></pre></p> <p>Note</p> <p>IMPORTANT: if you open a new terminal, you need to manually activate the environment also there.</p> <p>Note</p> <p>IMPORTANT: To avoid strange conflicts in environment variables, it is a good idea to remove from  the environment any variable that refers to libraries or software not installed with conda. For example, if you have a robotology-superbuild installed with apt dependencies, it is a good idea to remove the source of the <code>setup.sh</code> from the <code>.bashrc</code> before using conda environments, or in Windows it can make sense to check with Rapid Environment Editor that the environment is clean.</p> <p>Note</p> <p>IMPORTANT: On Windows, it is recommended to use Command Prompt to manage conda environments, as some packages (see conda-forge/gazebo-feedstock#42 and RoboStack/ros-noetic#21) have problems in activating environments on Powershell.</p>"},{"location":"sw_installation/conda_binaries/#install-robotology-packages","title":"Install robotology packages","text":"<p>Once you are in an activated environment, you can install robotology packages by just running the command: <pre><code>conda  install -c conda-forge -c robotology &lt;packagename&gt;\n</code></pre></p> <p>Some conda packages of software contained in the <code>robotology-superbuild</code> are contained in the <code>conda-forge</code> channel, while others in <code>robotology</code> channel.  When a package is available in both, the <code>conda-forge</code> channel contains the most updated version, so always ensure that the <code>conda-forge</code> channel as an higher priority w.r.t. to the <code>robotology</code> channel.</p> <p>For example, if you want to install yarp and icub-main, you simple need to install: <pre><code>conda install -c conda-forge -c robotology yarp icub-main\n</code></pre></p> <p>In addition, if you want to simulate the iCub in Gazebo Classic, you should also install <code>icub-models</code> and <code>gazebo-yarp-plugins</code>: <pre><code>conda install -c conda-forge -c robotology gazebo-yarp-plugins icub-models\n</code></pre></p> <p>If you want to develop some C++ code on the top of these libraries, it is recommended to also install the necessary compiler and development tools directly in the same environment: <pre><code>conda install -c conda-forge compilers cmake pkg-config make ninja\n</code></pre></p>"},{"location":"sw_installation/icub_head_manual/","title":"Installation on icub-head installing manually each package","text":"<p>The <code>icub-head</code> (also known as <code>pc104</code> on older iCubs) is a Linux system, so the installation procedure follows the one described in the installation for Linux systems.</p>"},{"location":"sw_installation/icub_head_manual/#prepare-your-system","title":"Prepare your system","text":"<p>This page only covers the software installation on the <code>icub-head</code>. To prepare the operating system for the <code>icub-head</code> system, please refer to Section on iCub Operating Systems.</p>"},{"location":"sw_installation/icub_head_manual/#getting-yarp-icub-sources-and-robots-configurations","title":"Getting YARP, iCub sources, and Robots configurations","text":"<p>Depending on your configuration, you may already have the required source code git repositories cloned in these directories:</p> <pre><code>/usr/local/src/robot/ycm\n/usr/local/src/robot/yarp\n/usr/local/src/robot/icub-main\n/usr/local/src/robot/icub-firmware-shared\n/usr/local/src/robot/icub-contrib-common\n/usr/local/src/robot/robots-configuration\n</code></pre> <p>If for some reason you do not have these directories you have to download the repositories from git:</p> <pre><code>cd\u00a0/usr/local/src/robot\ngit\u00a0clone\u00a0https://github.com/robotology/ycm.git\ngit\u00a0clone\u00a0https://github.com/robotology/yarp.git\ngit\u00a0clone\u00a0https://github.com/robotology/icub-main.git\ngit\u00a0clone\u00a0https://github.com/robotology/icub-firmware-shared.git\ngit\u00a0clone\u00a0https://github.com/robotology/icub-contrib-common.git\ngit\u00a0clone\u00a0https://github.com/robotology/robots-configuration.git\n</code></pre> <p>Importantly, the software release of each of the above repositories shall match the YARP dependencies as per the Software Versioning Table.</p> <p>Do not change the location of the repositories because the icub environment on the <code>icub-head</code> is already configured by assuming the above directories.</p>"},{"location":"sw_installation/icub_head_manual/#compile-ycm","title":"Compile YCM","text":"<pre><code>mkdir\u00a0-p\u00a0$YCM_DIR\ncd\u00a0$YCM_DIR\nccmake\u00a0$YCM_SOURCE_DIR\nmake\n</code></pre> <p>Do not run make install, the current instructions assume that the binaries are not installed in system directories.</p>"},{"location":"sw_installation/icub_head_manual/#compile-yarp","title":"Compile YARP","text":"<p>Create the <code>$YARP_DIR</code> directory:</p> <pre><code>mkdir\u00a0$YARP_DIR\ncd\u00a0$YARP_DIR\n</code></pre> <p>Clean the cache and generate makefiles: <pre><code>rm\u00a0CMakeCache.txt\nccmake\u00a0$YARP_SOURCE_DIR\n</code></pre></p> <p>Do not forget to enable optimization, this will improve performance a lot. In CMake for both YARP and icub-main set:</p> <pre><code>CMAKE_BUILD_TYPE:\u00a0Release\nCREATE_LIB_MATH,\u00a0set\u00a0to\u00a0ON\nCREATE_DEVICE_LIBRARY_MODULES:ON\n</code></pre> <p>Configure (hit c):</p> <p>Now enable:</p> <pre><code>ENABLE_yarpmod_serial\nENABLE_yarpmod_serialport\nENABLE_yarpmod_portaudio\n</code></pre> <p>Configure and generate makefiles.</p> <p>Compile YARP:</p> <pre><code>make\n</code></pre> <p>Do not run make install, the current instructions assume that the binaries are not installed in system directories.</p> <p>To verify the procedure type:</p> <pre><code>yarpdev\u00a0--list\n</code></pre> <p>among the others the list should contains also the new devices:</p> <pre><code>Device\u00a0\"serial\",\u00a0C++\u00a0class\u00a0ServerInertial,\u00a0is\u00a0a\u00a0network\u00a0wrapper,\nDevice\u00a0\"serialport\",\u00a0C++\u00a0class\u00a0SerialDeviceDriver,\u00a0wrapped\u00a0by\u00a0\"serial\"\nDevice\u00a0\"portaudio\",\u00a0C++\u00a0class\u00a0...\n</code></pre>"},{"location":"sw_installation/icub_head_manual/#compile-icub-firmware-shared","title":"Compile icub-firmware-shared","text":"<p>Create <code>$icub_firmware_shared_DIR</code> if it does not exist:</p> <pre><code>mkdir\u00a0$icub_firmware_shared_DIR\n</code></pre> <p>Clean cache and generate makefiles: <pre><code>cd\u00a0$icub_firmware_shared_DIR\nrm\u00a0CMakeCache.txt\nccmake\u00a0$icub_firmware_shared_SOURCE_DIR\n</code></pre></p> <p>Hit c to configure.</p> <p>Hit g to generate.</p> <p>Compile:</p> <pre><code>make\n</code></pre>"},{"location":"sw_installation/icub_head_manual/#compile-icub","title":"Compile iCub","text":"<p>Create <code>$ICUB_DIR</code> if it does not exist:</p> <pre><code>mkdir\u00a0$ICUB_DIR\n</code></pre> <p>Clean cache and generate makefiles: <pre><code>cd\u00a0$ICUB_DIR\nrm\u00a0CMakeCache.txt\nccmake\u00a0$ICUB_SOURCE_DIR --preset robot\n</code></pre></p> <p>The following options are as usual: <pre><code>CMAKE_BUILD_TYPE:Release\n</code></pre></p> <p>Hit c to configure. A long list of devices (in the form of <code>ENABLE_icubmod_*</code>) will appear. Aside from those already enabled, you have to switch on also the following:</p> <p>All iCub versions: <pre><code>ENABLE_icubmod_dragonfly2\nENABLE_icubmod_xsensmtx\n</code></pre></p> <p>Versions equal to iCub 1.1.1: <pre><code>ENABLE_icubmod_cfw2can\nENABLE_icubmod_skinprototype\n</code></pre></p> <p>Older versions (iCub 1.0 and 1.1.0): <pre><code>ENABLE_icubmod_pcan (iCub\u00a01.0\u00a0and\u00a01.1.0)\nENABLE_icubmod_ecan (iCub\u00a01.1.0)\n</code></pre></p> <p>CMake will generate make files. Possible errors:</p> <ul> <li>pcan/ecan fails to detect API(s): check that you have unpacked     plxCanApi/esdCanApi in <code>/usr/local/src/robot/drivers</code>. cmake uses the     environment variables <code>PLXCANAPI_DIR</code>/<code>ESDCANAPI_DIR</code> to locate these     libraries. If you the pc104 has a Debian Live image &gt;= 1.4 these     should be already set, otherwise you have to do it manually.</li> </ul> <p>compile:</p> <pre><code>make\n</code></pre> <p>DO NOT run make install, the current instructions assume that the binaries are not installed in system directories.</p> <p>To verify the procedure type:</p> <pre><code>yarpdev\u00a0--list\n</code></pre> <p>among the others, the list should contain also the selected devices like:</p> <pre><code>Device\u00a0\"dragonfly2\",\u00a0C++\u00a0class\u00a0DragonflyDeviceDriver2,\u00a0wrapped\u00a0by\u00a0\"grabber\"\nDevice\u00a0\"pcan\",\u00a0C++\u00a0class\u00a0PlxCan,\u00a0has\u00a0no\u00a0network\u00a0wrapper\n...\n</code></pre>"},{"location":"sw_installation/icub_head_manual/#configuring-your-robot","title":"Configuring your Robot","text":"<p>First off, prepare the contributing helpers:</p> <pre><code>cd\u00a0$ROBOT_CODE/icub-contrib-common\nmkdir\u00a0build\u00a0&amp;&amp;\u00a0cd\u00a0build\nccmake\u00a0../\n</code></pre> <p>Make sure that <code>CMAKE_INSTALL_PREFIX</code> points to <code>$ICUBContrib_DIR</code> and finally do:</p> <pre><code>make\u00a0install\n</code></pre> <p>Further documentation is available in <code>icub-contrib-common</code> documentation.</p> <p>Then, proceed to install your robot configuration files:</p> <pre><code>cd\u00a0$ROBOT_CODE/robots-configuration\nmkdir\u00a0build\u00a0&amp;&amp;\u00a0cd\u00a0build\nccmake\u00a0../\nmake\u00a0install\n</code></pre> <p>In case you want to tune/modify any robot parameters, remember to create first your local copies:</p> <pre><code>yarp-config\u00a0robot\u00a0--import\u00a0$YARP_ROBOT_NAME\n</code></pre> <p>Now you should have editable copies in <pre><code>~/.local/share/yarp/robots/$YARP_ROBOT_NAME\n</code></pre></p> <p>Further documentation is available in <code>robots-configuration</code> repository.</p>"},{"location":"sw_installation/icub_head_superbuild/","title":"Superbuild installation on icub-head","text":"<p>The <code>icub-head</code> (also known as <code>pc104</code> on older iCubs) is a Linux system, so the installation procedure follows the one described in the installation for Linux systems.</p> <p>The main difference is that in addition you need to enable certain flags in CMake that enable compilation of specific software modules.</p>"},{"location":"sw_installation/icub_head_superbuild/#prepare-your-system","title":"Prepare your system","text":"<p>Warning: if your iCub robot is not currently using the robotology-superbuild, do not attempt to migrate it without coordinating with the iCub support.  For any doubt, please open an issue at robotology/icub-tech-support.</p> <p>This page only covers the software installation on the icub-head. To prepare the operating system for the icub-head system, please refer to Section on iCub Operating Systems.</p>"},{"location":"sw_installation/icub_head_superbuild/#getting-robotology-superbuild","title":"Getting robotology-superbuild","text":"<p>Depending on your configuration, you may already have the required source code git repositories cloned in these directories:</p> <pre><code>/usr/local/src/robot/robotology-superbuild\n</code></pre> <p>If for some reasons you do not have these directories you have to download the repositories from git:</p> <pre><code>cd\u00a0/usr/local/src/robot\ngit\u00a0clone\u00a0https://github.com/robotology/robotology-superbuild.git\ncd robotology-superbuild\ngit checkout v&lt;YYYY.MM&gt;\n</code></pre> <p>Importantly, you should use a given release, see Software Versioning Table for more info.</p> <p>Do not change the location of the repositories because the icub environment on the icub-head is already configured by assuming the above directories.</p>"},{"location":"sw_installation/icub_head_superbuild/#compile-robotology-superbuild","title":"Compile robotology-superbuild","text":"<p><pre><code>cd /usr/local/src/robot/robotology-superbuild\nmkdir build &amp;&amp; cd build\ncmake -DROBOTOLOGY_USES_GAZEBO:BOOL=OFF -DROBOTOLOGY_ENABLE_ICUB_HEAD:BOOL=ON ..\nmake\n</code></pre> The main difference over the standard installation of the robotology-superbuild, is that the <code>ROBOTOLOGY_USES_GAZEBO</code> option is disabled (as the Gazebo is tipically not installed in the <code>icub-head</code>/<code>pc104</code> machine) and the <code>ROBOTOLOGY_ENABLE_ICUB_HEAD</code> option is enabled, to enable all the YARP devices that are necessary to interface with the internal communication bus of the iCub robot. The <code>make</code> command in this case will download, compile and install all the software necessary to run the robot itself.</p> <p>If you need to use other superbuild profiles, they can be easily enabled with the corresponding CMake option.</p> <p>Important: do not run <code>make install</code> for the superbuild: the superbuild already installs all the software in <code>/usr/local/src/robot/robotology-superbuild/build/install</code>, and installing the software elsewhere on the robot is not currently supported.</p> <p>Important: If you are using an old iCub that still uses the CAN internal bus, you also need to enable the <code>ROBOTOLOGY_USES_CFW2CAN</code> CMake option. Note that in this case the <code>.bashrc_iCub</code> file should also contain the definition of the <code>CFW2CANAPI_DIR</code> environmental variables, in addition to all the environmental variable already defined  in that file. Refer to the <code>robotology-superbuild</code> documentation for more detailed information.</p> <p>After the compilation finished, you can check that the compilation ended correctly by opening a new terminal and executing: <pre><code>yarpdev\u00a0--list\n</code></pre></p> <p>The command should work correctly, and among the others the list should contain several devices:</p> <pre><code>Device\u00a0\"serial\",\u00a0C++\u00a0class\u00a0ServerInertial,\u00a0is\u00a0a\u00a0network\u00a0wrapper,\nDevice\u00a0\"serialport\",\u00a0C++\u00a0class\u00a0SerialDeviceDriver,\u00a0wrapped\u00a0by\u00a0\"serial\"\nDevice\u00a0\"portaudio\",\u00a0C++\u00a0class\u00a0...\n</code></pre>"},{"location":"sw_installation/icub_head_superbuild/#configuring-your-robot","title":"Configuring your Robot","text":"<p>In case you want to tune/modify any robot parameters, remember to create first your local copies:</p> <pre><code>yarp-config\u00a0robot\u00a0--import\u00a0$YARP_ROBOT_NAME\n</code></pre> <p>Now you should have editable copies in <pre><code>~/.local/share/yarp/robots/$YARP_ROBOT_NAME\n</code></pre></p> <p>Further documentation is available in <code>robots-configuration</code> repository.</p>"},{"location":"sw_installation/linux_from_sources_manual/","title":"Install iCub software from source manually installing each software package","text":"<p>The page contains instructions for compiling YARP and the iCub software. We recommend you get the required dependencies from the binary packages.</p>"},{"location":"sw_installation/linux_from_sources_manual/#getting-all-dependencies","title":"Getting all dependencies","text":"<p>Install the required dependencies: <pre><code>sudo\u00a0apt\u00a0install\u00a0libace-dev libc6 python libgsl0-dev libncurses5-dev libsdl1.2-dev subversion git gfortran libxmu-dev libode-dev wget unzip qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev libqt5svg5 libqt5opengl5-dev libopencv-dev freeglut3-dev libtinyxml-dev libblas-dev coinor-libipopt-dev liblapack-dev libmumps-dev qml-module-qtmultimedia qml-module-qtquick-dialogs qml-module-qtquick-controls libedit-dev libeigen3-dev libjpeg-dev libsimbody-dev libxml2-dev libjs-underscore\n</code></pre></p>"},{"location":"sw_installation/linux_from_sources_manual/#setting-up-revision-control-systems","title":"Setting up revision control systems","text":"<p>To download sources from our repositories you need to set up a revision control system client. The git client was already installed in the previous step.</p>"},{"location":"sw_installation/linux_from_sources_manual/#compile-ycm","title":"Compile YCM","text":"<p>To compile YCM, clone and build the tag associated with the distro at hand as specified in Software Versioning Table.</p> <pre><code>git\u00a0clone\u00a0https://github.com/robotology/ycm.git\u00a0-b\u00a0vxx.yy.zz\ncd\u00a0ycm\u00a0&amp;&amp;\u00a0mkdir\u00a0-p\u00a0build\u00a0&amp;&amp;\u00a0cd\u00a0build\nccmake\u00a0../\nsudo\u00a0make\u00a0install\n</code></pre>"},{"location":"sw_installation/linux_from_sources_manual/#compile-yarp","title":"Compile YARP","text":"<p>Follow instructions provided in the official YARP documentation, follow the section Install from sources -- Compiling YARP (skip installation of packages).</p> <p>Importantly, for use with the iCub robot when compiling YARP make sure that: * you check out the correct tag of YARP according to the Software Versioning Table. * you set to on the CMake options <code>CREATE_OPTIONAL_CARRIERS</code> and <code>ENABLE_yarpcar_bayer</code>.</p>"},{"location":"sw_installation/linux_from_sources_manual/#compile-icub-main","title":"Compile icub-main","text":""},{"location":"sw_installation/linux_from_sources_manual/#download-icub-main-source-code","title":"Download icub-main source code","text":"<p>In the rest of the tutorial, it will be assumed that you will downloaded the code in the <code>/home/user</code>.</p> <p>To download the <code>icub-main</code> source code, just use git:</p> <pre><code>cd\u00a0/home/user\ngit\u00a0clone\u00a0https://github.com/robotology/icub-main.git\n</code></pre> <p>This command will create the <code>/home/user/icub-main</code> directory, containing the <code>icub-main</code> source code.</p>"},{"location":"sw_installation/linux_from_sources_manual/#checkout-the-correct-tag","title":"Checkout the correct tag","text":"<p>Pick up the correct tag vxx.yy.zz from Software Versioning Table that is compatible with the compiled version of YARP and do:</p> <pre><code>cd\u00a0icub-main\ngit\u00a0checkout\u00a0vxx.yy.zz\n</code></pre>"},{"location":"sw_installation/linux_from_sources_manual/#create-icub-makefiles","title":"Create iCub makefiles","text":"<p>Pick a build directory to store makefiles and binaries, e.g. <code>/home/user/icub-main/build</code> .</p> <p>Run CMake to generate makefiles: <pre><code>cd\u00a0\u00a0/home/user/icub-main\nmkdir\u00a0build\ncd\u00a0build\nccmake\u00a0../\n</code></pre></p> <p>Hit 'c' to configure the project.</p> <p>Select options:</p> <pre><code>CMAKE_BUILD_TYPE\u00a0to\u00a0\"Release\"\nENABLE_icubmod_cartesiancontrollerclient\u00a0ON\nENABLE_icubmod_cartesiancontrollerserver\u00a0ON\nENABLE_icubmod_gazecontrollerclient\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ON\n</code></pre> <p>Leave all other options to default (unless you know what you are doing).</p> <p>Note : You can optionally change <code>CMAKE_INSTALL_PREFIX</code>, this is the directory where you would like to install icub-main (default is <code>/usr/local</code>). If you set it to a different prefix than YARP's, you will then need to set up the environment accordingly (see Configure your environment section below).</p>"},{"location":"sw_installation/linux_from_sources_manual/#compile-icub-main_1","title":"Compile icub-main","text":"<pre><code>cd\u00a0\u00a0/home/user/icub-main/build\nmake\nsudo\u00a0make\u00a0install\n</code></pre>"},{"location":"sw_installation/linux_from_sources_manual/#setup-icubcontrib-optional","title":"Setup ICUBcontrib (optional)","text":"<p>First, you need to download the sources.</p> <pre><code>cd\u00a0/home/user/\ngit\u00a0clone\u00a0https://github.com/robotology/icub-contrib-common.git\n</code></pre> <p>Second, make sure you have the correct release according to  Software Versioning Table.</p> <p><pre><code>cd\u00a0/home/user/icub-contrib-common/\ngit\u00a0checkout\u00a0&lt;tag&gt;\n</code></pre> Set up the ICUBcontrib meta-package, which allows to properly configure your modules/libraries so that they share the same installation prefix.</p> <pre><code>cd\u00a0/home/user/icub-contrib-common/\nmkdir\u00a0build\u00a0&amp;&amp;\u00a0cd\u00a0build\nccmake\u00a0../\n</code></pre> <p>At this stage you must change CMAKE_INSTALL_PREFIX entry here to the path of your liking, preferably in your home; hit 'g' to generate the project. If you do not change the CMAKE_INSTALL_PREFIX you will need to constantly use sudo for any subsequent action, eg: run module with administrative rights.</p> <p>Finally,</p> <pre><code>make\u00a0install\n</code></pre> <p>Once you have installed the ICUBcontrib package you can compile the other modules individually.</p>"},{"location":"sw_installation/linux_from_sources_manual/#configure-your-environment","title":"Configure your environment","text":"<p>If you installed YARP and/or iCub or ICUBcontrib to non-default directories, you need to set your environment.</p> <ul> <li>Set the <code>ICUBcontrib_DIR</code> env var to point to the installation directory.</li> <li>Append <code>$ICUBcontrib_DIR/bin</code> to your PATH.</li> <li>Set the <code>CMAKE_PREFIX_PATH</code> env var to point to the installation directory <code>$ICUBcontrib_DIR</code>.</li> <li>Modify the variable <code>YARP_DATA_DIRS</code> accordingly, i.e.: <code>YARP_DATA_DIRS=</code><code>/share/yarp:</code><code>/share/iCub:</code><code>/share/ICUBcontrib</code>."},{"location":"sw_installation/linux_from_sources_manual/#check-your-installation","title":"Check your installation","text":"<p>After you followed the installation instructions, you can check if your installation was successful by following the instructions in the Check your installation page.</p>"},{"location":"sw_installation/linux_from_sources_superbuild/","title":"Install iCub software from source using the robotology-superbuild on Linux","text":"<p>The basic software packages of the iCub software can be easily installed using the robotology-superbuild.</p> <p>In particular, they are contained in the core profile of the superbuild, that is enabled by default.</p> <p>To install the robotology-superbuild in Linux, first download the robotology-superbuild repo with git and checkout the specific distro version that you want to use: <pre><code>git clone https://github.com/robotology/robotology-superbuild\ncd robotology-superbuild\ngit checkout v&lt;YYYY.MM&gt;\n</code></pre></p> <p>If you are installing the superbuild on an iCub robot laptop following the official iCub instructions, you should clone it in the <code>/usr/local/src/robot</code> directory.</p> <p>Then follow the Linux instructions in robotology-superbuild documentation.</p>"},{"location":"sw_installation/linux_from_sources_superbuild/#check-your-installation","title":"Check your installation","text":"<p>After you followed the installation instructions, you can check if your installation was successful by following the instructions in the Check your installation page.</p>"},{"location":"sw_installation/macos_from_sources_superbuild/","title":"Install iCub software from source using the robotology-superbuild on macOS","text":"<p>The basic software packages of the iCub software can be easily installed using the robotology-superbuild.</p> <p>In particular, they are contained in the core profile of the superbuild, that is enabled by default.</p> <p>To install the robotology-superbuild on macOS, first download the robotology-superbuild repo with git and checkout the specific distro version that you want to use: <pre><code>git clone https://github.com/robotology/robotology-superbuild\ncd robotology-superbuild\ngit checkout v&lt;YYYY.MM&gt;\n</code></pre></p> <p>Then follow the macOS instructions in robotology-superbuild documentation.</p>"},{"location":"sw_installation/macos_from_sources_superbuild/#check-your-installation","title":"Check your installation","text":"<p>After you followed the installation instructions, you can check if your installation was successful by following the instructions in the Check your installation page.</p>"},{"location":"sw_installation/windows_binaries/","title":"Install iCub software from pre-compiled binaries on Windows","text":"<p>We support installation on Windows using the pre-compiled Windows installer available for the robotology-superbuild. For more info, check the <code>robotology-superbuild</code> documentation. This page contains a recap of the instructions necessary to use this installer.</p>"},{"location":"sw_installation/windows_binaries/#instructions","title":"Instructions","text":"<p>Download and execute the Robotology installer available from <code>robotology-superbuild</code> releases. Pick up the binaries containing the <code>full-installer</code> file. When prompted with the dialog below, do not change the destination directory as the archive still contains a few packages that are not fully relocatable.</p> <p></p> <p>Keep the following checkbox ticked if you want the installer to update the environment variables.</p> <p></p>"},{"location":"sw_installation/windows_binaries/#getting-ms-c-redistributable","title":"Getting MS C++ Redistributable","text":"<p>Unless you already have the Microsoft Visual Studio installed on your machine, make sure that you have at least the Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017 and 2019 installed in your system. In particular, you can install the 64-bit version.</p>"},{"location":"sw_installation/windows_binaries/#check-your-installation","title":"Check your installation","text":"<p>After you followed the installation instructions, you can check if your installation was successful by following the instructions in the Check your installation page.</p>"},{"location":"sw_installation/windows_from_sources_superbuild/","title":"Install iCub software from source using the robotology-superbuild on Windows","text":"<p>The basic software packages of the iCub software can be easily installed using the robotology-superbuild.</p> <p>In particular, they are contained in the core profile of the superbuild, that is enabled by default.</p> <p>To install the robotology-superbuild in Windows, first download the robotology-superbuild repo with git and checkout the specific distro version that you want to use: <pre><code>git clone https://github.com/robotology/robotology-superbuild\ncd robotology-superbuild\ngit checkout v&lt;YYYY.MM&gt;\n</code></pre></p> <p>Then follow the Windows instructions in robotology-superbuild documentation.</p>"},{"location":"sw_installation/windows_from_sources_superbuild/#check-your-installation","title":"Check your installation","text":"<p>After you followed the installation instructions, you can check if your installation was successful by following the instructions in the Check your installation page.</p>"},{"location":"sw_versioning_table/","title":"Software Distros","text":""},{"location":"sw_versioning_table/#software-distros-workflow","title":"\ud83d\ude80 Software Distros Workflow","text":"<ul> <li>\ud83d\udcc5 SW Distros are typically delivered on a time-based workflow.</li> <li>4\ufe0f\u20e3 SW Distros are usually released along with binaries at the following quarters: Feb, May, Aug, Nov.</li> <li>\ud83c\udd93 The feature-freeze lasts one month.</li> <li>\ud83d\udcdb Naming convention adheres therefore to <code>YYYY.MM.0</code>, where <code>YYYY</code> identifies the year so as <code>MM</code> the month of the distro. The patch number <code>0</code> clarifies that it is a major distro. Examples: 2021.11.0, 2022.02.0...</li> <li>\ud83d\udcdd Repositories stay on their usual release convention in order to enable proper semantic versioning. To link repos tags to SW Distro and run CI, we rely on the infrastructure provided in <code>robotology/robotology-superbuild</code>.</li> <li>\ud83d\udce6 Occasionally, we may release feature-based distros and/or patches as a collection of tags/branches (i.e., no binaries). Naming convention follows the pattern <code>YYYY.MM.P</code>, where <code>YYYY.MM</code> identifies the major release used as baseline and the patch number <code>P</code> is simply increased also in the case of a feature or patch distro released after YYYY/MM.</li> <li>\u26a0 Distros released before <code>2021.11.0</code> may be named without the patch number <code>P</code> and may also be marked explicitly with <code>feat</code> or <code>patch</code> labels. </li> <li>\ud83d\udce2 We make announcements of the distros and their content on a dedicated channel of Robotology Community.</li> </ul>"},{"location":"sw_versioning_table/#software-versioning-table","title":"Software Versioning Table","text":"<p>The table hereinafter reports on the versions of the packages (specified in terms of Git tags/branches/commits) composing our software ecosystem that are bundled as distros.</p> <p>Once the versions are known, one can download the distro's source code by using Git.</p> <p>For example, to download the SW Distro <code>2020.08</code> do: <pre><code>$ git clone https://github.com/robotology/ycm.git -b v0.11.3\n$ git clone https://github.com/robotology/yarp.git -b v3.4.0\n$ git clone https://github.com/robotology/icub-main.git -b v1.17.0\n ...\n</code></pre></p>"},{"location":"sw_versioning_table/#table","title":"Table","text":"<p>This table has been generated automatically by processing data available in <code>robotology/robotology-superbuild@v2025.08.0/releases</code>.</p> <p>Click on the distros below to explore their package versions:</p> <ul> <li>\ud83d\udce6 Distro 2025.08.0</li> <li>\ud83d\udce6 Distro 2025.05.0</li> <li>\ud83d\udce6 Distro 2025.02.0</li> <li>\ud83d\udce6 Distro 2024.11.2</li> <li>\ud83d\udce6 Distro 2024.11.1</li> <li>\ud83d\udce6 Distro 2024.11.0</li> <li>\ud83d\udce6 Distro 2024.08.0</li> <li>\ud83d\udce6 Distro 2024.05.0</li> <li>\ud83d\udce6 Distro 2024.02.0</li> <li>\ud83d\udce6 Distro 2023.11.0</li> <li>\ud83d\udce6 Distro 2023.08.0</li> <li>\ud83d\udce6 Distro 2023.05.2</li> <li>\ud83d\udce6 Distro 2023.05.1</li> <li>\ud83d\udce6 Distro 2023.05.0</li> <li>\ud83d\udce6 Distro 2023.02.3</li> <li>\ud83d\udce6 Distro 2023.02.2</li> <li>\ud83d\udce6 Distro 2023.02.1</li> <li>\ud83d\udce6 Distro 2023.02.0</li> <li>\ud83d\udce6 Distro 2022.11.0</li> <li>\ud83d\udce6 Distro 2022.09.1</li> <li>\ud83d\udce6 Distro 2022.09.0</li> <li>\ud83d\udce6 Distro 2022.08.1</li> <li>\ud83d\udce6 Distro 2022.08.0</li> <li>\ud83d\udce6 Distro 2022.05.2</li> <li>\ud83d\udce6 Distro 2022.05.1</li> <li>\ud83d\udce6 Distro 2022.05.0</li> <li>\ud83d\udce6 Distro 2022.02.2</li> <li>\ud83d\udce6 Distro 2022.02.1</li> <li>\ud83d\udce6 Distro 2022.02.0</li> </ul>"},{"location":"sw_versioning_table/2022.02.0/","title":"\ud83d\udce6 Distro 2022.02.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.13.0</code> <code>YARP</code> robotology/yarp.git <code>v3.6.0</code> <code>ICUB</code> robotology/icub-main.git <code>v1.24.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v1.23.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.24.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.20.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.24.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.24.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.21.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.22.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.2.0</code> <code>icub-models</code> robotology/icub-models.git <code>v1.23.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v5.1.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.1</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20220000.2</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.6.1</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.4</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.2</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.5.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.7.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.4.1</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.5.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.6.1</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.2.0</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.2.0</code> <code>wearables</code> robotology/wearables.git <code>v1.3.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.4.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.1.1</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.1.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.0.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.6.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v1.6</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.1.1</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.1</code> <code>YARP_telemetry</code> robotology/yarp-telemetry.git <code>v0.4.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.2.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v2.0.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.4</code>"},{"location":"sw_versioning_table/2022.02.1/","title":"\ud83d\udce6 Distro 2022.02.1","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.13.1</code> <code>YARP</code> robotology/yarp.git <code>v3.6.0</code> <code>ICUB</code> robotology/icub-main.git <code>v1.24.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v1.23.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.24.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.20.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.24.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.24.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.21.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.22.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.2.0</code> <code>icub-models</code> robotology/icub-models.git <code>v1.23.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v5.1.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.1</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20220000.2</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.6.1</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.4</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.2</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.5.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.7.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.4.1</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.5.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.6.1</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.2.0</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.2.0</code> <code>wearables</code> robotology/wearables.git <code>v1.3.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.4.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.1.1</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.1.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.0.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.6.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v1.6</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.1.1</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.1</code> <code>YARP_telemetry</code> robotology/yarp-telemetry.git <code>v0.4.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.2.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v2.0.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.4</code>"},{"location":"sw_versioning_table/2022.02.2/","title":"\ud83d\udce6 Distro 2022.02.2","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.13.1</code> <code>YARP</code> robotology/yarp.git <code>v3.6.0</code> <code>ICUB</code> robotology/icub-main.git <code>v1.24.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v1.23.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.24.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.20.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.24.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.24.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.21.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.22.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.2.0</code> <code>icub-models</code> robotology/icub-models.git <code>v1.23.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v5.1.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.1</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20220000.2</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.6.1</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.4</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.2</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.5.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.7.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.4.1</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.5.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.6.1</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.2.0</code> <code>forcetorque-yarp-devices</code> robotology/forcetorque-yarp-devices.git <code>v0.2.0</code> <code>wearables</code> robotology/wearables.git <code>v1.3.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.4.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.1.1</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.1.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.0.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.6.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v1.6</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.1.1</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.1</code> <code>YARP_telemetry</code> robotology/yarp-telemetry.git <code>v0.4.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.2.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v2.0.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.4</code>"},{"location":"sw_versioning_table/2022.05.0/","title":"\ud83d\udce6 Distro 2022.05.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.14.1</code> <code>YARP</code> robotology/yarp.git <code>v3.7.0</code> <code>ICUB</code> robotology/icub-main.git <code>v1.25.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v1.24.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.25.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.25.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.25.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.25.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.21.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.23.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.4.0</code> <code>icub-models</code> robotology/icub-models.git <code>v1.24.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v5.2.1</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.1</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20220000.4</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.7.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.4</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.5.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.7.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.4.1</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.5.1</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.7.0</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.0</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.0</code> <code>wearables</code> robotology/wearables.git <code>v1.4.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.5.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.0.1</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.1.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.6.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v1.7</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.0</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>YARP_telemetry</code> robotology/robometry.git <code>v0.5.1</code> <code>robometry</code> robotology/robometry.git <code>v1.0.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.2.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.0.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.5</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.1.5</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.23</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.1</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code>"},{"location":"sw_versioning_table/2022.05.1/","title":"\ud83d\udce6 Distro 2022.05.1","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.14.1</code> <code>YARP</code> robotology/yarp.git <code>v3.7.0</code> <code>ICUB</code> robotology/icub-main.git <code>v1.25.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v1.24.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.25.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.25.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.25.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.25.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.21.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.23.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.4.0</code> <code>icub-models</code> robotology/icub-models.git <code>v1.24.1</code> <code>iDynTree</code> robotology/idyntree.git <code>v5.2.1</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.1</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20220000.4</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.7.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.4</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.5.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.7.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.4.1</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.5.1</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.7.0</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.0</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.0</code> <code>wearables</code> robotology/wearables.git <code>v1.4.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.5.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.0.1</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.1.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.6.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v1.7</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.0</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>YARP_telemetry</code> robotology/robometry.git <code>v0.5.1</code> <code>robometry</code> robotology/robometry.git <code>v1.1.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.0.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.5</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.1.5</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.23</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.1</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code>"},{"location":"sw_versioning_table/2022.05.2/","title":"\ud83d\udce6 Distro 2022.05.2","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.14.2</code> <code>YARP</code> robotology/yarp.git <code>v3.7.2</code> <code>ICUB</code> robotology/icub-main.git <code>v1.26.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v1.25.1</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.25.1</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.25.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.25.1</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.25.1</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.21.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.23.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.4.0</code> <code>icub-models</code> robotology/icub-models.git <code>v1.24.1</code> <code>iDynTree</code> robotology/idyntree.git <code>v5.2.1</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.1</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20220000.4</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.7.2</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.4</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.5.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.7.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.4.1</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.5.1</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.7.0</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.0</code> <code>forcetorque-yarp-devices</code> robotology/forcetorque-yarp-devices.git <code>v0.3.0</code> <code>wearables</code> robotology/wearables.git <code>v1.4.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.5.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.0.1</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.1.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.7.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v1.7</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.0</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>YARP_telemetry</code> robotology/robometry.git <code>v0.5.1</code> <code>robometry</code> robotology/robometry.git <code>v1.1.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.0.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.5</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.2.1</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.23</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.1</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code>"},{"location":"sw_versioning_table/2022.08.0/","title":"\ud83d\udce6 Distro 2022.08.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.14.2</code> <code>YARP</code> robotology/yarp.git <code>v3.7.2</code> <code>ICUB</code> robotology/icub-main.git <code>v1.27.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v1.26.1</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.26.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.25.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.26.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.26.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.21.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.24.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.5.1</code> <code>icub-models</code> robotology/icub-models.git <code>v1.25.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v7.0.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.1</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20220000.4</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.7.3</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.5</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.5.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.7.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.4.1</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.5.1</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.0</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.1</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.0</code> <code>wearables</code> robotology/wearables.git <code>v1.4.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>V2.6.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.1.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.8.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v1.7</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.1</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.1.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.5</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.2.2</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.24</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.1</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code>"},{"location":"sw_versioning_table/2022.08.1/","title":"\ud83d\udce6 Distro 2022.08.1","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.14.2</code> <code>YARP</code> robotology/yarp.git <code>v3.7.2</code> <code>ICUB</code> robotology/icub-main.git <code>v1.28.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v1.26.1</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.27.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.25.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.27.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.27.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.21.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.24.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.5.1</code> <code>icub-models</code> robotology/icub-models.git <code>v1.25.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v7.0.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.1</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20220000.4</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.7.3</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.5</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.5.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.7.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.5.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.6.1</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.0</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.1</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.0</code> <code>wearables</code> robotology/wearables.git <code>v1.5.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>V2.6.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.1.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.9.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v1.7</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.1</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.1.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.6</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.2.2</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.24</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.1</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code>"},{"location":"sw_versioning_table/2022.09.0/","title":"\ud83d\udce6 Distro 2022.09.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.14.2</code> <code>YARP</code> robotology/yarp.git <code>v3.7.2</code> <code>ICUB</code> robotology/icub-main.git <code>v1.28.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v1.26.1</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.27.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.25.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.27.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.27.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.21.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.24.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.5.1</code> <code>icub-models</code> robotology/icub-models.git <code>v1.25.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v7.0.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.2</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20220000.4</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.7.3</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.5</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.5.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.7.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.5.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.6.1</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.0</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.1</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.0</code> <code>wearables</code> robotology/wearables.git <code>v1.6.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>V2.6.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.1.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.10.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v1.7</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.1</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.1.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.6</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.2.2</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.25</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.1</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.0.1</code>"},{"location":"sw_versioning_table/2022.09.1/","title":"\ud83d\udce6 Distro 2022.09.1","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.14.2</code> <code>YARP</code> robotology/yarp.git <code>v3.7.2</code> <code>ICUB</code> robotology/icub-main.git <code>v1.28.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v1.27.1</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.27.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.25.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.27.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.27.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.21.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.24.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.5.1</code> <code>icub-models</code> robotology/icub-models.git <code>v1.25.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v7.0.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.2</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20220000.4</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.7.3</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.5</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.5.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.7.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.5.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.6.1</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.0</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.1</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.0</code> <code>wearables</code> robotology/wearables.git <code>v1.6.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>V2.6.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.1.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.10.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v1.7</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.1</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.1.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.6</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.2.2</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.25</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.1</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.0.1</code>"},{"location":"sw_versioning_table/2022.11.0/","title":"\ud83d\udce6 Distro 2022.11.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.14.2</code> <code>YARP</code> robotology/yarp.git <code>v3.7.2</code> <code>ICUB</code> robotology/icub-main.git <code>v2.0.2</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.1.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.29.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.27.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.29.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.29.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.21.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.24.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.5.2</code> <code>icub-models</code> robotology/icub-models.git <code>v1.26.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v7.0.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.102</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20220000.4</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.7.3</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.5</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.5.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.6.1</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.0</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.2</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.0</code> <code>wearables</code> robotology/wearables.git <code>v1.7.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.7.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.2</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.10.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v1.7</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.1</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.2.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.6</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.3.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.26</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.1</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.0.1</code>"},{"location":"sw_versioning_table/2023.02.0/","title":"\ud83d\udce6 Distro 2023.02.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.15.1</code> <code>YARP</code> robotology/yarp.git <code>v3.8.0</code> <code>ICUB</code> robotology/icub-main.git <code>v2.1.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.2.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.33.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.33.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.33.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.33.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.22.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.24.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.6.0</code> <code>icub-models</code> robotology/icub-models.git <code>v2.0.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v8.1.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.102</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20230000.0</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.4</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.1.0</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.8.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.6</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.6.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.7.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.1</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.3</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.7.1</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.7.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.2</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.12.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v2.0</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.2</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.2.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.7</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.4.1</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.26</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.2</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.0</code>"},{"location":"sw_versioning_table/2023.02.1/","title":"\ud83d\udce6 Distro 2023.02.1","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.15.1</code> <code>YARP</code> robotology/yarp.git <code>v3.8.0</code> <code>ICUB</code> robotology/icub-main.git <code>v2.1.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.2.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.33.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.33.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.33.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.33.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.22.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.24.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.6.0</code> <code>icub-models</code> robotology/icub-models.git <code>v2.0.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v8.1.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.102</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20230000.0</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.4</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.2.0</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.8.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.6</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.6.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.7.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.1</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.3</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.7.1</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.7.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.2</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.12.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v2.0</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.2</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.2.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.7</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.4.1</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.26</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.2</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.0</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.3.0</code>"},{"location":"sw_versioning_table/2023.02.2/","title":"\ud83d\udce6 Distro 2023.02.2","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.15.1</code> <code>YARP</code> robotology/yarp.git <code>v3.8.0</code> <code>ICUB</code> robotology/icub-main.git <code>v2.1.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.2.1</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.34.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.34.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.34.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.34.1</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.22.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.24.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.6.0</code> <code>icub-models</code> robotology/icub-models.git <code>v2.0.1</code> <code>iDynTree</code> robotology/idyntree.git <code>v8.1.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.102</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20230000.0</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.4</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.2.0</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.8.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.6</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.6.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.7.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.1</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.3</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.7.1</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.7.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.2</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.12.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v2.0</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.2</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.2.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.7</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.4.1</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.26</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.2</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.0</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.3.0</code>"},{"location":"sw_versioning_table/2023.02.3/","title":"\ud83d\udce6 Distro 2023.02.3","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.15.1</code> <code>YARP</code> robotology/yarp.git <code>v3.8.0</code> <code>ICUB</code> robotology/icub-main.git <code>v2.1.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.2.2</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.34.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.34.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.34.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.34.1</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.22.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.24.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.6.0</code> <code>icub-models</code> robotology/icub-models.git <code>v2.0.1</code> <code>iDynTree</code> robotology/idyntree.git <code>v8.1.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.2</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.102</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20230000.0</code> <code>casadi</code> ami-iit/casadi.git <code>3.5.5.4</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.2.0</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.8.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.6</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.3</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.6.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.7.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.1</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.3</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.7.1</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.7.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.2</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.12.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.1.1</code> <code>event-driven</code> robotology/event-driven.git <code>v2.0</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.2</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.0</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.2.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.5.5.2</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.7</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.4.1</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.26</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.2</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.0</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.3.0</code>"},{"location":"sw_versioning_table/2023.05.0/","title":"\ud83d\udce6 Distro 2023.05.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.15.3</code> <code>YARP</code> robotology/yarp.git <code>v3.8.1</code> <code>ICUB</code> robotology/icub-main.git <code>v2.2.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.3.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.35.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.35.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.35.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.35.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.23.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.25.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.7.0</code> <code>icub-models</code> robotology/icub-models.git <code>v2.1.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v9.1.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.3</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.102</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20230000.0</code> <code>casadi</code> casadi/casadi.git <code>3.6.3</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.3.2</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.8.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.7</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.4</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.6.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.7.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.1</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.3</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.7.1</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.7.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.2</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.13.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.0</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.2</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.1</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.2.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.3.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.7</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.5.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.27</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.2</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.0</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.3.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.3.6</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code>"},{"location":"sw_versioning_table/2023.05.1/","title":"\ud83d\udce6 Distro 2023.05.1","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.15.3</code> <code>YARP</code> robotology/yarp.git <code>v3.8.1</code> <code>ICUB</code> robotology/icub-main.git <code>v2.2.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.4.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.35.1</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.35.1</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.35.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.35.1</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.23.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.25.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.7.0</code> <code>icub-models</code> robotology/icub-models.git <code>v2.2.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v9.1.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.3</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.102</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20230000.0</code> <code>casadi</code> casadi/casadi.git <code>3.6.3</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.3.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.8.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.7</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.4</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.6.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.7.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.1</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.3</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.7.1</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.7.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.2</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.13.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.0</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.2</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.1</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.2.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.3.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.7</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.5.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.27</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.2</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.0</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.3.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.3.6</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code>"},{"location":"sw_versioning_table/2023.05.2/","title":"\ud83d\udce6 Distro 2023.05.2","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.15.3</code> <code>YARP</code> robotology/yarp.git <code>v3.8.1</code> <code>ICUB</code> robotology/icub-main.git <code>v2.2.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.4.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.35.1</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.35.1</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.35.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.35.1</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.23.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.25.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.7.0</code> <code>icub-models</code> robotology/icub-models.git <code>v2.2.1</code> <code>iDynTree</code> robotology/idyntree.git <code>v9.1.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.3</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.102</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20230000.0</code> <code>casadi</code> casadi/casadi.git <code>3.6.3</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.3.3</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.8.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.7</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.4</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.6.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.7.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.9.1</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.3</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.7.1</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.7.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.2</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.13.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.0</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.2</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.1</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.2.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.3.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.7</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.5.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.27</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.2</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.0</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.3.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.3.6</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code>"},{"location":"sw_versioning_table/2023.08.0/","title":"\ud83d\udce6 Distro 2023.08.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.15.3</code> <code>YARP</code> robotology/yarp.git <code>v3.8.1</code> <code>ICUB</code> robotology/icub-main.git <code>v2.3.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.5.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.36.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.36.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.36.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.36.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.24.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.25.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.8.0</code> <code>icub-models</code> robotology/icub-models.git <code>v2.3.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v9.1.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.3</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.103</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20230000.0</code> <code>casadi</code> casadi/casadi.git <code>3.6.3</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.4.0</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.8.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.7</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.4</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.1</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.6.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.7.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.10.0</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.3</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.7.2</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v2.8.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.2.2</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.15.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.0</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.2</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.2</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.3.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.3.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.7</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.2</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.6.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.29</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.2</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.0</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.3.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.4.1</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code> <code>mujoco</code> ami-iit/mujoco.git <code>2.3.5.1</code> <code>mujoco-simulink-blockset</code> ami-iit/mujoco-simulink-blockset-cmake-buildsystem.git <code>v3.0.0</code>"},{"location":"sw_versioning_table/2023.11.0/","title":"\ud83d\udce6 Distro 2023.11.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.15.3</code> <code>YARP</code> robotology/yarp.git <code>v3.8.1</code> <code>ICUB</code> robotology/icub-main.git <code>v2.4.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.5.2</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.37.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.37.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.37.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.37.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.24.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.25.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.9.0</code> <code>icub-models</code> robotology/icub-models.git <code>v2.4.1</code> <code>iDynTree</code> robotology/idyntree.git <code>v10.0.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.3</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.103</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20230000.0</code> <code>casadi</code> casadi/casadi.git <code>3.6.3</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.6.0</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.8.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.7</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.4</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.3</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.1</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.7.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.8.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.10.0</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.4</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.8.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v3.0.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.3.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.16.1</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.1</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.3</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.3</code> <code>robometry</code> robotology/robometry.git <code>v1.2.2</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.3.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.3.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.8</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.3</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.7.1</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.31</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.3</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.1</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.4.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.6.0</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code> <code>mujoco</code> ami-iit/mujoco.git <code>2.3.5.1</code> <code>mujoco-simulink-blockset</code> ami-iit/mujoco-simulink-blockset-cmake-buildsystem.git <code>v3.0.0</code> <code>resolve-robotics-uri-py</code> ami-iit/resolve-robotics-uri-py.git <code>v0.1.0</code>"},{"location":"sw_versioning_table/2024.02.0/","title":"\ud83d\udce6 Distro 2024.02.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.16.2</code> <code>YARP</code> robotology/yarp.git <code>v3.9.0</code> <code>ICUB</code> robotology/icub-main.git <code>v2.5.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.6.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.38.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.38.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.38.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.38.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.24.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.26.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.10.0</code> <code>icub-models</code> robotology/icub-models.git <code>v2.5.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v10.3.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.3</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.103</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20240000.3</code> <code>casadi</code> casadi/casadi.git <code>3.6.3</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.7.1</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.9.1</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.8</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.4</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.5</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.1</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.1</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.7.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.8.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.10.0</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.4</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.8.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v3.0.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.3.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.18.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.1</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.3</code> <code>diagnosticdaemon</code> robotology/diagnostic-daemon.git <code>v1.0.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.4</code> <code>robometry</code> robotology/robometry.git <code>v1.2.3</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.3.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.3.1</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.9</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.3</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.8.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.0.34</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.3</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.1</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.4.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.6.3</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code> <code>mujoco</code> ami-iit/mujoco.git <code>2.3.5.1</code> <code>mujoco-simulink-blockset</code> ami-iit/mujoco-simulink-blockset-cmake-buildsystem.git <code>v3.0.0</code> <code>resolve-robotics-uri-py</code> ami-iit/resolve-robotics-uri-py.git <code>v0.2.0</code>"},{"location":"sw_versioning_table/2024.05.0/","title":"\ud83d\udce6 Distro 2024.05.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.16.4</code> <code>YARP</code> robotology/yarp.git <code>v3.9.0</code> <code>ICUB</code> robotology/icub-main.git <code>v2.6.2</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.6.2</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.39.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.39.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.39.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.39.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.24.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.27.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.11.2</code> <code>icub-models</code> robotology/icub-models.git <code>v2.6.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v12.3.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> oxfordcontrol/osqp.git <code>v0.6.3</code> <code>manif</code> robotology-dependencies/manif.git <code>0.0.4.103</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20240000.4</code> <code>casadi</code> casadi/casadi.git <code>3.6.5</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.7.4</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.9.1</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.8</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.5</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.5</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.1</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.1</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.8.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.8.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.11.1</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.4</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.8.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v3.0.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.3.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.18.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.1</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.5</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.4</code> <code>robometry</code> robotology/robometry.git <code>v1.2.4</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.3.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.5.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.9</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.3</code> <code>pyngrok</code> alexdlaird/pyngrok.git <code>7.1.6</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.8.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.1.37</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.4</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.1</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.4.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.6.4</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code> <code>mujoco</code> ami-iit/mujoco.git <code>2.3.5.1</code> <code>mujoco-simulink-blockset</code> ami-iit/mujoco-simulink-blockset-cmake-buildsystem.git <code>v3.0.0</code> <code>resolve-robotics-uri-py</code> ami-iit/resolve-robotics-uri-py.git <code>v0.3.0</code> <code>yarp-devices-ros</code> robotology/yarp-devices-ros.git <code>v3.9.0</code> <code>yarp-device-keyboard-joypad</code> ami-iit/yarp-device-keyboard-joypad.git <code>v0.0.2</code> <code>gz-sim-yarp-plugins</code> robotology/gz-sim-yarp-plugins.git <code>v0.2.0</code>"},{"location":"sw_versioning_table/2024.08.0/","title":"\ud83d\udce6 Distro 2024.08.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.16.9</code> <code>YARP</code> robotology/yarp.git <code>v3.9.0</code> <code>ICUB</code> robotology/icub-main.git <code>v2.6.3</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.6.3</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.40.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.39.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.40.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.40.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.25.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.27.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.11.2</code> <code>icub-models</code> robotology/icub-models.git <code>v2.7.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v12.4.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> robotology-dependencies/osqp.git <code>v0.6.3.1</code> <code>manif</code> artivis/manif.git <code>0.0.5</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20240000.4</code> <code>casadi</code> casadi/casadi.git <code>3.6.5</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.7.5</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.9.1</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.8</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.5</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v0.8.5</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v5.6.1</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.1</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.8.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.8.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.11.2</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.4</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.1</code> <code>wearables</code> robotology/wearables.git <code>v1.9.0</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v3.1.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.3.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.18.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.1</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.5</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.4</code> <code>robometry</code> robotology/robometry.git <code>v1.2.4</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.3.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.5.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.9</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.3</code> <code>pyngrok</code> alexdlaird/pyngrok.git <code>7.2.0</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.8.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.1.40</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.4</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.1</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.4.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.6.4</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code> <code>mujoco</code> ami-iit/mujoco.git <code>2.3.5.1</code> <code>mujoco-simulink-blockset</code> ami-iit/mujoco-simulink-blockset-cmake-buildsystem.git <code>v3.0.0</code> <code>resolve-robotics-uri-py</code> ami-iit/resolve-robotics-uri-py.git <code>v0.3.0</code> <code>yarp-devices-ros</code> robotology/yarp-devices-ros.git <code>v3.9.0</code> <code>yarp-device-keyboard-joypad</code> ami-iit/yarp-device-keyboard-joypad.git <code>v0.0.2</code> <code>gz-sim-yarp-plugins</code> robotology/gz-sim-yarp-plugins.git <code>v0.3.0</code>"},{"location":"sw_versioning_table/2024.11.0/","title":"\ud83d\udce6 Distro 2024.11.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.18.0</code> <code>YARP</code> robotology/yarp.git <code>v3.10.1</code> <code>ICUB</code> robotology/icub-main.git <code>v2.7.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.7.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.41.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.41.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.41.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.41.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.25.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.27.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.12.0</code> <code>icub-models</code> robotology/icub-models.git <code>v3.0.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v13.2.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> robotology-dependencies/osqp.git <code>v0.6.3.1</code> <code>manif</code> artivis/manif.git <code>0.0.5</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20240000.7</code> <code>casadi</code> casadi/casadi.git <code>3.6.7</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.7.5</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.10.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.8</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.5</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v1.0.1</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v6.0.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.1</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.8.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.8.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.11.2</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.5</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.2</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v4.1.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.3.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.19.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.1</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.6</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.4</code> <code>robometry</code> robotology/robometry.git <code>v1.2.4</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.3.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.7.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.9</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.3</code> <code>pyngrok</code> alexdlaird/pyngrok.git <code>7.2.1</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.8.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.1.43</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.5</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.1</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.4.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.6.7</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code> <code>mujoco</code> ami-iit/mujoco.git <code>2.3.5.1</code> <code>mujoco-simulink-blockset</code> ami-iit/mujoco-simulink-blockset-cmake-buildsystem.git <code>v3.0.0</code> <code>resolve-robotics-uri-py</code> ami-iit/resolve-robotics-uri-py.git <code>v0.3.0</code> <code>yarp-devices-ros</code> robotology/yarp-devices-ros.git <code>v3.10.0</code> <code>yarp-ros</code> robotology/yarp-ros.git <code>v3.10.0</code> <code>yarp-device-keyboard-joypad</code> ami-iit/yarp-device-keyboard-joypad.git <code>v0.0.2</code> <code>gz-sim-yarp-plugins</code> robotology/gz-sim-yarp-plugins.git <code>v0.3.1</code> <code>sharedlibpp</code> ami-iit/sharedlibpp.git <code>v0.0.3</code> <code>QpSolversEigen</code> ami-iit/qpsolvers-eigen.git <code>v0.1.0</code> <code>yarp-devices-ros2</code> robotology/yarp-devices-ros2.git <code>v1.0.0</code> <code>xcub-moveit2</code> icub-tech-iit/xcub-moveit2.git <code>v0.2.0</code> <code>icub-tech-iit-documentation</code> icub-tech-iit/documentation.git <code>v1.0.0</code>"},{"location":"sw_versioning_table/2024.11.1/","title":"\ud83d\udce6 Distro 2024.11.1","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.18.0</code> <code>YARP</code> robotology/yarp.git <code>v3.10.1</code> <code>ICUB</code> robotology/icub-main.git <code>v2.7.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.7.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.41.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.41.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.41.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.41.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.26.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.28.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.12.0</code> <code>icub-models</code> robotology/icub-models.git <code>v3.0.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v13.2.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> robotology-dependencies/osqp.git <code>v0.6.3.1</code> <code>manif</code> artivis/manif.git <code>0.0.5</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20240000.7</code> <code>casadi</code> casadi/casadi.git <code>3.6.7</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.7.6</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.10.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.9</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.5</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v1.0.1</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v6.0.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.1</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.8.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.8.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.11.2</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.5</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.2</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v4.1.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.3.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.19.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.1</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.6</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.4</code> <code>robometry</code> robotology/robometry.git <code>v1.2.5</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.3.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.7.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.9</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.3</code> <code>pyngrok</code> alexdlaird/pyngrok.git <code>7.2.1</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.8.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.1.43</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.5</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.1</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.4.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.6.7</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code> <code>mujoco</code> ami-iit/mujoco.git <code>2.3.5.1</code> <code>mujoco-simulink-blockset</code> ami-iit/mujoco-simulink-blockset-cmake-buildsystem.git <code>v3.0.0</code> <code>resolve-robotics-uri-py</code> ami-iit/resolve-robotics-uri-py.git <code>v0.3.0</code> <code>yarp-devices-ros</code> robotology/yarp-devices-ros.git <code>v3.10.0</code> <code>yarp-ros</code> robotology/yarp-ros.git <code>v3.10.0</code> <code>yarp-device-keyboard-joypad</code> ami-iit/yarp-device-keyboard-joypad.git <code>v0.0.2</code> <code>gz-sim-yarp-plugins</code> robotology/gz-sim-yarp-plugins.git <code>v0.3.1</code> <code>sharedlibpp</code> ami-iit/sharedlibpp.git <code>v0.0.3</code> <code>QpSolversEigen</code> ami-iit/qpsolvers-eigen.git <code>v0.1.0</code> <code>yarp-devices-ros2</code> robotology/yarp-devices-ros2.git <code>v1.0.0</code> <code>xcub-moveit2</code> icub-tech-iit/xcub-moveit2.git <code>v0.2.0</code> <code>icub-tech-iit-documentation</code> icub-tech-iit/documentation.git <code>v1.0.0</code>"},{"location":"sw_versioning_table/2024.11.2/","title":"\ud83d\udce6 Distro 2024.11.2","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.18.1</code> <code>YARP</code> robotology/yarp.git <code>v3.10.1</code> <code>ICUB</code> robotology/icub-main.git <code>v2.7.1</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.7.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.41.1</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.41.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.41.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.41.1</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.26.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.28.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.12.0</code> <code>icub-models</code> robotology/icub-models.git <code>v3.0.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v13.2.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> robotology-dependencies/osqp.git <code>v0.6.3.1</code> <code>manif</code> artivis/manif.git <code>0.0.5</code> <code>qhull</code> qhull/qhull.git <code>2020.2</code> <code>CppAD</code> coin-or/CppAD.git <code>20240000.7</code> <code>casadi</code> casadi/casadi.git <code>3.6.7</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.7.6</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.10.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.9</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.5</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v1.0.1</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v6.0.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.8.1</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.8.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.8.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.11.2</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.5</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.2</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v4.1.0</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.3.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.2.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.19.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.1</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.2.6</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.4</code> <code>robometry</code> robotology/robometry.git <code>v1.2.5</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.3.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.7.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.9</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.3</code> <code>pyngrok</code> alexdlaird/pyngrok.git <code>7.2.1</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.8.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.1.43</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.5</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.1</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.4.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.6.7</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code> <code>mujoco</code> ami-iit/mujoco.git <code>2.3.5.1</code> <code>mujoco-simulink-blockset</code> ami-iit/mujoco-simulink-blockset-cmake-buildsystem.git <code>v3.0.0</code> <code>resolve-robotics-uri-py</code> ami-iit/resolve-robotics-uri-py.git <code>v0.3.0</code> <code>yarp-devices-ros</code> robotology/yarp-devices-ros.git <code>v3.10.0</code> <code>yarp-ros</code> robotology/yarp-ros.git <code>v3.10.0</code> <code>yarp-device-keyboard-joypad</code> ami-iit/yarp-device-keyboard-joypad.git <code>v0.0.2</code> <code>gz-sim-yarp-plugins</code> robotology/gz-sim-yarp-plugins.git <code>v0.3.1</code> <code>sharedlibpp</code> ami-iit/sharedlibpp.git <code>v0.0.3</code> <code>QpSolversEigen</code> ami-iit/qpsolvers-eigen.git <code>v0.1.0</code> <code>yarp-devices-ros2</code> robotology/yarp-devices-ros2.git <code>v1.0.0</code> <code>xcub-moveit2</code> icub-tech-iit/xcub-moveit2.git <code>v0.2.0</code> <code>icub-tech-iit-documentation</code> icub-tech-iit/documentation.git <code>v1.0.0</code>"},{"location":"sw_versioning_table/2025.02.0/","title":"\ud83d\udce6 Distro 2025.02.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.18.2</code> <code>YARP</code> robotology/yarp.git <code>v3.11.2</code> <code>ICUB</code> robotology/icub-main.git <code>v2.8.2</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.8.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.42.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.42.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.42.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.42.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.26.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.28.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.12.1</code> <code>icub-models</code> robotology/icub-models.git <code>v3.1.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v13.3.0</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> robotology-dependencies/osqp.git <code>v0.6.3.1</code> <code>manif</code> artivis/manif.git <code>0.0.5</code> <code>CppAD</code> coin-or/CppAD.git <code>20250000.2</code> <code>casadi</code> casadi/casadi.git <code>3.6.7</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.7.7</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.11.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.9</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.5</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v1.0.1</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v6.0.0</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.9.0</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.8.0</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.8.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.11.3</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.7</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.2</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v4.2.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.1.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.3.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.3.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.20.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.2.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.1</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.3.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.6.2.4</code> <code>robometry</code> robotology/robometry.git <code>v1.2.6</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.3.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.6.7.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.11</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.3</code> <code>pyngrok</code> alexdlaird/pyngrok.git <code>7.2.3</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.9.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.1.45</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.7</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.1</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.4.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.7.1</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code> <code>mujoco</code> ami-iit/mujoco.git <code>2.3.5.1</code> <code>mujoco-simulink-blockset</code> ami-iit/mujoco-simulink-blockset-cmake-buildsystem.git <code>v3.0.0</code> <code>resolve-robotics-uri-py</code> ami-iit/resolve-robotics-uri-py.git <code>v0.3.0</code> <code>yarp-devices-ros</code> robotology/yarp-devices-ros.git <code>v3.10.0</code> <code>yarp-ros</code> robotology/yarp-ros.git <code>v3.10.0</code> <code>yarp-device-keyboard-joypad</code> ami-iit/yarp-device-keyboard-joypad.git <code>v0.0.2</code> <code>gz-sim-yarp-plugins</code> robotology/gz-sim-yarp-plugins.git <code>v0.4.0</code> <code>sharedlibpp</code> ami-iit/sharedlibpp.git <code>v0.0.3</code> <code>QpSolversEigen</code> ami-iit/qpsolvers-eigen.git <code>v0.1.0</code> <code>yarp-devices-ros2</code> robotology/yarp-devices-ros2.git <code>v1.1.0</code> <code>xcub-moveit2</code> icub-tech-iit/xcub-moveit2.git <code>v0.3.0</code> <code>icub-tech-iit-documentation</code> icub-tech-iit/documentation.git <code>v1.0.0</code> <code>ResolveRoboticsURICpp</code> ami-iit/resolve-robotics-uri-cpp.git <code>v0.0.2</code>"},{"location":"sw_versioning_table/2025.05.0/","title":"\ud83d\udce6 Distro 2025.05.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.18.3</code> <code>YARP</code> robotology/yarp.git <code>v3.12.0</code> <code>ICUB</code> robotology/icub-main.git <code>v2.9.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.11.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.43.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.43.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.43.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.43.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.26.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.28.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.12.2</code> <code>icub-models</code> robotology/icub-models.git <code>v3.1.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v13.4.2</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> robotology-dependencies/osqp.git <code>v1.0.0.1</code> <code>manif</code> artivis/manif.git <code>0.0.5</code> <code>CppAD</code> coin-or/CppAD.git <code>20250000.2</code> <code>casadi</code> ami-iit/casadi.git <code>3.7.0.1</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.7.9</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.12.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.9</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.5</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v1.0.1</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v6.0.1</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.10.1</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.8.1</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.8.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.11.3</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.8</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.3</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v4.2.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.2.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.3.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.2.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.3.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.22.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.3.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.1</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.3.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.9.0.1</code> <code>robometry</code> robotology/robometry.git <code>v1.2.7</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.3.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.7.0.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.11</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.3</code> <code>pyngrok</code> alexdlaird/pyngrok.git <code>7.2.11</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.9.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.1.49</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.9</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.1</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.4.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.7.1</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code> <code>mujoco</code> ami-iit/mujoco.git <code>2.3.5.1</code> <code>mujoco-simulink-blockset</code> ami-iit/mujoco-simulink-blockset-cmake-buildsystem.git <code>v3.0.0</code> <code>resolve-robotics-uri-py</code> ami-iit/resolve-robotics-uri-py.git <code>v0.3.1</code> <code>yarp-devices-ros</code> robotology/yarp-devices-ros.git <code>v3.10.0</code> <code>yarp-ros</code> robotology/yarp-ros.git <code>v3.10.0</code> <code>yarp-device-keyboard-joypad</code> ami-iit/yarp-device-keyboard-joypad.git <code>v0.0.2</code> <code>gz-sim-yarp-plugins</code> robotology/gz-sim-yarp-plugins.git <code>v0.4.2</code> <code>sharedlibpp</code> ami-iit/sharedlibpp.git <code>v0.0.3</code> <code>QpSolversEigen</code> ami-iit/qpsolvers-eigen.git <code>v0.1.0</code> <code>yarp-devices-ros2</code> robotology/yarp-devices-ros2.git <code>v1.1.0</code> <code>xcub-moveit2</code> icub-tech-iit/xcub-moveit2.git <code>v0.3.0</code> <code>icub-tech-iit-documentation</code> icub-tech-iit/documentation.git <code>v1.0.0</code> <code>ResolveRoboticsURICpp</code> ami-iit/resolve-robotics-uri-cpp.git <code>v0.0.3</code> <code>BiomechanicalAnalysisFramework</code> ami-iit/biomechanical-analysis-framework.git <code>v0.2.1</code>"},{"location":"sw_versioning_table/2025.08.0/","title":"\ud83d\udce6 Distro 2025.08.0","text":"CMake Packages Repositories Versions <code>YCM</code> robotology/ycm.git <code>v0.18.4</code> <code>YARP</code> robotology/yarp.git <code>v3.12.1</code> <code>ICUB</code> robotology/icub-main.git <code>v2.10.0</code> <code>robots-configuration</code> robotology/robots-configuration.git <code>v2.12.0</code> <code>icub-firmware</code> robotology/icub-firmware.git <code>v1.44.0</code> <code>icub-firmware-models</code> robotology/icub-firmware-models.git <code>v1.44.0</code> <code>icub_firmware_shared</code> robotology/icub-firmware-shared.git <code>v1.44.0</code> <code>icub-firmware-build</code> robotology/icub-firmware-build.git <code>v1.44.0</code> <code>ICUBcontrib</code> robotology/icub-contrib-common.git <code>v1.19.0</code> <code>icub-basic-demos</code> robotology/icub-basic-demos.git <code>v1.26.0</code> <code>icub-tests</code> robotology/icub-tests.git <code>v1.28.0</code> <code>GazeboYARPPlugins</code> robotology/gazebo-yarp-plugins.git <code>v4.12.2</code> <code>icub-models</code> robotology/icub-models.git <code>v3.1.0</code> <code>iDynTree</code> robotology/idyntree.git <code>v13.4.2</code> <code>qpOASES</code> robotology-dependencies/qpOASES.git <code>v3.2.0.1</code> <code>osqp</code> robotology-dependencies/osqp.git <code>v1.0.0.1</code> <code>manif</code> artivis/manif.git <code>0.0.5</code> <code>CppAD</code> coin-or/CppAD.git <code>20250000.2</code> <code>casadi</code> ami-iit/casadi.git <code>3.7.0.1</code> <code>ergocub-software</code> icub-tech-iit/ergocub-software.git <code>v0.7.10</code> <code>yarp-matlab-bindings</code> robotology/yarp-matlab-bindings.git <code>v3.12.0</code> <code>RobotTestingFramework</code> robotology/robot-testing-framework.git <code>v2.0.1</code> <code>blocktestcore</code> robotology/blocktest.git <code>v2.3.10</code> <code>blocktest-yarp-plugins</code> robotology/blocktest-yarp-plugins.git <code>v1.1.5</code> <code>BlockFactory</code> robotology/blockfactory.git <code>v1.0.1</code> <code>WBToolbox</code> robotology/wb-toolbox.git <code>v6.0.1</code> <code>OsqpEigen</code> robotology/osqp-eigen.git <code>v0.10.3</code> <code>UnicyclePlanner</code> robotology/unicycle-footstep-planner.git <code>v0.8.1</code> <code>walking-controllers</code> robotology/walking-controllers.git <code>v0.8.0</code> <code>icub-gazebo-wholebody</code> robotology/icub-gazebo-wholebody.git <code>v0.1.0</code> <code>whole-body-controllers</code> robotology/whole-body-controllers.git <code>v2.5.6</code> <code>whole-body-estimators</code> robotology/whole-body-estimators.git <code>v0.11.3</code> <code>walking-teleoperation</code> robotology/walking-teleoperation.git <code>v1.3.8</code> <code>yarp-devices-forcetorque</code> robotology/yarp-devices-forcetorque.git <code>v0.3.3</code> <code>HumanDynamicsEstimation</code> robotology/human-dynamics-estimation.git <code>v4.2.1</code> <code>human-gazebo</code> robotology/human-gazebo.git <code>v1.2.0</code> <code>simulink-arsenal</code> icub-tech-iit/simulink-arsenal.git <code>v1.0.0</code> <code>yarp-device-xsensmt</code> robotology/yarp-device-xsensmt.git <code>v0.3.0</code> <code>yarp-device-ovrheadset</code> robotology/yarp-device-ovrheadset.git <code>v1.0.0</code> <code>speech</code> robotology/speech.git <code>v1.3.0</code> <code>funny-things</code> robotology/funny-things.git <code>v2.3.0</code> <code>bipedal-locomotion-framework</code> ami-iit/bipedal-locomotion-framework.git <code>v0.22.0</code> <code>LieGroupControllers</code> ami-iit/lie-group-controllers.git <code>v0.3.0</code> <code>event-driven</code> robotology/event-driven.git <code>v2.1</code> <code>matioCpp</code> ami-iit/matio-cpp.git <code>v0.3.0</code> <code>osqp-matlab</code> ami-iit/osqp-matlab-cmake-buildsystem.git <code>v0.9.0.1</code> <code>robometry</code> robotology/robometry.git <code>v1.2.8</code> <code>gym-ignition</code> robotology/gym-ignition.git <code>v1.3.1</code> <code>matlab-whole-body-simulator</code> ami-iit/matlab-whole-body-simulator.git <code>v3.3.0</code> <code>casadi-matlab-bindings</code> ami-iit/casadi-matlab-bindings.git <code>v3.7.0.0</code> <code>idyntree-yarp-tools</code> robotology/idyntree-yarp-tools.git <code>v0.0.11</code> <code>pyqtconsole</code> pyqtconsole/pyqtconsole.git <code>v1.2.3</code> <code>pyngrok</code> alexdlaird/pyngrok.git <code>7.2.12</code> <code>meshcat-python</code> rdeits/meshcat-python.git <code>v0.3.2</code> <code>robot-log-visualizer</code> ami-iit/robot-log-visualizer.git <code>v0.11.0</code> <code>OpenXR</code> KhronosGroup/OpenXR-SDK.git <code>release-1.1.51</code> <code>OpenVR</code> ami-iit/openvr.git <code>v1.16.8.1</code> <code>yarp-device-openxrheadset</code> ami-iit/yarp-device-openxrheadset.git <code>v0.0.9</code> <code>yarp-openvr-trackers</code> ami-iit/yarp-openvr-trackers.git <code>v0.0.1</code> <code>find-superquadric</code> robotology/find-superquadric.git <code>v1.1.1</code> <code>tomlplusplus</code> marzer/tomlplusplus.git <code>v3.4.0</code> <code>proxsuite</code> Simple-Robotics/proxsuite.git <code>v0.7.2</code> <code>BayesFilters</code> robotology/bayes-filters-lib.git <code>0.10.0</code> <code>mujoco</code> ami-iit/mujoco.git <code>2.3.5.1</code> <code>mujoco-simulink-blockset</code> ami-iit/mujoco-simulink-blockset-cmake-buildsystem.git <code>v3.0.0</code> <code>resolve-robotics-uri-py</code> ami-iit/resolve-robotics-uri-py.git <code>v0.3.1</code> <code>yarp-devices-ros</code> robotology/yarp-devices-ros.git <code>v3.10.0</code> <code>yarp-ros</code> robotology/yarp-ros.git <code>v3.10.0</code> <code>yarp-device-keyboard-joypad</code> ami-iit/yarp-device-keyboard-joypad.git <code>v0.0.2</code> <code>gz-sim-yarp-plugins</code> robotology/gz-sim-yarp-plugins.git <code>v0.5.0</code> <code>sharedlibpp</code> ami-iit/sharedlibpp.git <code>v0.0.3</code> <code>QpSolversEigen</code> ami-iit/qpsolvers-eigen.git <code>v0.2.0</code> <code>yarp-devices-ros2</code> robotology/yarp-devices-ros2.git <code>v1.1.0</code> <code>xcub-moveit2</code> icub-tech-iit/xcub-moveit2.git <code>v0.3.0</code> <code>icub-tech-iit-documentation</code> icub-tech-iit/documentation.git <code>v1.0.0</code> <code>ResolveRoboticsURICpp</code> ami-iit/resolve-robotics-uri-cpp.git <code>v0.0.3</code> <code>BiomechanicalAnalysisFramework</code> ami-iit/biomechanical-analysis-framework.git <code>v0.2.2</code>"},{"location":"tactile_sensors/","title":"Summary","text":""},{"location":"tactile_sensors/#tactile-sensors","title":"Tactile Sensors","text":"<p>We collect here information regarding the tactile sensors of iCub.</p> <ul> <li>Physical Sensors</li> <li>Reading Tactile Data</li> <li>Visualizing Tactile Data</li> <li>Tactile Data Flow</li> </ul>"},{"location":"tactile_sensors/hardware/physical_sensors/","title":"Physical Sensors","text":""},{"location":"tactile_sensors/hardware/physical_sensors/#physical-sensors","title":"Physical Sensors","text":"<p>The tactile sensor network of iCub is organized into patches. A patch is a set of tactile sensors that are physically connected one to the other and that are read by the same microcontroller. In particular, 18 patches are mounted on the robot: - 1 in each hand - 2 in each forearm - 4 in each upper arm - 4 in the torso</p> <p> </p> <p>Each patch is composed by (at most 16) triangular modules, each consisting of 10 tactile sensors (aka taxels), with two additional small ones that are thermal pads (7<sup>th</sup> and 11<sup>th</sup> element). The 4<sup>th</sup> value corresponds to the taxel in the center of the triangle.</p> <p>Note</p> <p>Older skin version contained 12 taxels per triangle.</p>"},{"location":"tactile_sensors/software/dataflow/","title":"Tactile Data Flow","text":""},{"location":"tactile_sensors/software/dataflow/#tactile-data-flow","title":"Tactile Data Flow","text":""},{"location":"tactile_sensors/software/dataflow/#main-flow-of-information","title":"Main Flow of Information","text":"<p>This picture below depicts the flow of the tactile data, starting from the physical sensors and moving up to the user applications and the GUIs.</p> <p> </p> <p>The tactile sensor data are sent on YARP ports with names <code>/icub/skin/part_name</code> (\"data ports\" in the figure).</p> <p>There is also one \"rpc port\" for each skin \"data port\", which is used to send a reset command to the skin microcontrollers. The skin data port can then be read either directly, or through the <code>IAnalogSensor</code> YARP interface.</p> <p>The <code>skinManager</code> reads the raw tactile data and creates another set of YARP ports with names <code>/icub/skin/part_name_comp</code>, which stream the filtered data (after thermal drift compensation and high frequency noise filtering).</p> <p>Moreover, the <code>skinManager</code> also creates one \"event port\" that outputs a <code>skinContactList</code>, that is a high-level representation of the contacts detected by the skin (i.e., it abstracts from the specific sensor configuration and it provides information such as contact center of pressure, contact force, contact link).</p> <p>The <code>iCubSkinGui</code> is typically connected to the ports outputting the filtered tactile data.</p> <p>Also, the <code>skinManager</code> has its own GUI, which allows the user to adjust the filtering parameters, to switch the visualization from continuous to binary (i.e., contact/noncontact), and to monitor the sensor state.</p>"},{"location":"tactile_sensors/software/dataflow/#applications","title":"Applications","text":"<p>The picture below illustrates a scheme of a possible application that uses the tactile data.</p> <p> </p> <p>In particular, the depicted application is the autonomous skin calibration, which is composed of two main modules:</p> <ul> <li>Parallel Control: module controlling the robot to let it interact with the environment.</li> <li>Skin Calibrator: module estimating online the 3D positions of the tactile sensors.</li> </ul> <p>Note how the tactile data are displayed by both the <code>iCubSkinGui</code> and the <code>iCubGui</code>.</p>"},{"location":"tactile_sensors/software/reading_data/","title":"Reading Tactile Data","text":""},{"location":"tactile_sensors/software/reading_data/#reading-raw-tactile-data","title":"Reading Raw Tactile Data","text":"<p>Each sensor outputs an integer value in <code>[0 255]</code>: the lower the value, the higher the pressure. The output value with zero pressure may vary with the version of the firmware, but it is typically <code>235</code>.</p> <p>Tactile sensor data are provided to the user through YARP ports streaming YARP vectors. In particular, these are the available ports:</p> <ul> <li><code>/icub/skin/left_hand</code> (1 patch)</li> <li><code>/icub/skin/left_forearm</code> (2 patches)</li> <li><code>/icub/skin/left_arm</code> (4 patches)</li> <li><code>/icub/skin/right_hand</code> (1 patch)</li> <li><code>/icub/skin/right_forearm</code> (2 patches)</li> <li><code>/icub/skin/right_arm</code> (4 patches)</li> <li><code>/icub/skin/torso</code> (4 patches)</li> </ul> <p>Taking a look at the number of ports (i.e. 7) and the number of patches (i.e. 18), it is clear that some ports correspond to more than one patch. Consequently, the sizes of the output vectors of the ports are different.</p> <p>Given that each patch is composed by at most 16 triangles, each containing 12 sensors, each patch can have at most 192 sensors. Hence, each port outputs 192 values for each patch. However, since some patches do not contain 16 triangles (e.g. hand, upper forearm, top upper arm), some of the port output values are always zero \u2013 see this section.</p>"},{"location":"tactile_sensors/software/reading_data/#reading-compensated-tactile-data","title":"Reading Compensated Tactile Data","text":"<p>For most applications, raw sensor data need some filtering before being used.</p> <p>The software module <code>skinManager</code> takes care of:</p> <ol> <li>compensating for the thermal drift affecting the sensors.</li> <li>filtering high frequency noise.</li> </ol> <p>The filtered tactile data can be read from YARP ports (similarly to the raw data):</p> <ul> <li><code>/icub/skin/left_hand_comp</code></li> <li><code>/icub/skin/left_forearm_comp</code></li> <li><code>/icub/skin/left_arm_comp</code></li> <li><code>/icub/skin/right_hand_comp</code></li> <li><code>/icub/skin/right_forearm_comp</code></li> <li><code>/icub/skin/right_arm_comp</code></li> <li><code>/icub/skin/torso_comp</code></li> </ul> <p>Differently from the raw data, these values are floating point numbers in <code>[0 255]</code>, where <code>0</code> means no pressure.</p> <p>One can read the output of the skin ports on the terminal using the following command:</p> <pre><code>$ yarp read ... port_name\n</code></pre> <p>Each port outputs a vector of floating point numbers, with output from individual taxels and is zero padded in certain positions. The size of the vector depends on the skin part, in particular it is:</p> <ul> <li>192 for hand data, where 1-60 are taxels of fingertips (12 each in this order: index, middle, ring, little, thumb);</li> <li>61-96 zeros;</li> <li>97-144 palm taxels (inside these, 108, 120, 132, and 140 are thermal pads ~ <code>0</code>s);</li> <li>145-192 zeros.</li> </ul> <p>With the exception of the palm and finger data, the skin is composed of triangular modules with 10 taxels each. However, there are 12 positions reserved for each module in the port output. The 7<sup>th</sup> and 11<sup>th</sup> values are not meaningful as tactile output (signal from thermal pads) and can be ignored.</p> <ul> <li>2 * 192 = 384 for forearm data, where the first 192 values correspond to a full patch \u2013 bottom of forearm. They are 16 consecutive modules. Then, there is the other incomplete patch with only 7 modules (skin V1) / 8 modules (skin V2) at the top of the forearm.<ul> <li>V1: the positions 193-204; 217-252; 265-288; 325-336; 361-384 are empty.</li> <li>V2: the positions 217-228; 241-264; 277-288; 313-336; 361-384 are empty.</li> </ul> </li> <li>4 * 192 = 768 for (upper) arm data and torso.</li> </ul> <p>Index base</p> <p>We referred to the \"positions\" on the port starting from <code>1</code>. However, if you use <code>taxelIDs</code> from the <code>skinDynLin</code> library, positions start from <code>0</code>. Example: taxel ID 10 would be the 11<sup>th</sup> on the port. This is also used in the <code>skin_events</code> output \u2013 see this section.</p>"},{"location":"tactile_sensors/software/reading_data/#taxels-coordinates","title":"Taxels Coordinates","text":"<p>For every skin part, the coordinates of every taxel in local link reference frames can be retrieved from <code>icub-main/app/skinGui/conf/positions</code>.</p> <p>The first three columns are x,y,z coordinates. The default output rate is <code>50</code> Hz.</p>"},{"location":"tactile_sensors/software/reading_data/#reading-high-level-contact-data","title":"Reading High Level Contact Data","text":"<p>The software module <code>skinManager</code> provides a high-level representation of the tactile data, under the form of a <code>skinContactList</code>. A <code>skinContactList</code> is a list of <code>skinContact</code>. Note that in case multiple tactile sensors are activated by a contact, the <code>skinManager</code> groups them together into a unique <code>skinContact</code>.</p> <p>The port on which the skinContactList is written is:</p> <ul> <li><code>/skinManager/skin_events:o</code></li> </ul> <p>Every <code>skinContactList</code> is represented with the following format:</p> <ul> <li><code>(SKIN_CONTACT_VECTOR_1) ... (SKIN_CONTACT_VECTOR_N)</code>.</li> </ul> <p>There are as many <code>SKIN_CONTACT_VECTOR</code>s as there were (clusters of) contacts detected on the whole skin of the robot by the <code>skinManager</code>.</p> <p>In case of no contact, the <code>skinContactList</code> is empty.</p> <p>If there was contact, every <code>SKIN_CONTACT_VECTOR</code> is enclosed by brackets and has the following format:</p> <ul> <li><code>((contactId bodyPartId linkNumber skinPart) (centerOfPressure_x cOP_y cOP_z) (force_x f_y f_z) (moment_x m_y m_z) (geometricCenter_x gC_y gC_z) (surfaceNormalDirection_x sND_y sND_z) (activatedTaxelId1 aTId2 .. aTIdN) average_pressure)</code>.</li> </ul> <p>Here more information on some of the data:</p> <ul> <li><code>bodyPart</code>, the part of the body:<ul> <li><code>TORSO=1</code></li> <li><code>HEAD=2</code></li> <li><code>LEFT_ARM=3</code></li> <li><code>RIGHT_ARM=4</code></li> <li><code>LEFT_LEG=5</code></li> <li><code>RIGHT_LEG=6</code></li> </ul> </li> <li><code>linkNumber</code>, the link number relative to the specified body part (e.g., <code>upper arm=2</code>, <code>forearm=4</code>, <code>hand=6</code>)</li> <li><code>skinPart</code>, the part of the skin:<ul> <li><code>SKIN_LEFT_HAND=1</code></li> <li><code>SKIN_LEFT_FOREARM=2</code></li> <li><code>SKIN_LEFT_UPPER_ARM=3</code></li> <li><code>SKIN_RIGHT_HAND=4</code></li> <li><code>SKIN_RIGHT_FOREARM=5</code></li> <li><code>SKIN_RIGHT_UPPER_ARM=6</code></li> <li><code>SKIN_FRONT_TORSO=7</code></li> </ul> </li> <li><code>CoP</code>, the center of pressure (expressed in link reference frame)</li> <li><code>force</code>, force applied at contact (expressed in link reference frame)</li> <li><code>moment</code>, moment applied at contact (expressed in link reference frame)</li> <li><code>geoCenter</code>, the geometric center of the contact area (expressed in link reference frame)</li> <li><code>normalDir</code>, normal direction of the contact area (expressed in link reference frame)</li> <li><code>taxelList</code>, list of ids of the activated taxels</li> <li><code>pressure</code>, average output of the activated taxels</li> </ul>"},{"location":"tactile_sensors/software/visualizing_data/","title":"Visualizing Tactile Data","text":""},{"location":"tactile_sensors/software/visualizing_data/#visualizing-tactile-data","title":"Visualizing Tactile Data","text":"<p>There exist two ways to visualize tactile data:</p> <ol> <li><code>iCubSkinGui</code></li> <li><code>iCubGui</code></li> </ol> <p>The <code>iCubSkinGui</code> visualizes a 2D representation of one or more patches of tactile sensors. The GUI reads the tactile data from an input YARP port, hence it can visualize both raw data and compensated data.</p> <p>The <code>iCubGui</code> visualizes a 3D model of the iCub. To visualize the tactile data with this GUI you need to launch the <code>skinManager</code> module and connect the <code>skinManager</code> output port <code>/skinManager/skin_events:o</code> to the <code>iCubGui</code> input port <code>/iCubGui/forces</code>. Then, this GUI visualizes a red arrow for each contact detected by the tactile sensors. The length of the arrow is proportional to the sum of the outputs of the tactile sensors.</p> <p>Alternatively, if the robot is equipped with force/torque sensors and <code>wholeBodyDynamics</code> is running, the <code>iCubGui</code> can be connected to the port <code>/wholeBodyDynamics/contacts:o</code>. In this case, the tactile data are integrated with the force/torque data to estimate the external contact forces. This means that the length of the arrows displayed in the <code>iCubGui</code> would be proportional to the estimated force magnitude (rather than the tactile sensor outputs). To make this system work, you need to connect the <code>skinManager</code> port <code>/skinManager/skin_events:o</code> to the <code>wholeBodyDynamics</code> port <code>/wholeBodyDynamics/skin_contacts:i</code>.</p>"},{"location":"temperature_sensors/","title":"Summary","text":""},{"location":"temperature_sensors/#motor-temperature-sensors","title":"Motor temperature Sensors","text":"<p>We collect here information regarding the temperature sensors of the <code>ergoCub</code> motors.</p> <ul> <li>Overview of motor temperature sensor</li> <li>Motor temperature sensor Data Flow<ul> <li>Error handling</li> </ul> </li> <li>Reading motor temperature data</li> </ul>"},{"location":"temperature_sensors/general/overview/","title":"Overview of Temperature Sensors","text":""},{"location":"temperature_sensors/general/overview/#motor-temperature-sensors","title":"Motor temperature Sensors","text":"<p>The Motor Temperature Sensors are simple sensors made of a specific type of resistor (PT100 or PT1000) and of a small board defined as the Temperature Detection Board (TDB), which has the goal of decoding the value read by the resistor giving out a raw output code, which can be then translated to Celsius Degree so that it can be easily understood by the end-user. In a nutshell, most of the <code>ergoCub</code> motors are provided with an internal resistance temperature detector, which is then connected to a TDB board. The TDB board is then linked to a <code>2FOC</code> board, which elaborates the data acquired via <code>I2C</code> bus and sends it via the <code>CAN</code> bus to an <code>EMS</code> board. Finally, the EMS board streams the raw temperature values via the <code>ETH</code> bus to <code>embObjMotionControl</code>, which in turn updates and stores these acquisitions that the user can readily request from an external module.</p>"},{"location":"temperature_sensors/general/overview/#how-to-update-the-configuration-files","title":"How to update the configuration files","text":"<p>To correctly enable the use of the temperature sensors inside the configuration files (templates are available), it is necessary to fill in the following fields:</p> <ul> <li>under <code>hardware/motorControl/body_part--ebX-jA_B-mc.xml</code> you need to add the two parameters <code>hardwareTemperatureLimits</code> and <code>warningTemperatureLimits</code> in the <code>LIMITS</code> group.</li> <li>under <code>hardware/mechanicals/body_part-ebX-jA_B-mec.xml</code> you need to add the parameter <code>TemperatureSensorType</code> in the <code>2FOC</code> group, and remove the soon deprecated <code>HasTempSensor</code> parameter in the same area.</li> </ul> <p>That being done, it should be possible to use the features of the temperature sensors.</p>"},{"location":"temperature_sensors/general/overview/#how-to-read-the-motor-temperature","title":"How to read the motor temperature","text":"<p>First off, the user ought to make sure that the sensor is mounted on the desired motors, and then needs to update the robot configuration files accordingly, as described in the configuration section.  The correct configuration allows reading and sending the motor temperature values to the <code>yarprobotinterface</code>. However, these measurements are not currently published on the YARP <code>stateExt</code> port. Therefore, the user needs to devise a module application, similar to this one, to read the temperature.</p> <p>In addition, the user module can retrieve the <code>warningTemperatureLimits</code> and check if the temperature exceeds that limit to put the motor in a safer state with lower current consumption.</p> <p>HW Fault due to overheating</p> <p>Is it important to notice that the firmware puts the motor in HW Fault when the temperature  goes beyond the <code>hardwareTemperatureLimits</code> for longer than 10 seconds.</p> <p>More details on the temperature flow and error managmanagement are available in the section data flow.</p>"},{"location":"temperature_sensors/software/dataflow/","title":"Motor Temperature Data Flow","text":""},{"location":"temperature_sensors/software/dataflow/#motor-temperature-data-flow","title":"Motor temperature Data Flow","text":"<p>Generally, the data flow related to the whole pipeline of the sensing of the motor temperature is quite simple and a brief summary is proposed here below, whose main purpose is to make the reader aware of how the temperature data is retrieved from the motor resistance thermometer and printed out to a YARP port. </p> <p>In brief, as reported in the introductory section, most of the <code>ergoCub</code> motors are currently provided with a <code>PT100</code>, which is a particular resistor able to correlate a value of temperature to a value of resistance in <code>Ohm</code>. The resistor is connected to a board called Temperature Detection Board (TDB). The TBD reads the <code>Ohm</code> value from the <code>PT100</code> (or <code>PT1000</code> for different types of motors) and streams out the raw data using the <code>I2C</code> protocol. This raw data is then received by the <code>2FOC</code> board at a frequency of <code>10 Hz</code> and, immediately after, handed over to the <code>EMS</code> board via the <code>CAN</code> bus. The <code>EMS</code> stores the temperature values in memory and sends them to <code>embObjMotionControl</code> together with all the other motor information. Upon reception of the motor temperature, <code>embObjMotionControl</code> converts the values from raw to Celsius and checks if the <code>warningTemperatureLimit</code> is overcome. In that case, it prints out a warning on the yarprobotinterface log. No other actions are taken.</p>"},{"location":"temperature_sensors/software/dataflow/#main-flow-of-information","title":"Main Flow of Information","text":"<p>Here's a small yet exhaustive sequence diagram showing the whole dataflow as summarized above. It is possible to observe how the different actors that take part in the pipeline interact with each other, starting from the lower level up to the higher level.</p> <p> </p>"},{"location":"temperature_sensors/software/dataflow/#error-handling","title":"Error handling","text":"<p>The error management is mainly performed by the <code>2FOC</code>.</p> <p>The <code>2FOC</code> performs some checks while reading the temperature from the <code>I2C</code> and makes use of specific negative values (defined in the code) to notify the user of certain events.</p> <p>The TDB board sends 3 bytes on the <code>I2C</code> bus: the temperature value (2 bytes) and its configuration (1 byte). The <code>2FOC</code> verifies mainly the configuration byte.</p> <p>The possible errors currently managed are the following:</p> <ul> <li><code>-90</code> : the <code>2FOC</code> cannot read from the <code>I2C</code>, meaning that the <code>ACK</code> is not received from the <code>TDB</code>.</li> <li><code>-70</code> : the reading cannot be done for 10 consecutive seconds, meaning that the <code>TDB</code> can be configured but there are <code>I2C</code> communication problems between <code>2FOC</code> and <code>TDB</code></li> <li><code>-50</code> : the TDB loses the given configuration and uses the default one. In this case, the 2FOC restores the desired configuration.</li> <li><code>-30</code> : the <code>TDB</code> sets any configuration value different from both the desired and the default one.</li> </ul> <p>In the logfile, the <code>yarprobotinterface</code> prints the raw value instead the  degree Celsius. You can use the following table to understand the error. </p> Degree Celsius Raw value for PT100 Raw value for PT1000 <code>-90</code> <code>-1141</code> <code>-8541</code> <code>-70</code> <code>-886</code> <code>-6549</code> <code>-50</code> <code>-631</code> <code>-4613</code> <code>-30</code> <code>-378</code> <code>-2729</code> <p>The <code>2FOC</code> triggers the <code>Overheating Error</code>, so the motor is set in Hardware fault, when:</p> <ul> <li>it reads a temperature value beyond the <code>hardwareTemperatureLimits</code> longer than 10 seconds.</li> </ul> <p>Instead, the <code>2FOC</code> triggers the <code>I2C Communication Error</code>, so the motor is set in Hardware fault when:</p> <ul> <li>it cannot communicate over the <code>I2C bus</code> for more than 10 seconds (no data is transmitted even though the <code>TDB</code> is correctly configured).</li> </ul> <p>The <code>embObjMotionControl</code> converts the received raw values to Celsius degrees and checks that the result is not beyond the <code>warningTemperatureLimit</code>, otherwise it prints a warning log until the temperature drops. </p>"},{"location":"temperature_sensors/software/reading_data/","title":"Reading Motor Temperature Data","text":""},{"location":"temperature_sensors/software/reading_data/#reading-raw-temperature-data","title":"Reading Raw Temperature Data","text":"<p>Each temperature sensor outputs an integer raw value whose range depends on the type of resistance thermometer mounted on the motor. Currently, we can configure 2 types of sensors: <code>PT100</code> and <code>PT1000</code>. For <code>PT100</code>, raw values typically range from <code>0</code> to <code>3500</code>. Instead, for <code>PT1000</code>, the range is between <code>0</code> and <code>8000</code>.</p> <p>Although it is very unlikely to read negative temperatures in Celsius degrees during normal working conditions, we do accept negative values as they are specifically employed to notify the user of error conditions. Finally, we have that the higher the temperature the higher the raw output value.</p>"},{"location":"temperature_sensors/software/reading_data/#reading-compensated-motor-temperature-data","title":"Reading compensated motor temperature data","text":"<p>Regarding the correlation between raw temperature data and Celsius degree values here follows a brief description. First of all, in order to reduce the effort of the end-user and at the same time remain compliant with the rest of the firmware, we have decided to work with values in Celsius degree on <code>embObjMotionControl</code> and, instead, use the raw value in the firmware part. However, the configuration files are always filled with values in Celsius degrees; likewise, the values printed on the YARP port are in the same format. By contrast, on the board level, we use raw values. All the applied conversions strictly depend on the physical components involved, including the voltage divider, the resistance thermometer as well as the ADC stage of the TDB board.  One important note to highlight is that even if we know that the conversion between raw and Celsius degree values is not exactly linear, we have decided to linearize the conversion by accepting an error of around \u00b11.5 \u2103 over 100 \u2103.  Anyways, if you are interested in the specific insight regarding the conversion you can check this repository, which has been mainly used for two scopes:</p> <ul> <li>to check the validity of the linearization done and understand the magnitude of the error inside the working conditions, which are typically between 20 and 80 \u2103.</li> <li>to evaluate the exact raw values needed for setting the defined error values to be used in the firmware, so that we can have an accurate conversion (related to our formula) on the high level. (See error values for more details).</li> </ul>"},{"location":"temperature_sensors/software/reading_data/#data-conversion-from-raw-value-to-celsius-degree-value","title":"Data conversion from raw value to Celsius degree value","text":"<p>For converting a value from raw to Celsius degree the following steps are applied:</p> <pre><code>Evaluate a first temporary value:\n\n    double tmp = temperature * ((_resolution_pga) / (_pga_gain * _vcc * (_resolution_tdb + 1)));\n\nwhere:\n- _resolution_pga: resolution of the Programmable Gain Amplifier (PGA) mounted on the ADC, which is set to 2.048 [V]\n- _resolution_tdb: resolution of the TDB ADC, which is set to 32767 since we are working at 16bit and we are saving the value to a signed int\n- _vcc: incoming voltage in the voltage divider, which for us is set to 5V\n- _pga_gain: gain for the PGA, which we have set to 2\n\nThe use the calculated temporary value for evaluate the denominator of the final operation:\n\n    double den = _ptc_gradient * (_r_2 - _r_2*tmp - _r_3*tmp);\n\nwhere:\n- _ptc_gradient: slope of the PTXXX line\n- _r_2: one of the two upper resistors in the voltage divider bridge, which for us is equal to 4700 [Ohm]\n- _r_3: lower resistor of the bridge, which it should be set equal to the value, in Ohm, of the PTXXX at zero degree. Therefore, if we are using the PT100 it should be equal to 100\n\nFinally, the last calculation that outputs the value of the got temperature in Celsius Degree is:\n\n    double res = (tmp * (_first_res_coeff) / den) + ((_second_res_coeff) / den);\n\nwhere:\n- _ptc_offset: is the offset of the PTXXX line, thus it is 1000 in the case of PT1000 and 100 in the other case.\n- r1: the other of the two upper resistors in the voltage divider bridge, which for us is equal to 4700 [Ohm]\n- _first_res_coeff  = _r_1*_r_2 + _r_1*_r_3 + _ptc_offset*_r_2 + _ptc_offset*_r_3\n- _second_res_coeff = _r_3*_r_1 - _r_2*_ptc_offset\n\nIt should be noted that those offsets are used to have the PTXXX line passes through zero at 0 Celsius Degree.\n</code></pre>"},{"location":"temperature_sensors/software/reading_data/#data-conversion-from-celsius-degree-value-to-raw-value","title":"Data conversion from Celsius degree value to raw value","text":"<p>Similarly, for converting from Celsius degree to raw value:</p> <pre><code>    double tmp = (( (_ptc_offset + _ptc_gradient * temperature) / ((double)_r_1 + (_ptc_offset + _ptc_gradient * temperature))) - _half_bridge_resistor_coeff) * (double)_vcc;\n    double res = (_resolution_tdb + 1) * ((_pga_gain * tmp) / _resolution_pga);\n\nwhere:\n- temperature: temperature value passed in Celsius degree\n- _ptc_gradient: slope of the PTXXX line\n- _ptc_offset: offset of the PTXXX line, thus it is 1000 in the case of PT1000 and 100 in the other case.\n- _half_bridge_resistor_coeff = (double)_r_3 / (double)(_r_2 + _r_3) and it is the coefficient of half of the voltage divider\n- vcc: incoming voltage in the voltage divider, which for us is set to 5V\n- _resolution_pga: resolution of the PGA on the TDB, which is set to 2.048 [V]\n- _resolution_tdb: resolution of the TDB ADC, which is set to 32767 since it works at 16bit and we are saving the value to a signed int\n</code></pre>"},{"location":"temperature_sensors/software/reading_data/#table-of-typical-temperature-values","title":"Table of typical temperature values","text":"<p>Look up this table containing a good range of temperatures to better interpret the raw temperature values reported within the <code>yarprobotinterface</code> logs.  In particular, our robots can mount either PT100 or PT1000 temperature sensors, thus find below the correlation between raw and Celsius values for both sensors:</p> Temperature PT100 [Celsius] Temperature PT100 [Raw] Temperature PT1000 [Celsius] Temperature PT1000 [Raw] -100 -1269 -100 -9559 -90 -1141 -90 -8541 -80 -1013 -80 -7538 -70 -885 -70 -6549 -60 -758 -60 -5573 -50 -631 -50 -4612 -40 -504 -40 -3664 -30 -378 -30 -2729 -20 -251 -20 -1807 -10 -125 -10 -897 0 0 0 0 5 64 5 444 10 125 10 885 15 189 15 1323 20 251 20 1758 25 315 25 2191 30 377 30 2620 35 438 35 3047 40 503 40 3471 45 564 45 3892 50 626 50 4311 55 690 55 4726 60 752 60 5139 65 814 65 5549 70 875 70 5957 75 937 75 6362 80 999 80 6765 85 1061 85 7164 90 1126 90 7562 95 1188 95 7956 100 1246 100 8349 105 1308 105 8739 110 1370 110 9126 120 1494 120 9893 130 1619 130 10651 140 1740 140 11400 150 1865 150 12139 160 1987 160 12870 170 2109 170 13591 180 2230 180 14304 190 2353 190 15008 200 2475 200 15704"},{"location":"tips_tricks/","title":"Tips &amp; Tricks","text":"<p>A list of useful and multi-purpose tips and tricks that can help you in your daily work.</p> <ul> <li>Setup <code>tmux</code> infinite scroll</li> </ul>"},{"location":"tips_tricks/tmux/infinite_scroll/","title":"Setup <code>tmux</code> infinite scroll","text":"<p>Sometimes it is useful to run the <code>yarprobotinterface</code> directly from the terminal. By using <code>tmux</code>, you can detach from the SSH session. However, by default, the scrollback is not infinite, and not all messages are streamed to the logger.</p> <p>To overcome this limitation:</p> <ol> <li>Install xclip with:   <pre><code>sudo apt install xclip\n</code></pre></li> <li>Create a configuration file with:   <pre><code>touch ~/.tmux.conf\n</code></pre></li> <li>Set the following content in the configuration file:   <pre><code>set -g mouse on\nset -g history-limit 100000\n</code></pre></li> </ol>"},{"location":"upgrade_kits/","title":"Summary","text":""},{"location":"upgrade_kits/#upgrade-kits","title":"Upgrade Kits","text":""},{"location":"upgrade_kits/#kit_002-icub-upgrade-kit-torso-capacitors","title":"\ud83d\udd18 KIT_002 iCub Upgrade Kit: torso capacitors","text":"<p>iCub Torso Capacitors UpKit describes how to perform an upgrade to iCub so that the capacitors placed in its back don't get loose.</p>"},{"location":"upgrade_kits/#kit_003-icub-upgrade-kit-hand","title":"\ud83d\udd18 KIT_003 iCub Upgrade Kit: hand","text":"<p>iCub Hands Support UpKit describes how to perform an upgrade to the hands of iCub. The upgrade consists of replacing the supports of the mais board and on a new cover.</p>"},{"location":"upgrade_kits/#kit_004-icub-upgrade-kit-upper-arm-covers","title":"\ud83d\udd18 KIT_004 iCub Upgrade Kit: upper arm covers","text":"<p>iCub upper arm cover UpKit describes how to perform an upgrade to iCub so that the upper arm covers can be mounted.</p>"},{"location":"upgrade_kits/#kit_005-icub-upgrade-kit-eyes-support","title":"\ud83d\udd18 KIT_005 iCub Upgrade Kit: eyes support","text":"<p>iCub Eyes Support UpKit describes how to perform an upgrade to iCub so that the supports of the eyes make them more stable.</p>"},{"location":"upgrade_kits/#kit_006-icub-upgrade-kit-differential-neck-pulley","title":"\ud83d\udd18 KIT_006 iCub Upgrade Kit: differential neck pulley","text":"<p>iCub Differential Neck Pulley UpKit describes how to perform an upgrade of the neck of iCub so that the tendon does not easily slip away.</p>"},{"location":"upgrade_kits/#kit_007-icub-upgrade-kit-ankle-for-climbing-stairs","title":"\ud83d\udd18 KIT_007 iCub Upgrade Kit: ankle for climbing stairs","text":"<p>iCub ankle for climbing stairs UpKit describes how to perform an upgrade on the feet in order to  increase the step length and climb some stairs.</p>"},{"location":"upgrade_kits/#kit_008-icub-upgrade-kit-realsense-holder","title":"\ud83d\udd18 KIT_008 iCub Upgrade Kit: RealSense holder","text":"<p>iCub RealSense holder UpKit describes how to perform an upgrade on the head in order to add a RealSense camera holder in order to help 3D perception during manipulation tasks.</p>"},{"location":"upgrade_kits/#kit_009-icub-upgrade-kit-head-with-4k-cameras","title":"\ud83d\udd18 KIT_009 iCub Upgrade Kit: Head with 4K Cameras","text":"<p>iCub new head UpKit</p>"},{"location":"upgrade_kits/#kit_010-icub-backpack-with-com-express","title":"\ud83d\udd18 KIT_010 iCub Backpack with COM-Express","text":"<p>iCub Backpack UpKit</p>"},{"location":"upgrade_kits/ankle_for_stairs/support/","title":"KIT_007 Ankle for climbing stairs","text":"<p>We are going to replace iCub feet plates in order to increase the step length and climb some stairs.</p> IIT alias (used as ordering reference) KIT_007 Applicable to iCub 2.x, x\u22655 Available onboard available as an option"},{"location":"upgrade_kits/ankle_for_stairs/support/#content-material","title":"Content material","text":"Pieces Alias Description Code Wgst 1 RC_IIT_028_P_001 left foot shaped plate 15058 1 RC_IIT_028_P_002 right foot shaped plate 15059 12 V3-8--_-_U5933_C screw 3x8 \u2013 UNI5933 \u2013hexagon socket countersunk head 2468"},{"location":"upgrade_kits/ankle_for_stairs/support/#assembly-instruction","title":"Assembly instruction","text":"<ul> <li>First of all we need to remove the sensorized sole from the foot loosening the screws in picture</li> </ul> the sole and its screws <ul> <li>Now we can separate the footplate and its cover loosening the screws green in picture</li> </ul> the screws that tight the foot plate to the robot <ul> <li> <p>At this point we are going to separate cover and foot plate removing these screws</p> how to separate foot plate from cover </li> <li> <p>Now we can follow the procedure back mounting the cover on the new foot plate</p> the new foot plate </li> <li> <p>Tight it back to the robot using the screws provided in the UKIT_007.</p> </li> <li> <p>Mount back the sensorized sole using the same screws as before</p> </li> </ul>"},{"location":"upgrade_kits/ankle_for_stairs/support/#software-instructions","title":"Software instructions","text":"<p>If you mount the <code>KIT_007</code> on your iCub, the kinematics of the leg limb will change, so you will need to make sure that any model that you use in your high level software  (in particular anything related to walking or in any case motion of the legs) will be changed appropriately.</p> <p>In particular, if you rely on URDF models present in robotology/icub-models, make sure that your iCub model is correctly updated to include the changes of <code>KIT_007</code>.</p> <p>If you do not know if your iCub model is present in robotology/icub-models or if it is updated, feel free to open an issue on robotology/icub-tech-support to ask about it. </p>"},{"location":"upgrade_kits/backpack/support/","title":"KIT_010 iCub Backpack with COM-Express","text":"<p>Warning</p> <p>This UKIT is still a work in progress!</p>"},{"location":"upgrade_kits/backpack/support/#upgrade-kit","title":"Upgrade Kit","text":"<p>This upgrade kit is meant to update the iCub backpack with new accomodation for the COM-Express and new design for its upper cover.</p> IIT alias (used as ordering reference) KIT_010 Applicable to iCub versions \u2265 2.x Available onboard \u2013 # Code Alias Rev UM Qty Description 1 17831 MKIT_010 Pieces 1 iCub backpack update 2 WKIT_010 Pieces 1 iCub2.x, COM Express Type 10 (wiring) 3 EKIT_010 Pieces 1 iCub2.x, COM Express Type 10 (electronics)"},{"location":"upgrade_kits/backpack/support/#content-material-mkit_010","title":"Content material  MKIT_010","text":"Alias Description Code Rev Qty M3X06-6LOBE-ISO14581-A2-70 M3 x  6 , ISO14581, 6LOBE socket countersunk flat head screw, f. threaded, A2-70 15831 6 M2_5X06-6LOBE-ISO14583-A2-70 M2_5 x  6, ISO14583, 6LOBE socket pan head machine screw, fully threaded, A2-70 15993 4 IC_034_G_029 BASE FRAME for boards 18400 A1 1 IC_034_G_030 Support for COM with inserts 18401 A1 1 IC_034_G_031 Support for connector with inserts 18402 0 1 IC_034_G_034 Cover backpack assy 18405 0 1 RC_IIT_025_P_130 Hinge for backpack 13615 A3 1"},{"location":"upgrade_kits/backpack/support/#content-material-wkit_010","title":"Content material  WKIT_010","text":"Code BOM Alias Rev Qty Description \ud83d\udd18 Click to download the PDF"},{"location":"upgrade_kits/backpack/support/#content-material-ekit_010","title":"Content material  EKIT_010","text":"Pieces Alias Rev Description Code Wgst 1 CONNECTTECH_CCG020 Carrier Board for COM-Express Type10, Connecttech CCG020 15301 1 KONTRON_34099-0000-99-0_R2_1 COMe mini Active Uni Cooler (w/o HSP) 15626 1 CKG035 CableKit for Carrier Board COM-Express Type10, CCG020 15785 1 ADVANTECH_SOM-7583C7-S8A1 COM-Express Type10, Advantech SOM i7-1185G7E 16GB DDR4, 64GB SSD 16252 <p>Draft Logic schematic</p> \ud83d\udd18 Click to download the PDF"},{"location":"upgrade_kits/backpack/support/#assembly-instruction","title":"Assembly instruction","text":""},{"location":"upgrade_kits/backpack/support/#assembly-sequence","title":"Assembly sequence","text":""},{"location":"upgrade_kits/backpack/support/#software-instructions","title":"Software instructions","text":""},{"location":"upgrade_kits/differential_neck_pulley/support/","title":"KIT_006 Update of differential neck pulley for iCub","text":"<p>We are going to replace parts in the neck, you can either operate with the head's covers mounted or not (probably more comfortable). It is possible to work with leaving the head attached to the robot or not.</p> IIT alias (used as ordering reference) KIT_006 Applicable to iCub, head V2 Available onboard since iCub SN 043 (August 2020)"},{"location":"upgrade_kits/differential_neck_pulley/support/#content-material","title":"Content material","text":"Pieces Alias Description Code Wgst 2 RC_IIT_010_P_071 Differential neck HFUC pulley 6791 4 V2-3--_-_ISO7045_CZ M 2 x 3 \u2013 ISO7045 \u2013 SS A2 2425"},{"location":"upgrade_kits/differential_neck_pulley/support/#assembly-instruction","title":"Assembly instruction","text":"<p>We are going to replace the part in the following picture with its new version A2, this is really similar to the previous one but the groove (red in picture) which is now smaller.</p> The pulley part to be changed <p>There are two of these parts  in iCub's neck. Here is a picture of the neck with the parts in red.</p> The neck with the pulleys in red <p>Here are the instructions for replacing the left pulley.</p> <ul> <li>First of all you need to remove tendons from the neck. Neck's tendons replacement</li> <li> <p>Remove the green highlighted assembly loosening the screws indicated by arrows</p> tbd </li> <li> <p>Untight the screw shown in left picture to extract the whole motor assembly shown on the right.</p> The whole neck The motor assembly </li> <li> <p>Gently remove pulley's assembly as on left picture and remove the flex spline from the pulley untightening the screw shown on rigth.</p> pulley assembly the screw to remove </li> <li> <p>Repeat the procedure above to extract  the rigth pulley.</p> </li> <li>When the two old pulleys are removed,  mount back the new ones by following instructions in reverse.</li> </ul>"},{"location":"upgrade_kits/eyes/support/","title":"KIT_005 Eyes motor replacement support","text":"IIT alias (used as ordering reference) KIT_005 Applicable to iCub, head V2 Available onboard since iCub SN 043 (August 2020)"},{"location":"upgrade_kits/eyes/support/#content-material","title":"Content material","text":"Pieces Alias Description Code Wgst 2 RC_IIT_010_P_038 EYE_ACTUATING-JOINT_BASE 2617 1 RC_IIT_010_P_047 V2 eye tilt brace A 2626 1 RC_IIT_010_P_048 V2 eye tilt brace B 2627 2 2-10--_-_ISO7046-1_CH Screw -M 2 x 10  \u2013  ISO7046 \u2013 SS A2 2596 4 S1_5-6--_-_I2338_B Dowel pin 1.5 x 6 stainless steel A2, UNI1707 2354"},{"location":"upgrade_kits/eyes/support/#assembly-instruction","title":"Assembly instruction","text":"<p>We are going to replace parts in the eyes tilt assembly, there are some preliminary actions to take:</p> <ul> <li> <p>we need to turn off the head and the whole robot.</p> </li> <li> <p>we need to remove head's covers .</p> </li> <li> <p>we need to unplug and remove the whole boards' frame.</p> without covers without boards' frame <p>We are going to replace the 4 parts here in picture.</p> </li> </ul> Brackets unmounting <p>We need to remove eye's assembly from the head unlocking two cross recessed screws</p> the screws to remove eye's group <p>Unmount the groupand replace the old case with the new one</p> old one new one <p>While mounting the motoreducer group checl if it moves at the correct amount of current, if not try to slightly release these screws</p> motoreducer group <p>Before mounting back the eyes on the face we need to replace the brackets. Releasing the grub screws (blue arrows) we can remove the pins (yellow arrows) and later the brackets (red arrows) mounting back the new ones - First of all you need to remove tendons from the neck,  - Remove the green highlighted assembly loosening the screws indicated by arrows</p> Brackets unmounting <p>Mount the head back following the instruction in reverse Do not hesitate to contact iCub support for any doubt.</p>"},{"location":"upgrade_kits/hands/support/","title":"KIT_003 Update Support for iCub Right and Left hand","text":"IIT alias (used as ordering reference) KIT_003 Applicable to iCub Available onboard since iCub SN 043 (August 2020)"},{"location":"upgrade_kits/hands/support/#content-material","title":"Content material","text":"Pieces Alias Position Rev Description Code Wgst 1 RC_IIT_011_P_063 Left support for Mais 14357 1 RC_IIT_011_G_017 Left support for FTC 14354 1 RC_IIT_011_P_062 3 Right support for Mais 14356 1 RC_IIT_011_G_016 1 Right support for FTC 14355 4 ISO 7046 M1.6x5 2 CROSS RECESSED SCREW ISO7046-1 M1.6X5 H 11229 6 ISO 7045 M1.6x6 4 / 6 CROSS RECESSED SCREW ISO7045 M1.6X6 Z 2399 4 ISO 1207 M1x5 7 SLOTTED CHEESE HEAD SCREW DIN 84 ISO1207 M1X5 2406 2 RC_IIT_017_P_031 10 UPPERCOVER HAND RIGHT 5448 2 RC_IIT_017_P_030 UPPERCOVER HAND LEFT 5447 2 V2-6--_-_ISO7046-1_CH 9 CROSS RECESSED SCREW ISO7046-1 M2X6 H 2440"},{"location":"upgrade_kits/hands/support/#assembly-instruction","title":"Assembly instruction","text":"<p>First of all you need to know that you will be in a situation where you will have to disassemble the components to replace and disconnect the Corn and FTC boards  in order to move them and leave the workspace free as much as possible. Once this is done the first piece to be mounted will be the rc_IIT_011_g_016 or the rc_IIT_011_g_017 (right or left hand) as shown in the video. All this because you will find yourself in the condition in which you will have to pass the piece between the cables (tendons) that move the thumb. This explanation is the same for both hands</p>"},{"location":"upgrade_kits/hands/support/#exploding","title":"Exploding:","text":"<p>Reference Right hand</p> <p>Assemble upgrade support Mais and FTC </p>"},{"location":"upgrade_kits/hands/support/#assembly-sequence","title":"Assembly sequence","text":"<p>Mounting the cover (dorsum of the hand): pass the hook of the dorsum cover between the steel cable (tendon) and the palm of the hand (cover). See video</p>"},{"location":"upgrade_kits/head_4k/support/","title":"KIT_009 iCub Head with 4K Cameras","text":"<p>Warning</p> <p>This UKIT is still a work in progress!</p>"},{"location":"upgrade_kits/head_4k/support/#upgrade-kit","title":"Upgrade Kit","text":"<p>This upgrade kit is meant to update the head with new eyes composed by high-resolution cameras, bigger FOV lenses, new GPU, new accomodation for the COM-Express in the backpack, new design for the upper cover of the backpack.</p> IIT alias (used as ordering reference) KIT_009 Applicable to iCub versions \u2265 2.x Available onboard \u2013 # Code Alias Rev UM Qty Description 1 18476 MKIT_009 A2 Pieces 1 iCub eyes Mk4 2 17018 WKIT_009 Pieces 1 iCub2.x, Basler cameras, GPU, and COM Express Type 10 (wiring) 3 16519 EKIT_009 Pieces 1 iCub2.x, Basler cameras, GPU, and COM Express Type 10 (electronics)"},{"location":"upgrade_kits/head_4k/support/#content-material-mkit_009","title":"Content material  MKIT_009","text":"Alias Description Code Rev Qty RMB_UL_255X RMB BEARING UL 255X 2344 6 S1_5-6--_-_I2338_B Dowel pin \u00d81.5 x 6 stainless steel A2, DIN7, ISO2338B, VSM12771, UNI1707 2354 10 MYONIC_SHIM_PS_2-5_4_THK_0-1 Myonic Precision Shim PS \u00d83x4 mm thickness 0,10 mm 2698 8 MYONIC_SHIM_PS_5_7_THK_0- 15 Myonic Precision Shim PS \u00d85x7 mm thickness 0,15 mm 2701 10 RC_IIT_023_P_027 Eyelid motor encoder support 5831 A5 1 RC_IIT_023_P_058 Eyes tilt rod 5848 A2 1 G2-2--_-_U5923_G Set screw, hex socket, M2,0 x 2,0, stainless steel A2, DIN913, ISO4026, UNI5923 12766 4 M3x06-6LOBE-ISO14581-A2-70 M3x 6 , ISO14581, 6LOBE socket countersunk flat head screw, f. threaded, A2-70 15831 6 M1_6X04-6LOBE-ISO14583-A4-70 M1.6 x  4 , ISO14583, 6LOBE socket pan head machine screw, fully threaded, A4-70 15841 2 M2X08-6LOBE-ISO14583-A2-70 M2 x  8 , ISO14583, 6LOBE socket pan head machine screw, fully threaded, A2-70 15854 4 M2_5X06-6LOBE-ISO14581-A2-70 M2.5 x  6 , ISO14581, 6LOBE socket countersunk flat head screw, f. threaded, A2- 15931 4 M2_5X06-6LOBE-ISO14583-A2-70 M2_5 x  6, ISO14583, 6LOBE socket pan head machine screw, fully threaded, A2-70 15993 8 M2_5X08-6LOBE-ISO14583-A2-70 M2_5 x  6, ISO14583, 6LOBE socket pan head machine screw, fully threaded, A2-70 15994 6 M3X06-6LOBE-ISO14583-A2-70 M3 x  6, ISO14583, 6LOBE socket pan head machine screw, fully threaded, A2-70 16022 4 M2X06-6LOBE-ISO14583-A2-70 M2 x  6, ISO14583, 6LOBE socket pan head machine screw, fully threaded, A2-70 15853 8 IC_034_G_007 Eye bulb with inserts 18375 A2 2 IC_034_G_025 Orin NX support with inserts 18384 A1 1 IC_034_M_020 V2 eye tilt brace A 18385 A1 1 IC_034_P_017 Eye pan frame with protrusion 18386 0 2 IC_034_P_039 Eye CCD mounting plate 18581 A1 2 IC_034_P_020 Eye tilt brace A 18388 A1 1 IC_034_P_021 Eyelid reinforcement 18389 0 1 IC_034_P_022 Eyelid upper 18390 A1 1 IC_034_P_023 Eye pan frame 18391 0 2 IC_034_P_025 V2 eye pan rod 18392 A1 2 IC_034_G_029 backpack, base frame with inserts 18400 A1 1 IC_034_G_030 Support for COM with inserts 18401 A1 1 IC_034_G_031 Support for connector with inserts 18402 0 1 IC_034_G_034 Cover backpack assy 18405 0 1 IC_034_P_034 V2 head eyes tilt frame 18475 0 1 RC_IIT_025_P_130 Hinge for backpack 13615 A3 1"},{"location":"upgrade_kits/head_4k/support/#content-material-wkit_009","title":"Content material  WKIT_009","text":"Code BOM Alias Rev Qty Description 10132 10132 20,000 Housing, Microfit, 2 contacts, 1   row, male, p.3mm, Straight, w to w, lock, key, 5A 10879 10879 20,000 Crimp terminal, Pico-Lock,   female contacts, AWG24-28, 3A 11146 MOLEX_504051-0401 10,000 Housing, Pico-Lock, 4 contacts,   1 row, female, p.1.5mm, Straight, w to w / w to b, lock, nokey, 3A 12070 12070 0,1500 FTP-LAN cable, Small Diameter   AWG28, CAT6 16288 AMPHENOL-FCI_10073599-006LF 20,000 Housing, MiniTek, 6 contacts, 2   row, female, p.2mm, Straight, w to w / w to b, nolock, nokey, 2A 328 328 10,700 PVC insulated cable, 1 pole,   0.25mmq, AWG23, 500V, black 4155 4155 10,700 PVC insulated cable, 1 pole,   0.25mmq, AWG23, 500V, yellow 4158 4158 0,2000 PVC insulated cable, 1 pole,   0.5mmq, AWG20, 500V, yellow 4411 4411 0,2000 PVC insulated cable, 1 pole,   0.5mmq, AWG20, 500V, black 502 502 40,000 Crimp terminal, Microfit, female   contacts, AWG20-24 510 510 10,000 Housing, Varilok, 2 contacts, 1   rows, p.5.08mm, Straight, w to w, lock, key, 8.5A 5280 SWITCHCRAFT-35RASMT4BHNTRX 10,000 PCB connector, jack stereo, 5   contact, female, w to b, 90\u00b0 nolock, nokey, diam 3.5mm, SMD 66 66 0,1500 Teflon insulated cable, 1 pole,   AWG26, 600V, white, UL E20042 68 68 10,050 Teflon insulated cable, 1 pole,   AWG26, 600V, black, UL E20042 69 69 0,1500 Teflon insulated cable, 1 pole,   AWG26, 600V, green, UL E20042 70 70 0,2000 Teflon insulated cable, 1 pole,   AWG26, 600V, yellow, UL E20042 7141 7141 330,000 Crimp terminal, FCI MiniTek,   female contact, AWG26-30 7142 amphenol-fci_10073599-008LF 10,000 Housing, MiniTek, 8 contacts, 2   row, female, p.2mm, Straight, w to w / w to b, nolock, nokey, 2A 7143 AMPHENOL-FCI_10073599-010LF 20,000 Housing, MiniTek, 10 contacts, 2   row, female, p.2mm, Straight, w to w / w to b, nolock, nokey, 2A 72 72 0,6550 Teflon insulated cable, 1 pole,   AWG26, 600V, red, UL E20042 \ud83d\udd18 Click to download the PDF"},{"location":"upgrade_kits/head_4k/support/#content-material-ekit_009","title":"Content material  EKIT_009","text":"Pieces Alias Rev Description Code Wgst 1 PUIAUDIO_AS04004PO-2-R_SPKR Miniature speaker, 4R, 82dBA,200Hz, 3W, 12035 1 13463 HMC mini PCIE to M.2 KEY E adapter 13463 2 13570 Flexible WIFI Antenna 2.4-5GHz, 34.90*9mm, 200mm cable, MHF4 connector 13570 1 CONNECTTECH_CCG020 Carrier Board for COM-Express Type10, Connecttech CCG020 15301 1 KONTRON_34099-0000-99-0_R2_1 COMe mini Active Uni Cooler (w/o HSP) 15626 1 CKG035 CableKit for Carrier Board COM-Express Type10, CCG020 15785 1 ADVANTECH_SOM-7583C7-S8A1 COM-Express Type10, Advantech SOM i7-1185G7E 16GB DDR4, 64GB SSD 16252 1 16433 Intel AX210, Mini PCI-e WiFi 6E, 2x2 AC + BT 5.2, M.2 2230 key E 16433 2 BASLER_2000036061 M12 Lens, Focus 2.1mm, Aperture 1.8 FOV 170 degree with IR cut filter, \u2153 16483 1 16487 NVIDIA JETSON XAVIER NX, 69.6mm x 45mm 260-pin SO-DIMM connector, 8 GB LPDDR4, 16GB eMMC 16487 1 16488 NVIDIA Jetson Xavier NX Aluminum Heatsink with 36mm Fan for  with Long Cable 16488 1 CONNECTTECH_NGX014 Quark Carrier board for NVIDIA\u00ae Jetson Nano\u2122 and Xavier NX Module, 5V input 16518 2 16547 Camera Kit for NVIDIA Xavier NX or Jetson Nano, daA4200-30mci, M13B0618W, adapter board and 200mm flat cable 16547 <p>Draft Logic schematic</p> \ud83d\udd18 Click to download the PDF"},{"location":"upgrade_kits/head_4k/support/#assembly-instruction","title":"Assembly instruction","text":""},{"location":"upgrade_kits/head_4k/support/#assembly-sequence","title":"Assembly sequence","text":"<p>This upgrade kit is a radical change in the head. For the assembly sequence, refer to the repository  icub-tech-iit/cad-mechanics-public</p>"},{"location":"upgrade_kits/head_4k/support/#kinematics","title":"Kinematics","text":"<p>Due to mechanical design constraints, the kinematics of the upgraded head underwent slight changes. While the DH table is the same as the v2 (see: Head V2 Kinematics), the end-effector matrix changes to:</p> \\[ \\begin{equation} T_E = \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; -12.63mm \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ \\end{bmatrix} \\end{equation} \\] <p>To use the gaze controller, you must instantiate <code>head_version</code> <code>\"v2.10\"</code>, which is available since the distro release 2024.11.0.</p>"},{"location":"upgrade_kits/head_4k/support/#software-instructions","title":"Software instructions","text":"<p>This UKIT also includes an additional NVIDIA Jetson Orin NX mounted on the top of the head, for handling the FRAMOS-IMX 678 cameras and performing image processing on the onboard GPU. The Orin NX has to be configured following the flash procedure and then the guide to configure the FRAMOS-IMX678.</p> <p>If the image has been installed from scratch, an initial configuration is also required, which consists in:</p> <ul> <li>Set the <code>icub</code> as <code>host</code> and <code>icub-head</code> as <code>hostname</code>.</li> <li>Configure the network.</li> </ul> <p>For using the images provided by the new <code>FRAMOS-IMX678</code> camera over the YARP network, it is needed to compile and install <code>yarp-device-argus</code>.</p>"},{"location":"upgrade_kits/realsense_holder/support/","title":"KIT_008 iCub RealSense holder","text":""},{"location":"upgrade_kits/realsense_holder/support/#upgrade-kit","title":"Upgrade Kit","text":"<p>This upgrade kit is meant to improve iCub's 3D perception and grasping capabilities by adding a RealSense camera plugged on the head, in addition to the other eye cameras.</p> <p>It ensures the compatibility with more RealSense models.</p> IIT alias (used as ordering reference) KIT_008 IIT Code 17314 Applicable to iCub 2.7 Available onboard no, optional # Code Alias Rev UM Qty Description 1 15363 MKIT_008 A1 Pieces 1 iCub 2.7, head, RealSense holder"},{"location":"upgrade_kits/realsense_holder/support/#content-material-mkit_008","title":"Content material  MKIT_008","text":"Pieces Alias Rev. Description Cod. Wgst 1 IG_027_P_010 iCub Head, RealSense setup, holder 17315 2 V3-8--_-_U5933_C screw \u2013 M 3 x 8 \u2013 UNI5933 , DIN7991  , ISO10642 \u2013 SS A2 \u2013 hexagon socket countersunk head 2468 2 V4-16--_-_ISO7045_CZ screw - M4 x 16 - UNI7687 , DIN7985A , ISO7045 - SS A2 - pozidriv cross recessed pan head 11963"},{"location":"upgrade_kits/realsense_holder/support/#historical-review","title":"Historical review","text":"<p>This upgrade kit has been developed together with the HSP@IIT research line as an optional plug-in support to improve iCub perception and facilitate it in grasping tasks iCub. For reference, see also the page design holder realsense.</p> <p>The holder has been designed to be compatible with the following RealSense models:</p> Alias Description Cod. Wgst INTEL_REALSENSE_D415 Intel Realsense D415, range from 0.3 to 10m, FOV 70 de 13038 INTEL_REALSENSE_D435i Intel Realsense D435i with IMU, range from 0.2 to 10m, FOV 90 de i 14567 INTEL_REALSENSE_D405 Intel RealSense D405 with IMU, range from 7 cm to 50 cm, FOV 87\u00b0\u00d758\u00b0 17231 <p>Note</p> <p>Not all the RealSense cameras have the same interface, some of them connect by using a different cable.</p> RealSense model associated cable Cable Wgst Code INTEL_REALSENSE_D415 USB Shielded I/O Cable Assembly, Type C/M to C/M, USB 3.1 GEN4, 3.0m Length, Black 15365 INTEL_REALSENSE_D435i USB Shielded I/O Cable Assembly, Type C/M to C/M, USB 3.1 GEN4, 3.0m Length, Black 15365 INTEL_REALSENSE_D405 USB Shielded I/O Cable Assembly, USB 3.2 Gen 1, Male A to Male Micro-B, 3.0m length, black 17308"},{"location":"upgrade_kits/realsense_holder/support/#assembly-instruction","title":"Assembly instruction","text":"<p>The RealSense holder can be mounted on the top of iCub head by replacing two side screws fixing the face cover, and in the kit are included and USB Type-C cable, screws and cable ties. The kit does NOT include the RealSense. It is recommended to replace the short cable included in the RealSense retail package with the longer one provided with the upgrade kit.</p> <p>Note</p> <p>The following instructions are provided for assembling the D435i model of RealSense camera.</p> <p>Assembly sequence</p> <p>Perform the assembly sequence as shown in the following images.</p> <ul> <li>First step, remove the two screws V4-12--_-_U5933_C from the side of the face cover as can be seen in the image. Set them aside, just in case you want to successively unmount the RealSense holder.</li> </ul> <ul> <li>Second step, fix the holder IG_027_P_010 with the respective screws V4-16--_-_ISO7045_CZ as shown in the image, and fix the hook to the backward cover air vents.</li> </ul> <ul> <li>Third step, fix the chosen RealSense model to the holder usign the screws V3-8--_-_U5933_C. At this point is possible to plug the USB Type-C cable cod. 15365 and use the cable ties cod. 531 to fix it around the head.</li> </ul> <p>Note</p> <p>As mentioned above, the RealSense D405 uses a different cable too.</p>"},{"location":"upgrade_kits/realsense_holder/support/#print-the-realsense-holder-yourself","title":"Print the RealSense Holder yourself","text":"<p>Check out the STL and STEP files of the holder. </p>"},{"location":"upgrade_kits/realsense_holder/support/#calibration-of-the-realsense-holder","title":"Calibration of the RealSense Holder","text":"<p>The software tool used to estimate the extrinsic parameters of the RealSense camera when mounted with the holder with respect to the robot known frames is <code>realsense-holder-calibration</code>.</p> <p>Find therein the relative documentation.</p>"},{"location":"upgrade_kits/torso_capacitors/support/","title":"KIT_002 Update of capacitor support (front and rear) iCub 2.5 with battery backpack","text":""},{"location":"upgrade_kits/torso_capacitors/support/#content-material","title":"Content material","text":"IIT alias (used as ordering reference) KIT_002 Applicable to iCub Available onboard since iCub SN 043 (August 2020) Pieces Alias Description Code Wgst 4 RC_TLR_003_P_060_00 CAPACITOR HOLDING PLATE 2035 4 V2-5--_-_ISO7046-1_CH CROSS RECESSED SCREW ISO7046-1 M2X5 H 2430 4 Cable tie Cable tie, 100x2.5mm, nylon, black 531"},{"location":"upgrade_kits/torso_capacitors/support/#assembly-instructions","title":"Assembly instructions","text":"<p>Make sure the 4 capacitors (front and back) are accessible (has a view). For the removal and subsequent reassembly of the parts that obstruct (backpack unit), refer to the specific manual .</p> <p>Assembly sequence : Perform the assembly sequence as indicated in the image, keep in mind that the sequence is the same for all 4 support (Front and rear).</p>"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/","title":"KIT_004 iCub upper arm covers preventing skin breakage","text":""},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#upgrade-kit","title":"Upgrade Kit","text":"<p>Warning</p> <p>The 3D taxels points are not yet available for both <code>left_arm</code> and <code>right_arm</code> limbs of iCub robots mounting this UKit (iCub HW version 2.7). For this reason, <code>skinManager</code> may not work as expected. This information will be added in the near future. Instead, the 2D positions of the new patches have been defined such that <code>iCubSkinGui</code> can work just fine.</p> IIT alias (used as ordering reference) KIT_004 Applicable to iCub Available onboard since iCub SN 043 (August 2020) # Code Alias Rev UM Qty Description 1 14589 MKIT_004 Pieces 1 iCub, Upper arms, fix skin breaking 2 14767 WKIT_004 Pieces 1 iCub 2, Upperarms, fix skin breaking (wiring parts) 3 14768 EKIT_004 Pieces 1 iCub 2, Upperarms, fix skin breaking (electronics)"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#content-material-mkit_004","title":"Content material  MKIT_004","text":"Pieces Alias Description Code Wgst 1 RC_IIT_017_P_023 Right UA UPPER COVER iCub2.5 5253 1 RC_IIT_017_P_022 Left  UA UPPER COVER iCub2.5 5252 4 V2-8--_-_ISO7045_CZ CROSS RECESSED SCREW ISO7045 M2X8 Z 2444 2 V2-6--_-_ISO7045_CZ CROSS RECESSED SCREW ISO7045 M2X6 Z 2439 2 V2-6--_-_ISO7046-1_CH CROSS RECESSED SCREW ISO7046-1 M2X6 H 2440 4 V3-10--_-_ISO7046-1_CH CROSS RECESSED SCREW ISO7046-1 M3X10 H 3461"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#content-material-wkit_004","title":"Content material  WKIT_004","text":"Pieces Alias REV Description Code Wgst 1 10301 iCub 2.5, subassembly - Right Upperarm Skin Harness, wiring materials 10301 1 10273 iCub 2.5, subassembly - Left Upperarm Skin Harness, wiring materials 10273 <p>note</p> <p>link to harness schematics </p>"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#content-material-ekit_004","title":"Content material  EKIT_004","text":"Pieces Alias REV Description Code Wgst 1 13475 iCubSkin 2.5, Right Upper Arm Skin, RUGGED Electronic boards 13475 1 13476 iCubSkin 2.5, Left Upper Arm Skin, RUGGED Electronic boards 13476 <p>note</p> <p>link to logic schematics</p>"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#historical-review","title":"Historical review:","text":"<p>In previous revisions of the covers, the mini cards were organized in the shape of hexagons. This largely caused the skin patch PCB to flex and break, because the patches took the high curvature of the cover (see image).</p> <p>To solve this problem, we reduced the number of PCBs by arranging a strip with 5 PCBs (skin patch) on the flat surface of the cover. (see image)</p>"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#assembly-instruction","title":"Assembly instruction.","text":"<p>First of all, it must be said that the electronic part of the upper arm covers is already supplied, that is, the MTB4 cards and the hexagon shape (skin) are mounted, glued and connected together. Before starting assembly, check the orientation of the covers.</p> <p>Assembly sequence :</p> <p>Perform the assembly sequence as shown in the image, keep in mind that the sequence is the same for both upper arms (Right and left)</p> <ul> <li>First step push the cover (RC_IIT_017_P_023) inwards so as to align the attachment holes, both positions (TOP and BOTTOM), as can be seen in the image.</li> </ul> <ul> <li>Second and third step, fix the cover using the respective screws as shown in the image. This applies to both positions TOP and BOTTOM.</li> </ul> <ul> <li>Fourth step, close the covers of the upper arm by pushing the Lover cover inwards in order to align the attachment holes. After that fix the covers with the respective lives as shown in the pictures.  This applies to both positions TOP and BOTTOM.</li> </ul>"},{"location":"wrists/","title":"Summary","text":""},{"location":"wrists/#wrists","title":"Wrists","text":""},{"location":"wrists/#wrist-mk2","title":"Wrist Mk2","text":"<ul> <li>Overview of the Wrist Mk2</li> <li>The Mathematics of the Spherical Joint</li> </ul>"},{"location":"wrists/wrist_mk2/","title":"Wrist Mk2.0 vs Wrist Mk2.1","text":"<p> <sub>Wrist Mk2.0 (left) vs Wrist Mk2.1 (right)</sub> </p>"},{"location":"wrists/wrist_mk2/#wrist-mk2-and-elbow-joints-specs","title":"Wrist Mk2 and Elbow joints Specs","text":"Joint number Motors Identifier Type Parent link Child link Mk2.0 lower limit Mk2.0 upper limit Mk2.1 low. l. Mk2.1 upp. l. Notes l_elbow ROT l_upperarm l_forearm - - - - E1 in fig. l_wrist_yaw ROT l_forearm l_wrist_1 -92\u00b0 92\u00b0 -92\u00b0 92\u00b0 W1 in fig. l_wrist_roll ROT l_wrist_1 l_wrist_2 -62\u00b0 52\u00b0 -33\u00b0 40\u00b0 W2 in fig. l_wrist_pitch ROT l_wrist_2 l_hand_palm -32\u00b0 32\u00b0 -20\u00b0 20\u00b0 W3 in fig. r_elbow ROT r_upperarm r_forearm - - - - r_wrist_yaw ROT r_forearm r_wrist_1 - - -92\u00b0 92\u00b0 r_wrist_roll ROT r_wrist_1 r_wrist_2 - - -33\u00b0 40\u00b0 r_wrist_pitch ROT r_wrist_2 r_hand_palm - - -20\u00b0 20\u00b0 <p> <sub>Wrist Mk2 and Elbow joints 1/2</sub> </p> <p> </p> <p> <sub>Wrist Mk2 and Elbow joints 2/2</sub> </p>"},{"location":"wrists/wrist_mk2_math/","title":"Wrist Mk2: the Mathematics of the spherical joint","text":"<p> <sub>Wrist Mk2</sub> </p> <p>It seems impossible to find the analytic solution in the closed form of the direct geometric problem (i.e. given the motor angles, find the orientation of the platform), but it is quite easy to calculate the analytic form of the inverse Jacobian if we express the problem in a smart way. The numeric solution of the direct geometric problem is quite easy as well.</p>"},{"location":"wrists/wrist_mk2_math/#premise","title":"Premise","text":"<ul> <li>The platform rotates without translation around the origin \\(O\\).</li> <li>The length of the arms, equal to the platform radius, is normalized as 1.</li> <li>Let's call \\(q_i\\) the positions of the joints on the platform and \\(p_i\\) the positions of the joints in the arms.</li> <li>The \"L\" shape of the connecting rods forces each vector \\(q_i\\) to be always orthogonal to its respective vector \\(p_i\\) in all configurations.</li> <li>The euclidean distance \\(L\\) between the \\(q_i\\) and the respective \\(p_i\\) is imposed to be constant by the connecting rod.</li> <li>In the case of symmetrical structure, the coordinates of the platform joints in the rest configuration are \\(q_1=(1,0,0)\\), \\(q_2=(-\\frac{1}{2},\\frac{\\sqrt{3}}{2},0)\\) and \\(q_3=(-\\frac{1}{2},-\\frac{\\sqrt{3}}{2},0)\\)</li> <li>The coordinates of the arm joints, that rotate around the vertical axis, are \\(p_1=(\\cos{\\theta_1},\\sin{\\theta_1},-h)\\), \\(p_2=(\\cos{\\theta_2},\\sin{\\theta_2},-h)\\) and \\(p_3=(\\cos{\\theta_3},\\sin{\\theta_3},-h)\\) with \\(h\\) constant and with \\(\\theta_i\\) = rotations of the three motors. In the case of symmetrical structure, at rest we have \\(\\theta_1=60^\\circ\\), \\(\\theta_2=180^\\circ\\) and \\(\\theta_3=240^\\circ\\).</li> <li>The above numbers are referred to the left employment of the wrist mechanism. In order to use it in the right configuration, an offset of \\(180^\\circ\\) must be added so that the whole mechanism kinematics will result symmetrically reflected, maintaining the meaning of roll, pitch, and yaw under the chosen convention. Thus, at rest, the arm angles will be \\(\\theta_1=240^\\circ\\), \\(\\theta_2=0^\\circ\\) and \\(\\theta_3=60^\\circ\\). This implies that the rest position must be set by properly calibrating the arm position sensors on the software side, while the hand interface must be rotated by \\(180^\\circ\\) with respect to the platform on the hardware side.</li> </ul>"},{"location":"wrists/wrist_mk2_math/#analytic-inverse-jacobian","title":"Analytic inverse Jacobian","text":"<p>The distance between the platform joints and the arm joints remains constant during the motion:</p> \\[ L^2=(p_i-q_i)\\cdot(p_i-q_i) \\] <p>and thus</p> \\[ \\frac{\\partial L^2}{\\partial t}=2(p_i-q_i)\\cdot(\\dot{p_i}-\\dot{q_i})=0. \\] <p>From the above equation we have</p> \\[ (p_i-q_i)\\cdot\\dot{p_i}=(p_i-q_i)\\cdot\\dot{q_i}, \\] <p>but \\(\\dot{q_i}=\\omega\\times q_i\\) where \\(\\omega\\) = angular velocity vector of the platform. By substituting this relation in the previous equation we obtain:</p> \\[ (p_i-q_i)\\cdot\\dot{p_i}=(p_i-q_i)\\cdot(\\omega\\times q_i)=p_i\\cdot(\\omega\\times q_i)-q_i\\cdot(\\omega\\times q_i)=p_i\\cdot(\\omega\\times q_i) \\] <p>because the second term \\(q_i\\cdot(\\omega\\times q_i)\\) is null due to the scalar triple product of coplanar vectors.</p> <p>\\(p_i\\) rotates around the vertical axis, thus its angular velocity is \\(\\dot{p_i}=(e_z\\dot{\\theta_i})\\times p_i\\). Let's substitute this relation into the equation above, obtaining:</p> \\[ (p_i-q_i)\\cdot(e_z\\times p_i)\\dot{\\theta_i}=(\\omega\\times q_i)\\cdot p_i, \\] <p>but \\(p_i\\cdot(e_z\\times p_i)=0\\) thanks to the scalar triple product of coplanar vectors, so it remains:</p> \\[ -q_i\\cdot(e_z\\times p_i)\\dot{\\theta_i}=(\\omega\\times q_i)\\cdot p_i \\] <p>from which we can obtain</p> \\[ \\dot{\\theta_i} = -\\frac{(\\omega\\times q_i)\\cdot p_i}{(e_z\\times p_i)\\cdot q_i}. \\] <p>By applying the cyclical permutation of the scalar triple product and the anticommutativity of the cross product we obtain at last:</p> \\[ \\dot{\\theta_i} = \\frac{(q_i\\times p_i)\\cdot \\omega}{(q_i\\times p_i)\\cdot e_z}. \\] <p>We can see that this is just the inverse Jacobian by rewriting the three equations in matrix form:</p> \\[ \\begin{pmatrix} \\dot{\\theta_1} \\\\\\ \\dot{\\theta_2} \\\\\\ \\dot{\\theta_3} \\end{pmatrix}= \\begin{pmatrix} \\frac{(q_1\\times p_1)^T}{(q_1\\times p_1)\\cdot e_z} \\\\\\ \\frac{(q_2\\times p_2)^T}{(q_2\\times p_2)\\cdot e_z} \\\\\\ \\frac{(q_3\\times p_3)^T}{(q_3\\times p_3)\\cdot e_z} \\end{pmatrix}\\omega. \\] <p>Singularity occurs when one of the three divisors \\((q_i\\times p_i)\\cdot e_z\\) is null, i.e., when the joint \\(q_i\\) lies in the same vertical plane that contains the origin and the joint \\(p_i\\).</p> <p>From the inverse Jacobian, we can obtain the transposed direct Jacobian by numeric inversion, required to project the torque acting on the end effector backward to the motors. Given an algebraic three-vector of angular velocities Roll, Pitch and Yaw, the geometric angular velocity vector \\(\\omega\\) is obtained by the known Jacobian transformation from algebraic to geometric representation:</p> \\[ \\omega=J_{GEO} \\begin{pmatrix} \\dot{\\phi_r} \\\\\\ \\dot{\\phi_p} \\\\\\ \\dot{\\phi_3} \\end{pmatrix}. \\]"},{"location":"wrists/wrist_mk2_math/#direct-geometric-problem-numeric-solution","title":"Direct geometric problem (numeric solution)","text":"<p>In order to solve the direct geometric problem with an iterative numeric algorithm we build a dynamic system by substituting to the connecting rods with virtual springs with equal length at rest \\(L\\) sempre attached to the arm joints at points \\(p_i\\) and to the platform joints at points \\(q_i\\). The force exerted by each virtual spring is:</p> \\[ F_i=\\frac{(p_i-q_i)}{\\lvert p_i-q_i\\rvert}\\left(\\lvert p_i-q_i\\rvert-L\\right). \\] <p>For simplicity, and in order to obtain more rapid and precise convergence, we use a nonlinear (quadratic) spring law:</p> \\[ F_i=(p_i-q_i)\\left(\\lvert p_i-q_i\\rvert^2-L^2\\right). \\] <p>The total torque applied to the platform is:</p> \\[ \\tau=q_1\\times F_1 +q_2\\times F_2 +q_3\\times F_3. \\] <p>We also assume that the momentum of inertia of the platform is negligible with respect to the viscous friction, so that we have a first order law of motion \\(\\omega=k\\tau\\). In this way, given the position of the arms, by iterating until convergence we arrive in the correspondant platform orientation by small finite rotations starting from a tentative initial configuration.</p> <ul> <li>At runtime, we use as initial configuration the orientation obtained in the previous control cycle, so that we are sure to be starting from a configuration close to the real one.</li> <li>If no variations occured in the encoder readings, there is no need for any calculation. </li> <li>For better numeric stability it is better to represent internally the platform orientation with a quaternion, normalizing it periodically.</li> </ul> <p>The algorithm can always find a solution if the gap between two arms is less that 180 deg. This is taken into account by the inverse geometrical problem solver, so that it never produces motor angle targets that lead to such singularities.</p>"},{"location":"wrists/wrist_mk2_math/#algorithm-backtraking","title":"Algorithm backtraking","text":"<p>The direct geometric problem solver uses variable gradient descent step and backtracking in order to improve performance by reducing the steps required to converge, as well as to improve robustness.</p> <p>It works in this way: - The gradient descent step \\(S\\) is initialized to \\(S_{max}\\), and the YPR configuration is initialized with that calculated in the previous control cycle, which should be close to the new solution. - If the algorithm can't converge (singularity), then it performs backtracking to the last good YPR configuration, divides the step by 2, and continues. - If the step runs below \\(S_{min}\\), then a reinitialization to the known position (0,0,0) takes place, and the step is reinitialized to \\(S_{max}\\).</p>"}]}